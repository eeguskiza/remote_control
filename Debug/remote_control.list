
remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f88  08004f88  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f88  08004f88  00005f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f90  08004f90  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f90  08004f90  00005f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004f98  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00000354  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcb2  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4a  00000000  00000000  00011d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00013890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d3  00000000  00000000  00014170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3f1  00000000  00000000  00014843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc47  00000000  00000000  0002fc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2146  00000000  00000000  0003b87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dd9c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002898  00000000  00000000  000dda04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000e029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004efc 	.word	0x08004efc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004efc 	.word	0x08004efc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_average>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int calculate_average(uint16_t readings[], const int size) {
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    if (size <= 2) return 0; // Evita errores si el tamaño es insuficiente
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b02      	cmp	r3, #2
 800028e:	dc01      	bgt.n	8000294 <calculate_average+0x14>
 8000290:	2300      	movs	r3, #0
 8000292:	e033      	b.n	80002fc <calculate_average+0x7c>

    uint16_t min = readings[0];
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	82fb      	strh	r3, [r7, #22]
    uint16_t max = readings[0];
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	82bb      	strh	r3, [r7, #20]
    int sum = readings[0];
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	613b      	str	r3, [r7, #16]

    // Recorrer el array una vez
    for (int i = 1; i < size; i++) {
 80002a6:	2301      	movs	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	e018      	b.n	80002de <calculate_average+0x5e>
        uint16_t value = readings[i];
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	817b      	strh	r3, [r7, #10]
        if (value < min) min = value;
 80002b8:	897a      	ldrh	r2, [r7, #10]
 80002ba:	8afb      	ldrh	r3, [r7, #22]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d201      	bcs.n	80002c4 <calculate_average+0x44>
 80002c0:	897b      	ldrh	r3, [r7, #10]
 80002c2:	82fb      	strh	r3, [r7, #22]
        if (value > max) max = value;
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	8abb      	ldrh	r3, [r7, #20]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d901      	bls.n	80002d0 <calculate_average+0x50>
 80002cc:	897b      	ldrh	r3, [r7, #10]
 80002ce:	82bb      	strh	r3, [r7, #20]
        sum += value;
 80002d0:	897b      	ldrh	r3, [r7, #10]
 80002d2:	693a      	ldr	r2, [r7, #16]
 80002d4:	4413      	add	r3, r2
 80002d6:	613b      	str	r3, [r7, #16]
    for (int i = 1; i < size; i++) {
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	dbe2      	blt.n	80002ac <calculate_average+0x2c>
    }

    // Restar el mínimo y el máximo
    sum -= (min + max);
 80002e6:	8afa      	ldrh	r2, [r7, #22]
 80002e8:	8abb      	ldrh	r3, [r7, #20]
 80002ea:	4413      	add	r3, r2
 80002ec:	693a      	ldr	r2, [r7, #16]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	613b      	str	r3, [r7, #16]

    // Devolver el promedio
    return sum / (size - 2);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	3b02      	subs	r3, #2
 80002f6:	693a      	ldr	r2, [r7, #16]
 80002f8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <apply_deadzone>:

int apply_deadzone(int value, int center) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
    if (value > center - DEADZONE && value < center + DEADZONE) {
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	3b22      	subs	r3, #34	@ 0x22
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	429a      	cmp	r2, r3
 800031a:	db06      	blt.n	800032a <apply_deadzone+0x22>
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3322      	adds	r3, #34	@ 0x22
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	dc01      	bgt.n	800032a <apply_deadzone+0x22>
        return center;  // Si está dentro de la zona muerta, ajusta al valor central
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	e000      	b.n	800032c <apply_deadzone+0x24>
    }
    return value;  // Si está fuera, devuelve el valor original
 800032a:	687b      	ldr	r3, [r7, #4]
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <LED_On>:

void LED_On(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);  // Encender LED
 800033c:	2201      	movs	r2, #1
 800033e:	2108      	movs	r1, #8
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <LED_On+0x14>)
 8000342:	f002 f975 	bl	8002630 <HAL_GPIO_WritePin>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <LED_Off>:

void LED_Off(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);  // Apagar LED
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4802      	ldr	r0, [pc, #8]	@ (8000364 <LED_Off+0x14>)
 800035a:	f002 f969 	bl	8002630 <HAL_GPIO_WritePin>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	48000400 	.word	0x48000400

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b092      	sub	sp, #72	@ 0x48
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f000 fc9f 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f8ed 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f000 fa73 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037a:	f000 fa41 	bl	8000800 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800037e:	f000 f941 	bl	8000604 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000382:	f000 f9af 	bl	80006e4 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000386:	f000 fa0b 	bl	80007a0 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#define INIT_SAMPLES 100  // Número de muestras para calibrar el centro

// Calibrar el centro del joystick
int tempSumX = 0, tempSumY = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	647b      	str	r3, [r7, #68]	@ 0x44
 800038e:	2300      	movs	r3, #0
 8000390:	643b      	str	r3, [r7, #64]	@ 0x40
for (int i = 0; i < INIT_SAMPLES; i++) {
 8000392:	2300      	movs	r3, #0
 8000394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000396:	e023      	b.n	80003e0 <main+0x78>
    HAL_ADC_Start(&hadc1);
 8000398:	4860      	ldr	r0, [pc, #384]	@ (800051c <main+0x1b4>)
 800039a:	f000 fec3 	bl	8001124 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 800039e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003a2:	485e      	ldr	r0, [pc, #376]	@ (800051c <main+0x1b4>)
 80003a4:	f000 ff74 	bl	8001290 <HAL_ADC_PollForConversion>
    tempSumX += HAL_ADC_GetValue(&hadc1);
 80003a8:	485c      	ldr	r0, [pc, #368]	@ (800051c <main+0x1b4>)
 80003aa:	f001 f83f 	bl	800142c <HAL_ADC_GetValue>
 80003ae:	4602      	mov	r2, r0
 80003b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003b2:	4413      	add	r3, r2
 80003b4:	647b      	str	r3, [r7, #68]	@ 0x44

    HAL_ADC_Start(&hadc2);
 80003b6:	485a      	ldr	r0, [pc, #360]	@ (8000520 <main+0x1b8>)
 80003b8:	f000 feb4 	bl	8001124 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 80003bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003c0:	4857      	ldr	r0, [pc, #348]	@ (8000520 <main+0x1b8>)
 80003c2:	f000 ff65 	bl	8001290 <HAL_ADC_PollForConversion>
    tempSumY += HAL_ADC_GetValue(&hadc2);
 80003c6:	4856      	ldr	r0, [pc, #344]	@ (8000520 <main+0x1b8>)
 80003c8:	f001 f830 	bl	800142c <HAL_ADC_GetValue>
 80003cc:	4602      	mov	r2, r0
 80003ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80003d0:	4413      	add	r3, r2
 80003d2:	643b      	str	r3, [r7, #64]	@ 0x40

    HAL_Delay(10);  // Pequeña pausa entre lecturas
 80003d4:	200a      	movs	r0, #10
 80003d6:	f000 fcd1 	bl	8000d7c <HAL_Delay>
for (int i = 0; i < INIT_SAMPLES; i++) {
 80003da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003dc:	3301      	adds	r3, #1
 80003de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003e2:	2b63      	cmp	r3, #99	@ 0x63
 80003e4:	ddd8      	ble.n	8000398 <main+0x30>
}
centerX = tempSumX / INIT_SAMPLES;
 80003e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003e8:	4a4e      	ldr	r2, [pc, #312]	@ (8000524 <main+0x1bc>)
 80003ea:	fb82 1203 	smull	r1, r2, r2, r3
 80003ee:	1152      	asrs	r2, r2, #5
 80003f0:	17db      	asrs	r3, r3, #31
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000528 <main+0x1c0>)
 80003f8:	801a      	strh	r2, [r3, #0]
centerY = tempSumY / INIT_SAMPLES;
 80003fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80003fc:	4a49      	ldr	r2, [pc, #292]	@ (8000524 <main+0x1bc>)
 80003fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000402:	1152      	asrs	r2, r2, #5
 8000404:	17db      	asrs	r3, r3, #31
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b29a      	uxth	r2, r3
 800040a:	4b48      	ldr	r3, [pc, #288]	@ (800052c <main+0x1c4>)
 800040c:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  // Leer valores del ADC
	      HAL_ADC_Start(&hadc1);
 800040e:	4843      	ldr	r0, [pc, #268]	@ (800051c <main+0x1b4>)
 8000410:	f000 fe88 	bl	8001124 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 8000414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000418:	4840      	ldr	r0, [pc, #256]	@ (800051c <main+0x1b4>)
 800041a:	f000 ff39 	bl	8001290 <HAL_ADC_PollForConversion>
	      readingsX[index] = HAL_ADC_GetValue(&hadc1);
 800041e:	483f      	ldr	r0, [pc, #252]	@ (800051c <main+0x1b4>)
 8000420:	f001 f804 	bl	800142c <HAL_ADC_GetValue>
 8000424:	4602      	mov	r2, r0
 8000426:	4b42      	ldr	r3, [pc, #264]	@ (8000530 <main+0x1c8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b291      	uxth	r1, r2
 800042c:	4a41      	ldr	r2, [pc, #260]	@ (8000534 <main+0x1cc>)
 800042e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	      HAL_ADC_Start(&hadc2);
 8000432:	483b      	ldr	r0, [pc, #236]	@ (8000520 <main+0x1b8>)
 8000434:	f000 fe76 	bl	8001124 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, 1000);
 8000438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800043c:	4838      	ldr	r0, [pc, #224]	@ (8000520 <main+0x1b8>)
 800043e:	f000 ff27 	bl	8001290 <HAL_ADC_PollForConversion>
	      readingsY[index] = HAL_ADC_GetValue(&hadc2);
 8000442:	4837      	ldr	r0, [pc, #220]	@ (8000520 <main+0x1b8>)
 8000444:	f000 fff2 	bl	800142c <HAL_ADC_GetValue>
 8000448:	4602      	mov	r2, r0
 800044a:	4b39      	ldr	r3, [pc, #228]	@ (8000530 <main+0x1c8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	b291      	uxth	r1, r2
 8000450:	4a39      	ldr	r2, [pc, #228]	@ (8000538 <main+0x1d0>)
 8000452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	      index++;
 8000456:	4b36      	ldr	r3, [pc, #216]	@ (8000530 <main+0x1c8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a34      	ldr	r2, [pc, #208]	@ (8000530 <main+0x1c8>)
 800045e:	6013      	str	r3, [r2, #0]

	      // Si ya tenemos 10 lecturas, procesarlas
	      if (index == NUM_READINGS) {
 8000460:	4b33      	ldr	r3, [pc, #204]	@ (8000530 <main+0x1c8>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2b0a      	cmp	r3, #10
 8000466:	d154      	bne.n	8000512 <main+0x1aa>
	          int avgX = calculate_average(readingsX, NUM_READINGS);
 8000468:	210a      	movs	r1, #10
 800046a:	4832      	ldr	r0, [pc, #200]	@ (8000534 <main+0x1cc>)
 800046c:	f7ff ff08 	bl	8000280 <calculate_average>
 8000470:	63b8      	str	r0, [r7, #56]	@ 0x38
	          int avgY = calculate_average(readingsY, NUM_READINGS);
 8000472:	210a      	movs	r1, #10
 8000474:	4830      	ldr	r0, [pc, #192]	@ (8000538 <main+0x1d0>)
 8000476:	f7ff ff03 	bl	8000280 <calculate_average>
 800047a:	6378      	str	r0, [r7, #52]	@ 0x34

	          // Aplicar zona muerta usando los valores calibrados
	          avgX = apply_deadzone(avgX, centerX);
 800047c:	4b2a      	ldr	r3, [pc, #168]	@ (8000528 <main+0x1c0>)
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000484:	f7ff ff40 	bl	8000308 <apply_deadzone>
 8000488:	63b8      	str	r0, [r7, #56]	@ 0x38
	          avgY = apply_deadzone(avgY, centerY);
 800048a:	4b28      	ldr	r3, [pc, #160]	@ (800052c <main+0x1c4>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	4619      	mov	r1, r3
 8000490:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000492:	f7ff ff39 	bl	8000308 <apply_deadzone>
 8000496:	6378      	str	r0, [r7, #52]	@ 0x34

	          // Transmitir solo si hay cambios significativos
	          if (abs(avgX - lastSentX) > CHANGE_THRESHOLD || abs(avgY - lastSentY) > CHANGE_THRESHOLD) {
 8000498:	4b28      	ldr	r3, [pc, #160]	@ (800053c <main+0x1d4>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	bfb8      	it	lt
 80004a4:	425b      	neglt	r3, r3
 80004a6:	2b05      	cmp	r3, #5
 80004a8:	dc08      	bgt.n	80004bc <main+0x154>
 80004aa:	4b25      	ldr	r3, [pc, #148]	@ (8000540 <main+0x1d8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	bfb8      	it	lt
 80004b6:	425b      	neglt	r3, r3
 80004b8:	2b05      	cmp	r3, #5
 80004ba:	dd27      	ble.n	800050c <main+0x1a4>
	              LED_On();  // Encender LED antes de transmitir
 80004bc:	f7ff ff3c 	bl	8000338 <LED_On>

	              char msg[50];
	              sprintf(msg, "%d/%d\r\n", avgX, avgY);
 80004c0:	4638      	mov	r0, r7
 80004c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80004c6:	491f      	ldr	r1, [pc, #124]	@ (8000544 <main+0x1dc>)
 80004c8:	f004 f878 	bl	80045bc <siprintf>
	              HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004cc:	463b      	mov	r3, r7
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe7e 	bl	80001d0 <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	4639      	mov	r1, r7
 80004da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004de:	481a      	ldr	r0, [pc, #104]	@ (8000548 <main+0x1e0>)
 80004e0:	f003 fc90 	bl	8003e04 <HAL_UART_Transmit>
	              HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80004e4:	463b      	mov	r3, r7
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fe72 	bl	80001d0 <strlen>
 80004ec:	4603      	mov	r3, r0
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	4639      	mov	r1, r7
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004f6:	4815      	ldr	r0, [pc, #84]	@ (800054c <main+0x1e4>)
 80004f8:	f003 fc84 	bl	8003e04 <HAL_UART_Transmit>

	              LED_Off();  // Apagar LED después de transmitir
 80004fc:	f7ff ff28 	bl	8000350 <LED_Off>

	              // Actualizar los últimos valores enviados
	              lastSentX = avgX;
 8000500:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <main+0x1d4>)
 8000502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000504:	6013      	str	r3, [r2, #0]
	              lastSentY = avgY;
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <main+0x1d8>)
 8000508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800050a:	6013      	str	r3, [r2, #0]
	          }


	  	    index = 0;  // Reiniciar índice
 800050c:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <main+0x1c8>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
	  	}


	  	HAL_Delay(100); // Ajustar el retraso según sea necesario
 8000512:	2064      	movs	r0, #100	@ 0x64
 8000514:	f000 fc32 	bl	8000d7c <HAL_Delay>
	      HAL_ADC_Start(&hadc1);
 8000518:	e779      	b.n	800040e <main+0xa6>
 800051a:	bf00      	nop
 800051c:	2000007c 	.word	0x2000007c
 8000520:	200000cc 	.word	0x200000cc
 8000524:	51eb851f 	.word	0x51eb851f
 8000528:	20000000 	.word	0x20000000
 800052c:	20000002 	.word	0x20000002
 8000530:	20000254 	.word	0x20000254
 8000534:	2000022c 	.word	0x2000022c
 8000538:	20000240 	.word	0x20000240
 800053c:	20000258 	.word	0x20000258
 8000540:	2000025c 	.word	0x2000025c
 8000544:	08004f14 	.word	0x08004f14
 8000548:	200001a4 	.word	0x200001a4
 800054c:	2000011c 	.word	0x2000011c

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	@ 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800055a:	2228      	movs	r2, #40	@ 0x28
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 f84c 	bl	80045fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]
 8000582:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000598:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800059c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f85c 	bl	8002660 <HAL_RCC_OscConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005ae:	f000 f9a1 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b2:	230f      	movs	r3, #15
 80005b4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 f885 	bl	80036dc <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d8:	f000 f98c 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80005dc:	2381      	movs	r3, #129	@ 0x81
 80005de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80005e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005e8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 fa95 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005f8:	f000 f97c 	bl	80008f4 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000626:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000628:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800062c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000634:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063a:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000642:	2201      	movs	r2, #1
 8000644:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800064e:	4b24      	ldr	r3, [pc, #144]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000650:	2200      	movs	r2, #0
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000656:	2201      	movs	r2, #1
 8000658:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b21      	ldr	r3, [pc, #132]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000660:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000662:	2201      	movs	r2, #1
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000666:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066e:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000670:	2204      	movs	r2, #4
 8000672:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000674:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000676:	2200      	movs	r2, #0
 8000678:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 800067c:	2200      	movs	r2, #0
 800067e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000680:	4817      	ldr	r0, [pc, #92]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 8000682:	f000 fbbd 	bl	8000e00 <HAL_ADC_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800068c:	f000 f932 	bl	80008f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4811      	ldr	r0, [pc, #68]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 800069c:	f001 fbb4 	bl	8001e08 <HAL_ADCEx_MultiModeConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80006a6:	f000 f925 	bl	80008f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <MX_ADC1_Init+0xdc>)
 80006c8:	f001 f8e0 	bl	800188c <HAL_ADC_ConfigChannel>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80006d2:	f000 f90f 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	@ 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000007c 	.word	0x2000007c

080006e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006fa:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC2_Init+0xb4>)
 80006fc:	4a27      	ldr	r2, [pc, #156]	@ (800079c <MX_ADC2_Init+0xb8>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000700:	4b25      	ldr	r3, [pc, #148]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC2_Init+0xb4>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC2_Init+0xb4>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000720:	4b1d      	ldr	r3, [pc, #116]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000722:	2200      	movs	r2, #0
 8000724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000728:	2201      	movs	r2, #1
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC2_Init+0xb4>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000734:	2201      	movs	r2, #1
 8000736:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_ADC2_Init+0xb4>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000742:	2204      	movs	r2, #4
 8000744:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_ADC2_Init+0xb4>)
 800074e:	2200      	movs	r2, #0
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000752:	4811      	ldr	r0, [pc, #68]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000754:	f000 fb54 	bl	8000e00 <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800075e:	f000 f8c9 	bl	80008f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000762:	2301      	movs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	@ (8000798 <MX_ADC2_Init+0xb4>)
 8000780:	f001 f884 	bl	800188c <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800078a:	f000 f8b3 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000cc 	.word	0x200000cc
 800079c:	50000100 	.word	0x50000100

080007a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a4:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	@ (80007fc <MX_USART1_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007aa:	4b13      	ldr	r3, [pc, #76]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART1_UART_Init+0x58>)
 80007e4:	f003 fac0 	bl	8003d68 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f881 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	2000011c 	.word	0x2000011c
 80007fc:	40013800 	.word	0x40013800

08000800 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000804:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000806:	4a15      	ldr	r2, [pc, #84]	@ (800085c <MX_USART2_UART_Init+0x5c>)
 8000808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800080a:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800080c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x58>)
 8000844:	f003 fa90 	bl	8003d68 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084e:	f000 f851 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200001a4 	.word	0x200001a4
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b1d      	ldr	r3, [pc, #116]	@ (80008ec <MX_GPIO_Init+0x8c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a1c      	ldr	r2, [pc, #112]	@ (80008ec <MX_GPIO_Init+0x8c>)
 800087c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b1a      	ldr	r3, [pc, #104]	@ (80008ec <MX_GPIO_Init+0x8c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_GPIO_Init+0x8c>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a16      	ldr	r2, [pc, #88]	@ (80008ec <MX_GPIO_Init+0x8c>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_GPIO_Init+0x8c>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_GPIO_Init+0x8c>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <MX_GPIO_Init+0x8c>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_GPIO_Init+0x8c>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2108      	movs	r1, #8
 80008c2:	480b      	ldr	r0, [pc, #44]	@ (80008f0 <MX_GPIO_Init+0x90>)
 80008c4:	f001 feb4 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008c8:	2308      	movs	r3, #8
 80008ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_GPIO_Init+0x90>)
 80008e0:	f001 fd34 	bl	800234c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	4a0e      	ldr	r2, [pc, #56]	@ (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6193      	str	r3, [r2, #24]
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <HAL_MspInit+0x44>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x44>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	@ 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000968:	d136      	bne.n	80009d8 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800096a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	4a39      	ldr	r2, [pc, #228]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 8000972:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d10b      	bne.n	8000994 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800097c:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	4a36      	ldr	r2, [pc, #216]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000986:	6153      	str	r3, [r2, #20]
 8000988:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a30      	ldr	r2, [pc, #192]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800099e:	6153      	str	r3, [r2, #20]
 80009a0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c2:	f001 fcc3 	bl	800234c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2012      	movs	r0, #18
 80009cc:	f001 fc87 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009d0:	2012      	movs	r0, #18
 80009d2:	f001 fca0 	bl	8002316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009d6:	e03a      	b.n	8000a4e <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a20      	ldr	r2, [pc, #128]	@ (8000a60 <HAL_ADC_MspInit+0x118>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d135      	bne.n	8000a4e <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 80009ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <HAL_ADC_MspInit+0x110>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d10b      	bne.n	8000a0c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6153      	str	r3, [r2, #20]
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	4a12      	ldr	r2, [pc, #72]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a16:	6153      	str	r3, [r2, #20]
 8000a18:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <HAL_ADC_MspInit+0x114>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a24:	2310      	movs	r3, #16
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3a:	f001 fc87 	bl	800234c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2012      	movs	r0, #18
 8000a44:	f001 fc4b 	bl	80022de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a48:	2012      	movs	r0, #18
 8000a4a:	f001 fc64 	bl	8002316 <HAL_NVIC_EnableIRQ>
}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000260 	.word	0x20000260
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	50000100 	.word	0x50000100

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	@ 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a2f      	ldr	r2, [pc, #188]	@ (8000b40 <HAL_UART_MspInit+0xdc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d128      	bne.n	8000ad8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a86:	4b2f      	ldr	r3, [pc, #188]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6193      	str	r3, [r2, #24]
 8000a92:	4b2c      	ldr	r3, [pc, #176]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a28      	ldr	r2, [pc, #160]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ab6:	23c0      	movs	r3, #192	@ 0xc0
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481d      	ldr	r0, [pc, #116]	@ (8000b48 <HAL_UART_MspInit+0xe4>)
 8000ad2:	f001 fc3b 	bl	800234c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad6:	e02e      	b.n	8000b36 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <HAL_UART_MspInit+0xe8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d129      	bne.n	8000b36 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a11      	ldr	r2, [pc, #68]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_UART_MspInit+0xe0>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b12:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b24:	2307      	movs	r3, #7
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f001 fc0b 	bl	800234c <HAL_GPIO_Init>
}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	@ 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40013800 	.word	0x40013800
 8000b44:	40021000 	.word	0x40021000
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	40004400 	.word	0x40004400

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f8c9 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <ADC1_2_IRQHandler+0x14>)
 8000bb6:	f000 fc47 	bl	8001448 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000bba:	4803      	ldr	r0, [pc, #12]	@ (8000bc8 <ADC1_2_IRQHandler+0x18>)
 8000bbc:	f000 fc44 	bl	8001448 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000007c 	.word	0x2000007c
 8000bc8:	200000cc 	.word	0x200000cc

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	@ (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f003 fd06 	bl	800460c <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20003000 	.word	0x20003000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000264 	.word	0x20000264
 8000c34:	200003b8 	.word	0x200003b8

08000c38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	@ (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c60:	f7ff ffea 	bl	8000c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f003 fcc5 	bl	8004618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8e:	f7ff fb6b 	bl	8000368 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c94:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ca0:	08004f98 	.word	0x08004f98
  ldr r2, =_sbss
 8000ca4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ca8:	200003b4 	.word	0x200003b4

08000cac <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <CAN_RX0_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	@ (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f001 fb01 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe18 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fb19 	bl	8002332 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d18:	f001 fae1 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000004 	.word	0x20000004
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	20000268 	.word	0x20000268

08000d64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000268 	.word	0x20000268

08000d7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09a      	sub	sp, #104	@ 0x68
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e172      	b.n	8001106 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d176      	bne.n	8000f20 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d152      	bne.n	8000ee0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fd77 	bl	8000948 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d13b      	bne.n	8000ee0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 f8f7 	bl	800205c <ADC_Disable>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e78:	f003 0310 	and.w	r3, r3, #16
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d12f      	bne.n	8000ee0 <HAL_ADC_Init+0xe0>
 8000e80:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d12b      	bne.n	8000ee0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e90:	f023 0302 	bic.w	r3, r3, #2
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000eaa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000eba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ebc:	4b94      	ldr	r3, [pc, #592]	@ (8001110 <HAL_ADC_Init+0x310>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a94      	ldr	r2, [pc, #592]	@ (8001114 <HAL_ADC_Init+0x314>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0c9a      	lsrs	r2, r3, #18
 8000ec8:	4613      	mov	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed2:	e002      	b.n	8000eda <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f9      	bne.n	8000ed4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000efc:	d110      	bne.n	8000f20 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f023 0312 	bic.w	r3, r3, #18
 8000f06:	f043 0210 	orr.w	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f040 80df 	bne.w	80010ec <HAL_ADC_Init+0x2ec>
 8000f2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 80da 	bne.w	80010ec <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f040 80d2 	bne.w	80010ec <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f50:	f043 0202 	orr.w	r2, r3, #2
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f58:	4b6f      	ldr	r3, [pc, #444]	@ (8001118 <HAL_ADC_Init+0x318>)
 8000f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f64:	d102      	bne.n	8000f6c <HAL_ADC_Init+0x16c>
 8000f66:	4b6d      	ldr	r3, [pc, #436]	@ (800111c <HAL_ADC_Init+0x31c>)
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	e002      	b.n	8000f72 <HAL_ADC_Init+0x172>
 8000f6c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f70:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0303 	and.w	r3, r3, #3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d108      	bne.n	8000f92 <HAL_ADC_Init+0x192>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x192>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_ADC_Init+0x194>
 8000f92:	2300      	movs	r3, #0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d11c      	bne.n	8000fd2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f98:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d010      	beq.n	8000fc0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d107      	bne.n	8000fba <HAL_ADC_Init+0x1ba>
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_ADC_Init+0x1ba>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_ADC_Init+0x1bc>
 8000fba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d108      	bne.n	8000fd2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fd0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e5b      	ldrb	r3, [r3, #25]
 8000fd6:	035b      	lsls	r3, r3, #13
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000fdc:	2a01      	cmp	r2, #1
 8000fde:	d002      	beq.n	8000fe6 <HAL_ADC_Init+0x1e6>
 8000fe0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fe4:	e000      	b.n	8000fe8 <HAL_ADC_Init+0x1e8>
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d11b      	bne.n	800103e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e5b      	ldrb	r3, [r3, #25]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	3b01      	subs	r3, #1
 8001014:	045a      	lsls	r2, r3, #17
 8001016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001018:	4313      	orrs	r3, r2
 800101a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800101e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001020:	e00d      	b.n	800103e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800102a:	f043 0220 	orr.w	r2, r3, #32
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001042:	2b01      	cmp	r3, #1
 8001044:	d007      	beq.n	8001056 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800104e:	4313      	orrs	r3, r2
 8001050:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001052:	4313      	orrs	r3, r2
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b00      	cmp	r3, #0
 8001062:	d114      	bne.n	800108e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	6812      	ldr	r2, [r2, #0]
 800106e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001072:	f023 0302 	bic.w	r3, r3, #2
 8001076:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7e1b      	ldrb	r3, [r3, #24]
 800107c:	039a      	lsls	r2, r3, #14
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4313      	orrs	r3, r2
 8001088:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800108a:	4313      	orrs	r3, r2
 800108c:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <HAL_ADC_Init+0x320>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800109e:	430b      	orrs	r3, r1
 80010a0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10c      	bne.n	80010c4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	f023 010f 	bic.w	r1, r3, #15
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c2:	e007      	b.n	80010d4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 020f 	bic.w	r2, r2, #15
 80010d2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f023 0303 	bic.w	r3, r3, #3
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010ea:	e00a      	b.n	8001102 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	f023 0312 	bic.w	r3, r3, #18
 80010f4:	f043 0210 	orr.w	r2, r3, #16
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001102:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001106:	4618      	mov	r0, r3
 8001108:	3768      	adds	r7, #104	@ 0x68
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000004 	.word	0x20000004
 8001114:	431bde83 	.word	0x431bde83
 8001118:	50000300 	.word	0x50000300
 800111c:	50000100 	.word	0x50000100
 8001120:	fff0c007 	.word	0xfff0c007

08001124 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 809c 	bne.w	8001278 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_ADC_Start+0x2a>
 800114a:	2302      	movs	r3, #2
 800114c:	e097      	b.n	800127e <HAL_ADC_Start+0x15a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 ff1c 	bl	8001f94 <ADC_Enable>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 8083 	bne.w	800126e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800117c:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <HAL_ADC_Start+0x164>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 031f 	and.w	r3, r3, #31
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <HAL_ADC_Start+0x6e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001190:	d115      	bne.n	80011be <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d027      	beq.n	80011fc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011bc:	e01e      	b.n	80011fc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011d2:	d004      	beq.n	80011de <HAL_ADC_Start+0xba>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <HAL_ADC_Start+0x168>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_ADC_Start+0xd8>
 80011de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001208:	d106      	bne.n	8001218 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f023 0206 	bic.w	r2, r3, #6
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44
 8001216:	e002      	b.n	800121e <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	221c      	movs	r2, #28
 800122c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_ADC_Start+0x164>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2b00      	cmp	r3, #0
 8001238:	d010      	beq.n	800125c <HAL_ADC_Start+0x138>
 800123a:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <HAL_ADC_Start+0x164>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	2b05      	cmp	r3, #5
 8001244:	d00a      	beq.n	800125c <HAL_ADC_Start+0x138>
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_ADC_Start+0x164>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	2b09      	cmp	r3, #9
 8001250:	d004      	beq.n	800125c <HAL_ADC_Start+0x138>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125a:	d10f      	bne.n	800127c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0204 	orr.w	r2, r2, #4
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e006      	b.n	800127c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001276:	e001      	b.n	800127c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001278:	2302      	movs	r3, #2
 800127a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	50000300 	.word	0x50000300
 800128c:	50000100 	.word	0x50000100

08001290 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d102      	bne.n	80012ac <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012a6:	2308      	movs	r3, #8
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e02e      	b.n	800130a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001428 <HAL_ADC_PollForConversion+0x198>)
 80012ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d112      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d11d      	bne.n	8001306 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f043 0220 	orr.w	r2, r3, #32
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e09d      	b.n	800141e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f043 0220 	orr.w	r2, r3, #32
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e08b      	b.n	800141e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001306:	230c      	movs	r3, #12
 8001308:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800130a:	4b47      	ldr	r3, [pc, #284]	@ (8001428 <HAL_ADC_PollForConversion+0x198>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	2b00      	cmp	r3, #0
 8001314:	d004      	beq.n	8001320 <HAL_ADC_PollForConversion+0x90>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800131e:	d104      	bne.n	800132a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	e003      	b.n	8001332 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800132a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001332:	f7ff fd17 	bl	8000d64 <HAL_GetTick>
 8001336:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001338:	e021      	b.n	800137e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001340:	d01d      	beq.n	800137e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d007      	beq.n	8001358 <HAL_ADC_PollForConversion+0xc8>
 8001348:	f7ff fd0c 	bl	8000d64 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d212      	bcs.n	800137e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10b      	bne.n	800137e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	f043 0204 	orr.w	r2, r3, #4
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e04f      	b.n	800141e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0d6      	beq.n	800133a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d131      	bne.n	800140a <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d12c      	bne.n	800140a <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d125      	bne.n	800140a <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d112      	bne.n	80013f2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d112      	bne.n	800140a <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f043 0201 	orr.w	r2, r3, #1
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f0:	e00b      	b.n	800140a <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f043 0220 	orr.w	r2, r3, #32
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f043 0201 	orr.w	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	50000300 	.word	0x50000300

0800142c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_ADC_IRQHandler+0x38>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001486:	2b00      	cmp	r3, #0
 8001488:	d076      	beq.n	8001578 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d071      	beq.n	8001578 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 0310 	and.w	r3, r3, #16
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80014ac:	4b82      	ldr	r3, [pc, #520]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <HAL_ADC_IRQHandler+0x92>
 80014b8:	4b7f      	ldr	r3, [pc, #508]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d00a      	beq.n	80014da <HAL_ADC_IRQHandler+0x92>
 80014c4:	4b7c      	ldr	r3, [pc, #496]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	d004      	beq.n	80014da <HAL_ADC_IRQHandler+0x92>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d8:	d104      	bne.n	80014e4 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	e003      	b.n	80014ec <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80014e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d137      	bne.n	800156a <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001500:	2b00      	cmp	r3, #0
 8001502:	d132      	bne.n	800156a <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d02d      	beq.n	800156a <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11a      	bne.n	8001552 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 020c 	bic.w	r2, r2, #12
 800152a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d112      	bne.n	800156a <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001550:	e00b      	b.n	800156a <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f043 0210 	orr.w	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fc2a 	bl	8000dc4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	220c      	movs	r2, #12
 8001576:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <HAL_ADC_IRQHandler+0x144>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 0320 	and.w	r3, r3, #32
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 80a5 	beq.w	80016e2 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 809f 	beq.w	80016e2 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015b0:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d010      	beq.n	80015de <HAL_ADC_IRQHandler+0x196>
 80015bc:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d00a      	beq.n	80015de <HAL_ADC_IRQHandler+0x196>
 80015c8:	4b3b      	ldr	r3, [pc, #236]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d004      	beq.n	80015de <HAL_ADC_IRQHandler+0x196>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015dc:	d104      	bne.n	80015e8 <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	e003      	b.n	80015f0 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015e8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d16a      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00b      	beq.n	8001620 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001612:	2b00      	cmp	r3, #0
 8001614:	d15e      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800161c:	2b00      	cmp	r3, #0
 800161e:	d159      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d054      	beq.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 031f 	and.w	r3, r3, #31
 8001632:	2b00      	cmp	r3, #0
 8001634:	d010      	beq.n	8001658 <HAL_ADC_IRQHandler+0x210>
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 031f 	and.w	r3, r3, #31
 800163e:	2b06      	cmp	r3, #6
 8001640:	d00a      	beq.n	8001658 <HAL_ADC_IRQHandler+0x210>
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_ADC_IRQHandler+0x270>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	2b07      	cmp	r3, #7
 800164c:	d004      	beq.n	8001658 <HAL_ADC_IRQHandler+0x210>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001656:	d104      	bne.n	8001662 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e003      	b.n	800166a <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001662:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d12f      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d11c      	bne.n	80016bc <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001690:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d114      	bne.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f043 0201 	orr.w	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80016b6:	e00d      	b.n	80016d4 <HAL_ADC_IRQHandler+0x28c>
 80016b8:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f043 0210 	orr.w	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8b1 	bl	800183c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2260      	movs	r2, #96	@ 0x60
 80016e0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d011      	beq.n	8001710 <HAL_ADC_IRQHandler+0x2c8>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fb68 	bl	8000dd8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d012      	beq.n	8001740 <HAL_ADC_IRQHandler+0x2f8>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001728:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f897 	bl	8001864 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800173e:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001746:	2b00      	cmp	r3, #0
 8001748:	d012      	beq.n	8001770 <HAL_ADC_IRQHandler+0x328>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00d      	beq.n	8001770 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f889 	bl	8001878 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03b      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x3aa>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	d036      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001788:	2b01      	cmp	r3, #1
 800178a:	d102      	bne.n	8001792 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 800178c:	2301      	movs	r3, #1
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	e019      	b.n	80017c6 <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001792:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <HAL_ADC_IRQHandler+0x3f0>)
 8001794:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 031f 	and.w	r3, r3, #31
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d109      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10a      	bne.n	80017c6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 80017b0:	2301      	movs	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	e007      	b.n	80017c6 <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 80017c2:	2301      	movs	r3, #1
 80017c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d10e      	bne.n	80017ea <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017dc:	f043 0202 	orr.w	r2, r3, #2
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fb01 	bl	8000dec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2210      	movs	r2, #16
 80017f0:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d018      	beq.n	800182e <HAL_ADC_IRQHandler+0x3e6>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001802:	2b00      	cmp	r3, #0
 8001804:	d013      	beq.n	800182e <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	f043 0208 	orr.w	r2, r3, #8
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001826:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f811 	bl	8001850 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	50000300 	.word	0x50000300

0800183c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800188c:	b480      	push	{r7}
 800188e:	b09b      	sub	sp, #108	@ 0x6c
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x22>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e2a1      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x566>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8285 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d81c      	bhi.n	8001908 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	461a      	mov	r2, r3
 80018e2:	231f      	movs	r3, #31
 80018e4:	4093      	lsls	r3, r2
 80018e6:	43db      	mvns	r3, r3
 80018e8:	4019      	ands	r1, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa00 f203 	lsl.w	r2, r0, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	631a      	str	r2, [r3, #48]	@ 0x30
 8001906:	e063      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b09      	cmp	r3, #9
 800190e:	d81e      	bhi.n	800194e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	3b1e      	subs	r3, #30
 8001924:	221f      	movs	r2, #31
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	4019      	ands	r1, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	3b1e      	subs	r3, #30
 8001940:	fa00 f203 	lsl.w	r2, r0, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	635a      	str	r2, [r3, #52]	@ 0x34
 800194c:	e040      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b0e      	cmp	r3, #14
 8001954:	d81e      	bhi.n	8001994 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3b3c      	subs	r3, #60	@ 0x3c
 800196a:	221f      	movs	r2, #31
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	3b3c      	subs	r3, #60	@ 0x3c
 8001986:	fa00 f203 	lsl.w	r2, r0, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	639a      	str	r2, [r3, #56]	@ 0x38
 8001992:	e01d      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3b5a      	subs	r3, #90	@ 0x5a
 80019a8:	221f      	movs	r2, #31
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4019      	ands	r1, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	3b5a      	subs	r3, #90	@ 0x5a
 80019c4:	fa00 f203 	lsl.w	r2, r0, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 80e5 	bne.w	8001baa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d91c      	bls.n	8001a22 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6999      	ldr	r1, [r3, #24]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	3b1e      	subs	r3, #30
 80019fa:	2207      	movs	r2, #7
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4019      	ands	r1, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6898      	ldr	r0, [r3, #8]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	3b1e      	subs	r3, #30
 8001a14:	fa00 f203 	lsl.w	r2, r0, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
 8001a20:	e019      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6959      	ldr	r1, [r3, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	2207      	movs	r2, #7
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4019      	ands	r1, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	6898      	ldr	r0, [r3, #8]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	08db      	lsrs	r3, r3, #3
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d84f      	bhi.n	8001b18 <HAL_ADC_ConfigChannel+0x28c>
 8001a78:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001ab3 	.word	0x08001ab3
 8001a88:	08001ad5 	.word	0x08001ad5
 8001a8c:	08001af7 	.word	0x08001af7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a96:	4b9c      	ldr	r3, [pc, #624]	@ (8001d08 <HAL_ADC_ConfigChannel+0x47c>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	0691      	lsls	r1, r2, #26
 8001aa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001aae:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ab0:	e07b      	b.n	8001baa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001ab8:	4b93      	ldr	r3, [pc, #588]	@ (8001d08 <HAL_ADC_ConfigChannel+0x47c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	0691      	lsls	r1, r2, #26
 8001ac2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ad0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad2:	e06a      	b.n	8001baa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001ada:	4b8b      	ldr	r3, [pc, #556]	@ (8001d08 <HAL_ADC_ConfigChannel+0x47c>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	0691      	lsls	r1, r2, #26
 8001ae4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001af2:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001af4:	e059      	b.n	8001baa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001afc:	4b82      	ldr	r3, [pc, #520]	@ (8001d08 <HAL_ADC_ConfigChannel+0x47c>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	0691      	lsls	r1, r2, #26
 8001b06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001b14:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b16:	e048      	b.n	8001baa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	069b      	lsls	r3, r3, #26
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b3a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	069b      	lsls	r3, r3, #26
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b5e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	069b      	lsls	r3, r3, #26
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b82:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001ba8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0303 	and.w	r3, r3, #3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d108      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x33e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x33e>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x340>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f040 810a 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d00f      	beq.n	8001bfa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43da      	mvns	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	400a      	ands	r2, r1
 8001bf4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001bf8:	e049      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2201      	movs	r2, #1
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d91c      	bls.n	8001c56 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6999      	ldr	r1, [r3, #24]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b1b      	subs	r3, #27
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6898      	ldr	r0, [r3, #8]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	3b1b      	subs	r3, #27
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	619a      	str	r2, [r3, #24]
 8001c54:	e01b      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	2207      	movs	r2, #7
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4019      	ands	r1, r3
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6898      	ldr	r0, [r3, #8]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	fa00 f203 	lsl.w	r2, r0, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <HAL_ADC_ConfigChannel+0x480>)
 8001c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d105      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d015      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001caa:	2b11      	cmp	r3, #17
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	f040 8091 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 808a 	bne.w	8001de6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cda:	d102      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x456>
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <HAL_ADC_ConfigChannel+0x484>)
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	e002      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x45c>
 8001ce2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ce6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10e      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x488>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x488>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e006      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x48a>
 8001d08:	83fff000 	.word	0x83fff000
 8001d0c:	50000300 	.word	0x50000300
 8001d10:	50000100 	.word	0x50000100
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d150      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d1a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d107      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x4b0>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x4b0>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x4b2>
 8001d3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d13c      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d11d      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x4fa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d52:	d118      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <HAL_ADC_ConfigChannel+0x574>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a27      	ldr	r2, [pc, #156]	@ (8001e04 <HAL_ADC_ConfigChannel+0x578>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9a      	lsrs	r2, r3, #18
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f9      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d84:	e02e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d10b      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x51a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d96:	d106      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001da2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da4:	e01e      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d11a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001db8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dba:	e013      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0220 	orr.w	r2, r3, #32
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001dce:	e00a      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001de2:	e000      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	376c      	adds	r7, #108	@ 0x6c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000004 	.word	0x20000004
 8001e04:	431bde83 	.word	0x431bde83

08001e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b099      	sub	sp, #100	@ 0x64
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e20:	d102      	bne.n	8001e28 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e22:	4b5a      	ldr	r3, [pc, #360]	@ (8001f8c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	e002      	b.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e2c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0a2      	b.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e09b      	b.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d17f      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d179      	bne.n	8001f5c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e68:	4b49      	ldr	r3, [pc, #292]	@ (8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d040      	beq.n	8001ef6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6859      	ldr	r1, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e86:	035b      	lsls	r3, r3, #13
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d108      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d15c      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001ed2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d14b      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ee0:	f023 030f 	bic.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	6811      	ldr	r1, [r2, #0]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	6892      	ldr	r2, [r2, #8]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef4:	e03c      	b.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d123      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d107      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d112      	bne.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f5a:	e009      	b.n	8001f70 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001f6e:	e000      	b.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3764      	adds	r7, #100	@ 0x64
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	50000100 	.word	0x50000100
 8001f90:	50000300 	.word	0x50000300

08001f94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d108      	bne.n	8001fc0 <ADC_Enable+0x2c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d101      	bne.n	8001fc0 <ADC_Enable+0x2c>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <ADC_Enable+0x2e>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d143      	bne.n	800204e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <ADC_Enable+0xc4>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e02f      	b.n	8002050 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002000:	f7fe feb0 	bl	8000d64 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002006:	e01b      	b.n	8002040 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002008:	f7fe feac 	bl	8000d64 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d914      	bls.n	8002040 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d00d      	beq.n	8002040 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0210 	orr.w	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e007      	b.n	8002050 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b01      	cmp	r3, #1
 800204c:	d1dc      	bne.n	8002008 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	8000003f 	.word	0x8000003f

0800205c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <ADC_Disable+0x2c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <ADC_Disable+0x2c>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <ADC_Disable+0x2e>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d047      	beq.n	800211e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 030d 	and.w	r3, r3, #13
 8002098:	2b01      	cmp	r3, #1
 800209a:	d10f      	bne.n	80020bc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0202 	orr.w	r2, r2, #2
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2203      	movs	r2, #3
 80020b2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fe56 	bl	8000d64 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020ba:	e029      	b.n	8002110 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f043 0210 	orr.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	f043 0201 	orr.w	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e023      	b.n	8002120 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020d8:	f7fe fe44 	bl	8000d64 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d914      	bls.n	8002110 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10d      	bne.n	8002110 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f8:	f043 0210 	orr.w	r2, r3, #16
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e007      	b.n	8002120 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d0dc      	beq.n	80020d8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215a:	4a04      	ldr	r2, [pc, #16]	@ (800216c <__NVIC_SetPriorityGrouping+0x44>)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	60d3      	str	r3, [r2, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002174:	4b04      	ldr	r3, [pc, #16]	@ (8002188 <__NVIC_GetPriorityGrouping+0x18>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	f003 0307 	and.w	r3, r3, #7
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	db0b      	blt.n	80021b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4907      	ldr	r1, [pc, #28]	@ (80021c4 <__NVIC_EnableIRQ+0x38>)
 80021a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	2001      	movs	r0, #1
 80021ae:	fa00 f202 	lsl.w	r2, r0, r2
 80021b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	@ (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	@ (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	@ 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff29 	bl	8002128 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff3e 	bl	8002170 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff31 	bl	800218c <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa2 	bl	8002284 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	e14e      	b.n	80025fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8140 	beq.w	80025f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d005      	beq.n	800238c <HAL_GPIO_Init+0x40>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d130      	bne.n	80023ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c2:	2201      	movs	r2, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0201 	and.w	r2, r3, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d017      	beq.n	800242a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d123      	bne.n	800247e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 809a 	beq.w	80025f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c0:	4b55      	ldr	r3, [pc, #340]	@ (8002618 <HAL_GPIO_Init+0x2cc>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a54      	ldr	r2, [pc, #336]	@ (8002618 <HAL_GPIO_Init+0x2cc>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b52      	ldr	r3, [pc, #328]	@ (8002618 <HAL_GPIO_Init+0x2cc>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024d8:	4a50      	ldr	r2, [pc, #320]	@ (800261c <HAL_GPIO_Init+0x2d0>)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	220f      	movs	r2, #15
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002502:	d013      	beq.n	800252c <HAL_GPIO_Init+0x1e0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <HAL_GPIO_Init+0x2d4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00d      	beq.n	8002528 <HAL_GPIO_Init+0x1dc>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a45      	ldr	r2, [pc, #276]	@ (8002624 <HAL_GPIO_Init+0x2d8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d007      	beq.n	8002524 <HAL_GPIO_Init+0x1d8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a44      	ldr	r2, [pc, #272]	@ (8002628 <HAL_GPIO_Init+0x2dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_GPIO_Init+0x1d4>
 800251c:	2303      	movs	r3, #3
 800251e:	e006      	b.n	800252e <HAL_GPIO_Init+0x1e2>
 8002520:	2305      	movs	r3, #5
 8002522:	e004      	b.n	800252e <HAL_GPIO_Init+0x1e2>
 8002524:	2302      	movs	r3, #2
 8002526:	e002      	b.n	800252e <HAL_GPIO_Init+0x1e2>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_GPIO_Init+0x1e2>
 800252c:	2300      	movs	r3, #0
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	f002 0203 	and.w	r2, r2, #3
 8002534:	0092      	lsls	r2, r2, #2
 8002536:	4093      	lsls	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253e:	4937      	ldr	r1, [pc, #220]	@ (800261c <HAL_GPIO_Init+0x2d0>)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254c:	4b37      	ldr	r3, [pc, #220]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002570:	4a2e      	ldr	r2, [pc, #184]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002576:	4b2d      	ldr	r3, [pc, #180]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800259a:	4a24      	ldr	r2, [pc, #144]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ca:	4b18      	ldr	r3, [pc, #96]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025ee:	4a0f      	ldr	r2, [pc, #60]	@ (800262c <HAL_GPIO_Init+0x2e0>)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3301      	adds	r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	f47f aea9 	bne.w	800235c <HAL_GPIO_Init+0x10>
  }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40021000 	.word	0x40021000
 800261c:	40010000 	.word	0x40010000
 8002620:	48000400 	.word	0x48000400
 8002624:	48000800 	.word	0x48000800
 8002628:	48000c00 	.word	0x48000c00
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264c:	e002      	b.n	8002654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002666:	af00      	add	r7, sp, #0
 8002668:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002670:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	f001 b823 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 817d 	beq.w	8002996 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800269c:	4bbc      	ldr	r3, [pc, #752]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 030c 	and.w	r3, r3, #12
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d00c      	beq.n	80026c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d15c      	bne.n	800276e <HAL_RCC_OscConfig+0x10e>
 80026b4:	4bb6      	ldr	r3, [pc, #728]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c0:	d155      	bne.n	800276e <HAL_RCC_OscConfig+0x10e>
 80026c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_RCC_OscConfig+0x94>
 80026ee:	4ba8      	ldr	r3, [pc, #672]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	e015      	b.n	8002720 <HAL_RCC_OscConfig+0xc0>
 80026f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026f8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002700:	fa93 f3a3 	rbit	r3, r3
 8002704:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002710:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002714:	fa93 f3a3 	rbit	r3, r3
 8002718:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800271c:	4b9c      	ldr	r3, [pc, #624]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002724:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002728:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800272c:	fa92 f2a2 	rbit	r2, r2
 8002730:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002734:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f002 021f 	and.w	r2, r2, #31
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 811f 	beq.w	8002994 <HAL_RCC_OscConfig+0x334>
 8002756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8116 	bne.w	8002994 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f000 bfaf 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x12e>
 8002780:	4b83      	ldr	r3, [pc, #524]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a82      	ldr	r2, [pc, #520]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e036      	b.n	80027fc <HAL_RCC_OscConfig+0x19c>
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x158>
 800279e:	4b7c      	ldr	r3, [pc, #496]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7b      	ldr	r2, [pc, #492]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b79      	ldr	r3, [pc, #484]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a78      	ldr	r2, [pc, #480]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e021      	b.n	80027fc <HAL_RCC_OscConfig+0x19c>
 80027b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x184>
 80027ca:	4b71      	ldr	r3, [pc, #452]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a70      	ldr	r2, [pc, #448]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6d      	ldr	r2, [pc, #436]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x19c>
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a69      	ldr	r2, [pc, #420]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	4b67      	ldr	r3, [pc, #412]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a66      	ldr	r2, [pc, #408]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027fa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027fc:	4b64      	ldr	r3, [pc, #400]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	f023 020f 	bic.w	r2, r3, #15
 8002804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002808:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	495f      	ldr	r1, [pc, #380]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002812:	4313      	orrs	r3, r2
 8002814:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d059      	beq.n	80028da <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fa9d 	bl	8000d64 <HAL_GetTick>
 800282a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002830:	f7fe fa98 	bl	8000d64 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b64      	cmp	r3, #100	@ 0x64
 800283e:	d902      	bls.n	8002846 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	f000 bf43 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 8002846:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800285a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_RCC_OscConfig+0x218>
 8002872:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	e015      	b.n	80028a4 <HAL_RCC_OscConfig+0x244>
 8002878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800288c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002890:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002894:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80028a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 80028a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028a8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80028ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80028b8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80028bc:	fab2 f282 	clz	r2, r2
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f042 0220 	orr.w	r2, r2, #32
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ab      	beq.n	8002830 <HAL_RCC_OscConfig+0x1d0>
 80028d8:	e05d      	b.n	8002996 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fa43 	bl	8000d64 <HAL_GetTick>
 80028de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e4:	f7fe fa3e 	bl	8000d64 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	@ 0x64
 80028f2:	d902      	bls.n	80028fa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f000 bee9 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 80028fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028fe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800290e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <HAL_RCC_OscConfig+0x2cc>
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	e015      	b.n	8002958 <HAL_RCC_OscConfig+0x2f8>
 800292c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002930:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002944:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002948:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002954:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_RCC_OscConfig+0x330>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002958:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800295c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002960:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002964:	fa92 f2a2 	rbit	r2, r2
 8002968:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800296c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002970:	fab2 f282 	clz	r2, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f042 0220 	orr.w	r2, r2, #32
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	f002 021f 	and.w	r2, r2, #31
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ab      	bne.n	80028e4 <HAL_RCC_OscConfig+0x284>
 800298c:	e003      	b.n	8002996 <HAL_RCC_OscConfig+0x336>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 817d 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ac:	4ba6      	ldr	r3, [pc, #664]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029b8:	4ba3      	ldr	r3, [pc, #652]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d172      	bne.n	8002aaa <HAL_RCC_OscConfig+0x44a>
 80029c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d16c      	bne.n	8002aaa <HAL_RCC_OscConfig+0x44a>
 80029d0:	2302      	movs	r3, #2
 80029d2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80029e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	fab3 f383 	clz	r3, r3
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d102      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3a0>
 80029fa:	4b93      	ldr	r3, [pc, #588]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	e013      	b.n	8002a28 <HAL_RCC_OscConfig+0x3c8>
 8002a00:	2302      	movs	r3, #2
 8002a02:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002a12:	2302      	movs	r3, #2
 8002a14:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002a18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002a24:	4b88      	ldr	r3, [pc, #544]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002a2e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002a32:	fa92 f2a2 	rbit	r2, r2
 8002a36:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002a3a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002a3e:	fab2 f282 	clz	r2, r2
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	f042 0220 	orr.w	r2, r2, #32
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	f002 021f 	and.w	r2, r2, #31
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCC_OscConfig+0x410>
 8002a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f000 be2e 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b75      	ldr	r3, [pc, #468]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	21f8      	movs	r1, #248	@ 0xf8
 8002a86:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002a8e:	fa91 f1a1 	rbit	r1, r1
 8002a92:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002a96:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002a9a:	fab1 f181 	clz	r1, r1
 8002a9e:	b2c9      	uxtb	r1, r1
 8002aa0:	408b      	lsls	r3, r1
 8002aa2:	4969      	ldr	r1, [pc, #420]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa8:	e0fd      	b.n	8002ca6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8088 	beq.w	8002bcc <HAL_RCC_OscConfig+0x56c>
 8002abc:	2301      	movs	r3, #1
 8002abe:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002ace:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002adc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe f93c 	bl	8000d64 <HAL_GetTick>
 8002aec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af2:	f7fe f937 	bl	8000d64 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f000 bde2 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002b1a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	fab3 f383 	clz	r3, r3
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d102      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4d8>
 8002b32:	4b45      	ldr	r3, [pc, #276]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e013      	b.n	8002b60 <HAL_RCC_OscConfig+0x500>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002b42:	fa93 f3a3 	rbit	r3, r3
 8002b46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002b50:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2202      	movs	r2, #2
 8002b62:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002b66:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002b6a:	fa92 f2a2 	rbit	r2, r2
 8002b6e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002b72:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002b76:	fab2 f282 	clz	r2, r2
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	f042 0220 	orr.w	r2, r2, #32
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	f002 021f 	and.w	r2, r2, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0af      	beq.n	8002af2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b92:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	21f8      	movs	r1, #248	@ 0xf8
 8002ba8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002bb0:	fa91 f1a1 	rbit	r1, r1
 8002bb4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002bb8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002bbc:	fab1 f181 	clz	r1, r1
 8002bc0:	b2c9      	uxtb	r1, r1
 8002bc2:	408b      	lsls	r3, r1
 8002bc4:	4920      	ldr	r1, [pc, #128]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
 8002bca:	e06c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x646>
 8002bcc:	2301      	movs	r3, #1
 8002bce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002bde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe f8b4 	bl	8000d64 <HAL_GetTick>
 8002bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe f8af 	bl	8000d64 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d902      	bls.n	8002c18 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	f000 bd5a 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d104      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5ec>
 8002c42:	4b01      	ldr	r3, [pc, #4]	@ (8002c48 <HAL_RCC_OscConfig+0x5e8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x614>
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002c5e:	2302      	movs	r3, #2
 8002c60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002c64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002c70:	4bc8      	ldr	r3, [pc, #800]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	2202      	movs	r2, #2
 8002c76:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002c7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002c7e:	fa92 f2a2 	rbit	r2, r2
 8002c82:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002c86:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ad      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 8110 	beq.w	8002edc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d079      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x760>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4bab      	ldr	r3, [pc, #684]	@ (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf6:	f7fe f835 	bl	8000d64 <HAL_GetTick>
 8002cfa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d00:	f7fe f830 	bl	8000d64 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	f000 bcdb 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 8002d16:	2302      	movs	r3, #2
 8002d18:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d30:	2202      	movs	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d54:	2202      	movs	r2, #2
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	fa93 f2a3 	rbit	r2, r3
 8002d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d70:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002d72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	6019      	str	r1, [r3, #0]
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	fa93 f1a3 	rbit	r1, r3
 8002d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d96:	6019      	str	r1, [r3, #0]
  return result;
 8002d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0a0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x6a0>
 8002dbe:	e08d      	b.n	8002edc <HAL_RCC_OscConfig+0x87c>
 8002dc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002de2:	601a      	str	r2, [r3, #0]
  return result;
 8002de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002dec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <HAL_RCC_OscConfig+0x938>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e02:	f7fd ffaf 	bl	8000d64 <HAL_GetTick>
 8002e06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fd ffaa 	bl	8000d64 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d902      	bls.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	f000 bc55 	b.w	80036cc <HAL_RCC_OscConfig+0x106c>
 8002e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e40:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e4e:	2202      	movs	r2, #2
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8e:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	6019      	str	r1, [r3, #0]
 8002e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	fa93 f1a3 	rbit	r1, r3
 8002eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eb4:	6019      	str	r1, [r3, #0]
  return result;
 8002eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d197      	bne.n	8002e0c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 81a1 	beq.w	8003234 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef8:	4b26      	ldr	r3, [pc, #152]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d116      	bne.n	8002f32 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f04:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	61d3      	str	r3, [r2, #28]
 8002f10:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002f2a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b1a      	ldr	r3, [pc, #104]	@ (8002f9c <HAL_RCC_OscConfig+0x93c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11a      	bne.n	8002f74 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b17      	ldr	r3, [pc, #92]	@ (8002f9c <HAL_RCC_OscConfig+0x93c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	@ (8002f9c <HAL_RCC_OscConfig+0x93c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fd ff0b 	bl	8000d64 <HAL_GetTick>
 8002f4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	e009      	b.n	8002f68 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fd ff06 	bl	8000d64 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b64      	cmp	r3, #100	@ 0x64
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e3b1      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f68:	4b0c      	ldr	r3, [pc, #48]	@ (8002f9c <HAL_RCC_OscConfig+0x93c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x940>
 8002f84:	4b03      	ldr	r3, [pc, #12]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a02      	ldr	r2, [pc, #8]	@ (8002f94 <HAL_RCC_OscConfig+0x934>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6213      	str	r3, [r2, #32]
 8002f90:	e03c      	b.n	800300c <HAL_RCC_OscConfig+0x9ac>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	10908120 	.word	0x10908120
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10c      	bne.n	8002fca <HAL_RCC_OscConfig+0x96a>
 8002fb0:	4bc1      	ldr	r3, [pc, #772]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4ac0      	ldr	r2, [pc, #768]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	4bbe      	ldr	r3, [pc, #760]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4abd      	ldr	r2, [pc, #756]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6213      	str	r3, [r2, #32]
 8002fc8:	e020      	b.n	800300c <HAL_RCC_OscConfig+0x9ac>
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b05      	cmp	r3, #5
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x994>
 8002fda:	4bb7      	ldr	r3, [pc, #732]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	4ab6      	ldr	r2, [pc, #728]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	6213      	str	r3, [r2, #32]
 8002fe6:	4bb4      	ldr	r3, [pc, #720]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	4ab3      	ldr	r2, [pc, #716]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6213      	str	r3, [r2, #32]
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0x9ac>
 8002ff4:	4bb0      	ldr	r3, [pc, #704]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4aaf      	ldr	r2, [pc, #700]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6213      	str	r3, [r2, #32]
 8003000:	4bad      	ldr	r3, [pc, #692]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4aac      	ldr	r2, [pc, #688]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8003006:	f023 0304 	bic.w	r3, r3, #4
 800300a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8081 	beq.w	8003120 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd fea1 	bl	8000d64 <HAL_GetTick>
 8003022:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fd fe9c 	bl	8000d64 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e345      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003048:	2202      	movs	r2, #2
 800304a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003050:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	fa93 f2a3 	rbit	r2, r3
 800305a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003068:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800306c:	2202      	movs	r2, #2
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003074:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	fa93 f2a3 	rbit	r2, r3
 800307e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003082:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003086:	601a      	str	r2, [r3, #0]
  return result;
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003090:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d102      	bne.n	80030ac <HAL_RCC_OscConfig+0xa4c>
 80030a6:	4b84      	ldr	r3, [pc, #528]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	e013      	b.n	80030d4 <HAL_RCC_OscConfig+0xa74>
 80030ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b79      	ldr	r3, [pc, #484]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030dc:	2102      	movs	r1, #2
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	fa92 f1a2 	rbit	r1, r2
 80030ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80030f6:	6011      	str	r1, [r2, #0]
  return result;
 80030f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	fab2 f282 	clz	r2, r2
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	f002 021f 	and.w	r2, r2, #31
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d084      	beq.n	8003028 <HAL_RCC_OscConfig+0x9c8>
 800311e:	e07f      	b.n	8003220 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fd fe20 	bl	8000d64 <HAL_GetTick>
 8003124:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003128:	e00b      	b.n	8003142 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fd fe1b 	bl	8000d64 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e2c4      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800314a:	2202      	movs	r2, #2
 800314c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f2a3 	rbit	r2, r3
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800316e:	2202      	movs	r2, #2
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	fa93 f2a3 	rbit	r2, r3
 8003180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003184:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003188:	601a      	str	r2, [r3, #0]
  return result;
 800318a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800318e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003192:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0xb4e>
 80031a8:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	e013      	b.n	80031d6 <HAL_RCC_OscConfig+0xb76>
 80031ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	4b39      	ldr	r3, [pc, #228]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031de:	2102      	movs	r1, #2
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	fa92 f1a2 	rbit	r1, r2
 80031f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80031f8:	6011      	str	r1, [r2, #0]
  return result;
 80031fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	fab2 f282 	clz	r2, r2
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f002 021f 	and.w	r2, r2, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d184      	bne.n	800312a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003220:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	4a22      	ldr	r2, [pc, #136]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003232:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8242 	beq.w	80036ca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <HAL_RCC_OscConfig+0xc58>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b08      	cmp	r3, #8
 8003250:	f000 8213 	beq.w	800367a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	2b02      	cmp	r3, #2
 8003262:	f040 8162 	bne.w	800352a <HAL_RCC_OscConfig+0xeca>
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800326e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003286:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800328a:	601a      	str	r2, [r3, #0]
  return result;
 800328c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003290:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003294:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	461a      	mov	r2, r3
 80032a8:	2300      	movs	r3, #0
 80032aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7fd fd5a 	bl	8000d64 <HAL_GetTick>
 80032b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b4:	e00c      	b.n	80032d0 <HAL_RCC_OscConfig+0xc70>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fd fd52 	bl	8000d64 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1fd      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
 80032d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fa93 f2a3 	rbit	r2, r3
 80032ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032f4:	601a      	str	r2, [r3, #0]
  return result;
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80032fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	b2db      	uxtb	r3, r3
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d102      	bne.n	800331a <HAL_RCC_OscConfig+0xcba>
 8003314:	4bb0      	ldr	r3, [pc, #704]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	e027      	b.n	800336a <HAL_RCC_OscConfig+0xd0a>
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	fa93 f2a3 	rbit	r2, r3
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	4b9c      	ldr	r3, [pc, #624]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800336e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003372:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003376:	6011      	str	r1, [r2, #0]
 8003378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800337c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	fa92 f1a2 	rbit	r1, r2
 8003386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800338a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800338e:	6011      	str	r1, [r2, #0]
  return result;
 8003390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003394:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	fab2 f282 	clz	r2, r2
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	f002 021f 	and.w	r2, r2, #31
 80033aa:	2101      	movs	r1, #1
 80033ac:	fa01 f202 	lsl.w	r2, r1, r2
 80033b0:	4013      	ands	r3, r2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d182      	bne.n	80032bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b6:	4b88      	ldr	r3, [pc, #544]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80033be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80033ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	430b      	orrs	r3, r1
 80033d8:	497f      	ldr	r1, [pc, #508]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	604b      	str	r3, [r1, #4]
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003402:	601a      	str	r2, [r3, #0]
  return result;
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800340c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003418:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2301      	movs	r3, #1
 8003422:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fc9e 	bl	8000d64 <HAL_GetTick>
 8003428:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fc99 	bl	8000d64 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e144      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800344a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d102      	bne.n	800348c <HAL_RCC_OscConfig+0xe2c>
 8003486:	4b54      	ldr	r3, [pc, #336]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	e027      	b.n	80034dc <HAL_RCC_OscConfig+0xe7c>
 800348c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003490:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003494:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800349e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80034ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	4b3f      	ldr	r3, [pc, #252]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034e0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034e4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034e8:	6011      	str	r1, [r2, #0]
 80034ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034ee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	fa92 f1a2 	rbit	r1, r2
 80034f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034fc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003500:	6011      	str	r1, [r2, #0]
  return result;
 8003502:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003506:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	fab2 f282 	clz	r2, r2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f042 0220 	orr.w	r2, r2, #32
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f002 021f 	and.w	r2, r2, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f202 	lsl.w	r2, r1, r2
 8003522:	4013      	ands	r3, r2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d082      	beq.n	800342e <HAL_RCC_OscConfig+0xdce>
 8003528:	e0cf      	b.n	80036ca <HAL_RCC_OscConfig+0x106a>
 800352a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003532:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	fa93 f2a3 	rbit	r2, r3
 8003546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800354e:	601a      	str	r2, [r3, #0]
  return result;
 8003550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003554:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003558:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003564:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	461a      	mov	r2, r3
 800356c:	2300      	movs	r3, #0
 800356e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fd fbf8 	bl	8000d64 <HAL_GetTick>
 8003574:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003578:	e009      	b.n	800358e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357a:	f7fd fbf3 	bl	8000d64 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e09e      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003596:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800359a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035b2:	601a      	str	r2, [r3, #0]
  return result;
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80035bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035be:	fab3 f383 	clz	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0301 	orr.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d104      	bne.n	80035dc <HAL_RCC_OscConfig+0xf7c>
 80035d2:	4b01      	ldr	r3, [pc, #4]	@ (80035d8 <HAL_RCC_OscConfig+0xf78>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e029      	b.n	800362c <HAL_RCC_OscConfig+0xfcc>
 80035d8:	40021000 	.word	0x40021000
 80035dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	fa93 f2a3 	rbit	r2, r3
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003606:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800360a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	4b2b      	ldr	r3, [pc, #172]	@ (80036d8 <HAL_RCC_OscConfig+0x1078>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003630:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003634:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800363e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	fa92 f1a2 	rbit	r1, r2
 8003648:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800364c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003650:	6011      	str	r1, [r2, #0]
  return result;
 8003652:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003656:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	fab2 f282 	clz	r2, r2
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f042 0220 	orr.w	r2, r2, #32
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f002 021f 	and.w	r2, r2, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d180      	bne.n	800357a <HAL_RCC_OscConfig+0xf1a>
 8003678:	e027      	b.n	80036ca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e01e      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_RCC_OscConfig+0x1078>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003696:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800369a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d10b      	bne.n	80036c6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40021000 	.word	0x40021000

080036dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b09e      	sub	sp, #120	@ 0x78
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e162      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b90      	ldr	r3, [pc, #576]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b8d      	ldr	r3, [pc, #564]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	498b      	ldr	r1, [pc, #556]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b89      	ldr	r3, [pc, #548]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e14a      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b82      	ldr	r3, [pc, #520]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	497f      	ldr	r1, [pc, #508]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80dc 	beq.w	8003908 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d13c      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xf6>
 8003758:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800375c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003768:	fab3 f383 	clz	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	d102      	bne.n	8003782 <HAL_RCC_ClockConfig+0xa6>
 800377c:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e00f      	b.n	80037a2 <HAL_RCC_ClockConfig+0xc6>
 8003782:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003786:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800378a:	fa93 f3a3 	rbit	r3, r3
 800378e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003790:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003794:	663b      	str	r3, [r7, #96]	@ 0x60
 8003796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003798:	fa93 f3a3 	rbit	r3, r3
 800379c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800379e:	4b67      	ldr	r3, [pc, #412]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80037a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037aa:	fa92 f2a2 	rbit	r2, r2
 80037ae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80037b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d17b      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0f3      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d13c      	bne.n	8003854 <HAL_RCC_ClockConfig+0x178>
 80037da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037e2:	fa93 f3a3 	rbit	r3, r3
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80037e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_ClockConfig+0x128>
 80037fe:	4b4f      	ldr	r3, [pc, #316]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	e00f      	b.n	8003824 <HAL_RCC_ClockConfig+0x148>
 8003804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003808:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	647b      	str	r3, [r7, #68]	@ 0x44
 8003812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003816:	643b      	str	r3, [r7, #64]	@ 0x40
 8003818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800381a:	fa93 f3a3 	rbit	r3, r3
 800381e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003820:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003828:	63ba      	str	r2, [r7, #56]	@ 0x38
 800382a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800382c:	fa92 f2a2 	rbit	r2, r2
 8003830:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003832:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003834:	fab2 f282 	clz	r2, r2
 8003838:	b2d2      	uxtb	r2, r2
 800383a:	f042 0220 	orr.w	r2, r2, #32
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f002 021f 	and.w	r2, r2, #31
 8003844:	2101      	movs	r1, #1
 8003846:	fa01 f202 	lsl.w	r2, r1, r2
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d13a      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e0b2      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
 8003854:	2302      	movs	r3, #2
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	fa93 f3a3 	rbit	r3, r3
 800385e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d102      	bne.n	800387c <HAL_RCC_ClockConfig+0x1a0>
 8003876:	4b31      	ldr	r3, [pc, #196]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	e00d      	b.n	8003898 <HAL_RCC_ClockConfig+0x1bc>
 800387c:	2302      	movs	r3, #2
 800387e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
 8003888:	2302      	movs	r3, #2
 800388a:	623b      	str	r3, [r7, #32]
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	4b29      	ldr	r3, [pc, #164]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	2202      	movs	r2, #2
 800389a:	61ba      	str	r2, [r7, #24]
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	fa92 f2a2 	rbit	r2, r2
 80038a2:	617a      	str	r2, [r7, #20]
  return result;
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f002 021f 	and.w	r2, r2, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e079      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	491a      	ldr	r1, [pc, #104]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d8:	f7fd fa44 	bl	8000d64 <HAL_GetTick>
 80038dc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fd fa40 	bl	8000d64 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e061      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_ClockConfig+0x260>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d214      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 0207 	bic.w	r2, r3, #7
 800391e:	4906      	ldr	r1, [pc, #24]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003926:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <HAL_RCC_ClockConfig+0x25c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e040      	b.n	80039ba <HAL_RCC_ClockConfig+0x2de>
 8003938:	40022000 	.word	0x40022000
 800393c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b1d      	ldr	r3, [pc, #116]	@ (80039c4 <HAL_RCC_ClockConfig+0x2e8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	491a      	ldr	r1, [pc, #104]	@ (80039c4 <HAL_RCC_ClockConfig+0x2e8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b16      	ldr	r3, [pc, #88]	@ (80039c4 <HAL_RCC_ClockConfig+0x2e8>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4912      	ldr	r1, [pc, #72]	@ (80039c4 <HAL_RCC_ClockConfig+0x2e8>)
 800397a:	4313      	orrs	r3, r2
 800397c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800397e:	f000 f829 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003982:	4601      	mov	r1, r0
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <HAL_RCC_ClockConfig+0x2e8>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800398c:	22f0      	movs	r2, #240	@ 0xf0
 800398e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	fa92 f2a2 	rbit	r2, r2
 8003996:	60fa      	str	r2, [r7, #12]
  return result;
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	fab2 f282 	clz	r2, r2
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	40d3      	lsrs	r3, r2
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <HAL_RCC_ClockConfig+0x2ec>)
 80039a4:	5cd3      	ldrb	r3, [r2, r3]
 80039a6:	fa21 f303 	lsr.w	r3, r1, r3
 80039aa:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <HAL_RCC_ClockConfig+0x2f0>)
 80039ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039ae:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <HAL_RCC_ClockConfig+0x2f4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd f992 	bl	8000cdc <HAL_InitTick>
  
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3778      	adds	r7, #120	@ 0x78
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08004f1c 	.word	0x08004f1c
 80039cc:	20000004 	.word	0x20000004
 80039d0:	20000008 	.word	0x20000008

080039d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80039ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d002      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x30>
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_GetSysClockFreq+0x36>
 8003a02:	e026      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a06:	613b      	str	r3, [r7, #16]
      break;
 8003a08:	e026      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	0c9b      	lsrs	r3, r3, #18
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a17      	ldr	r2, [pc, #92]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003a18:	4b13      	ldr	r3, [pc, #76]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003a30:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	e004      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a0c      	ldr	r2, [pc, #48]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
      break;
 8003a50:	e002      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a54:	613b      	str	r3, [r7, #16]
      break;
 8003a56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a58:	693b      	ldr	r3, [r7, #16]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	007a1200 	.word	0x007a1200
 8003a70:	08004f34 	.word	0x08004f34
 8003a74:	08004f44 	.word	0x08004f44
 8003a78:	003d0900 	.word	0x003d0900

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003a9a:	f7ff ffef 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003aa8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003aac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	fa92 f2a2 	rbit	r2, r2
 8003ab4:	603a      	str	r2, [r7, #0]
  return result;
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	fab2 f282 	clz	r2, r2
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	40d3      	lsrs	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	@ (8003ad4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08004f2c 	.word	0x08004f2c

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003ade:	f7ff ffcd 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003aec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003af0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	fa92 f2a2 	rbit	r2, r2
 8003af8:	603a      	str	r2, [r7, #0]
  return result;
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	40d3      	lsrs	r3, r2
 8003b04:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08004f2c 	.word	0x08004f2c

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b092      	sub	sp, #72	@ 0x48
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80cd 	beq.w	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b40:	4b86      	ldr	r3, [pc, #536]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b42:	69db      	ldr	r3, [r3, #28]
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10e      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b4c:	4b83      	ldr	r3, [pc, #524]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a82      	ldr	r2, [pc, #520]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b80      	ldr	r3, [pc, #512]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d118      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b76:	4b7a      	ldr	r3, [pc, #488]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a79      	ldr	r2, [pc, #484]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b80:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b82:	f7fd f8ef 	bl	8000d64 <HAL_GetTick>
 8003b86:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b88:	e008      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8a:	f7fd f8eb 	bl	8000d64 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	@ 0x64
 8003b96:	d901      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0db      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9c:	4b70      	ldr	r3, [pc, #448]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f0      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d07d      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d076      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc6:	4b65      	ldr	r3, [pc, #404]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bd4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b55      	ldr	r3, [pc, #340]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	461a      	mov	r2, r3
 8003c14:	2300      	movs	r3, #0
 8003c16:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c18:	4a50      	ldr	r2, [pc, #320]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d045      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fd f89c 	bl	8000d64 <HAL_GetTick>
 8003c2c:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fd f898 	bl	8000d64 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e086      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c46:	2302      	movs	r3, #2
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c52:	2302      	movs	r3, #2
 8003c54:	623b      	str	r3, [r7, #32]
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	61fb      	str	r3, [r7, #28]
  return result;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	fab3 f383 	clz	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	f043 0302 	orr.w	r3, r3, #2
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d102      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c74:	4b39      	ldr	r3, [pc, #228]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	e007      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fa93 f3a3 	rbit	r3, r3
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	4b35      	ldr	r3, [pc, #212]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	613a      	str	r2, [r7, #16]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	fa92 f2a2 	rbit	r2, r2
 8003c94:	60fa      	str	r2, [r7, #12]
  return result;
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	fab2 f282 	clz	r2, r2
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f002 021f 	and.w	r2, r2, #31
 8003ca8:	2101      	movs	r1, #1
 8003caa:	fa01 f202 	lsl.w	r2, r1, r2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0bd      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cb4:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4926      	ldr	r1, [pc, #152]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4b23      	ldr	r3, [pc, #140]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	491a      	ldr	r1, [pc, #104]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d04:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d08:	f023 0210 	bic.w	r2, r3, #16
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4912      	ldr	r1, [pc, #72]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d22:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d26:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	490b      	ldr	r1, [pc, #44]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d40:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3748      	adds	r7, #72	@ 0x48
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	40007000 	.word	0x40007000
 8003d64:	10908100 	.word	0x10908100

08003d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e040      	b.n	8003dfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc fe6a 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2224      	movs	r2, #36	@ 0x24
 8003d94:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0201 	bic.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f9e8 	bl	8004184 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f8af 	bl	8003f18 <UART_SetConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e01b      	b.n	8003dfc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003de2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fa67 	bl	80042c8 <UART_CheckIdleState>
 8003dfa:	4603      	mov	r3, r0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	@ 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d177      	bne.n	8003f0c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Transmit+0x24>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e070      	b.n	8003f0e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2221      	movs	r2, #33	@ 0x21
 8003e38:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3a:	f7fc ff93 	bl	8000d64 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x68>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e74:	e02f      	b.n	8003ed6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	@ 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fac9 	bl	8004418 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d004      	beq.n	8003e96 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e03b      	b.n	8003f0e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	881a      	ldrh	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	3302      	adds	r3, #2
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e007      	b.n	8003ec4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1c9      	bne.n	8003e76 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2140      	movs	r1, #64	@ 0x40
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fa93 	bl	8004418 <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e005      	b.n	8003f0e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e000      	b.n	8003f0e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f0c:	2302      	movs	r3, #2
  }
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b8a      	ldr	r3, [pc, #552]	@ (800416c <UART_SetConfig+0x254>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	6979      	ldr	r1, [r7, #20]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a78      	ldr	r2, [pc, #480]	@ (8004170 <UART_SetConfig+0x258>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d120      	bne.n	8003fd6 <UART_SetConfig+0xbe>
 8003f94:	4b77      	ldr	r3, [pc, #476]	@ (8004174 <UART_SetConfig+0x25c>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d817      	bhi.n	8003fd0 <UART_SetConfig+0xb8>
 8003fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <UART_SetConfig+0x90>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc5 	.word	0x08003fc5
 8003fb0:	08003fcb 	.word	0x08003fcb
 8003fb4:	08003fbf 	.word	0x08003fbf
 8003fb8:	2300      	movs	r3, #0
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e01d      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e01a      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e017      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fca:	2308      	movs	r3, #8
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e014      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e011      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a67      	ldr	r2, [pc, #412]	@ (8004178 <UART_SetConfig+0x260>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d102      	bne.n	8003fe6 <UART_SetConfig+0xce>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e009      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a64      	ldr	r2, [pc, #400]	@ (800417c <UART_SetConfig+0x264>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d102      	bne.n	8003ff6 <UART_SetConfig+0xde>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e001      	b.n	8003ffa <UART_SetConfig+0xe2>
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004002:	d15a      	bne.n	80040ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	2b08      	cmp	r3, #8
 8004008:	d827      	bhi.n	800405a <UART_SetConfig+0x142>
 800400a:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <UART_SetConfig+0xf8>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7ff fd2e 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e013      	b.n	8004064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7ff fd4c 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8004040:	61b8      	str	r0, [r7, #24]
        break;
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b4e      	ldr	r3, [pc, #312]	@ (8004180 <UART_SetConfig+0x268>)
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e00c      	b.n	8004064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7ff fcc3 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800404e:	61b8      	str	r0, [r7, #24]
        break;
 8004050:	e008      	b.n	8004064 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e004      	b.n	8004064 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77bb      	strb	r3, [r7, #30]
        break;
 8004062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d074      	beq.n	8004154 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	005a      	lsls	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	441a      	add	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d916      	bls.n	80040b4 <UART_SetConfig+0x19c>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d212      	bcs.n	80040b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f023 030f 	bic.w	r3, r3, #15
 8004096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	b29b      	uxth	r3, r3
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	89fa      	ldrh	r2, [r7, #14]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e04f      	b.n	8004154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77bb      	strb	r3, [r7, #30]
 80040b8:	e04c      	b.n	8004154 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d828      	bhi.n	8004112 <UART_SetConfig+0x1fa>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <UART_SetConfig+0x1b0>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	08004113 	.word	0x08004113
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004113 	.word	0x08004113
 80040e0:	08004113 	.word	0x08004113
 80040e4:	08004113 	.word	0x08004113
 80040e8:	0800410b 	.word	0x0800410b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7ff fcd2 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e013      	b.n	800411c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff fcf0 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 80040f8:	61b8      	str	r0, [r7, #24]
        break;
 80040fa:	e00f      	b.n	800411c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040fc:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <UART_SetConfig+0x268>)
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e00c      	b.n	800411c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004102:	f7ff fc67 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8004106:	61b8      	str	r0, [r7, #24]
        break;
 8004108:	e008      	b.n	800411c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e004      	b.n	800411c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	77bb      	strb	r3, [r7, #30]
        break;
 800411a:	bf00      	nop
    }

    if (pclk != 0U)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085a      	lsrs	r2, r3, #1
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d909      	bls.n	8004150 <UART_SetConfig+0x238>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004142:	d205      	bcs.n	8004150 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e001      	b.n	8004154 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004160:	7fbb      	ldrb	r3, [r7, #30]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	efff69f3 	.word	0xefff69f3
 8004170:	40013800 	.word	0x40013800
 8004174:	40021000 	.word	0x40021000
 8004178:	40004400 	.word	0x40004400
 800417c:	40004800 	.word	0x40004800
 8004180:	007a1200 	.word	0x007a1200

08004184 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01a      	beq.n	800429a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004282:	d10a      	bne.n	800429a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	605a      	str	r2, [r3, #4]
  }
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b098      	sub	sp, #96	@ 0x60
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d8:	f7fc fd44 	bl	8000d64 <HAL_GetTick>
 80042dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d12e      	bne.n	800434a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f88c 	bl	8004418 <UART_WaitOnFlagUntilTimeout>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d021      	beq.n	800434a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430e:	e853 3f00 	ldrex	r3, [r3]
 8004312:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800431a:	653b      	str	r3, [r7, #80]	@ 0x50
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
 8004326:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800432a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e6      	bne.n	8004306 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e062      	b.n	8004410 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b04      	cmp	r3, #4
 8004356:	d149      	bne.n	80043ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004358:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f856 	bl	8004418 <UART_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d03c      	beq.n	80043ec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	623b      	str	r3, [r7, #32]
   return(result);
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
 8004392:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e6      	bne.n	8004372 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043c4:	61fa      	str	r2, [r7, #28]
 80043c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	617b      	str	r3, [r7, #20]
   return(result);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e5      	bne.n	80043a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e011      	b.n	8004410 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3758      	adds	r7, #88	@ 0x58
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004428:	e04f      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004430:	d04b      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004432:	f7fc fc97 	bl	8000d64 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	429a      	cmp	r2, r3
 8004440:	d302      	bcc.n	8004448 <UART_WaitOnFlagUntilTimeout+0x30>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e04e      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	d037      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b80      	cmp	r3, #128	@ 0x80
 800445e:	d034      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b40      	cmp	r3, #64	@ 0x40
 8004464:	d031      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d110      	bne.n	8004496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2208      	movs	r2, #8
 800447a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f838 	bl	80044f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2208      	movs	r2, #8
 8004486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e029      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a4:	d111      	bne.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f81e 	bl	80044f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00f      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d0a0      	beq.n	800442a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b095      	sub	sp, #84	@ 0x54
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004518:	643b      	str	r3, [r7, #64]	@ 0x40
 800451a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800451e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e6      	bne.n	80044fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	e853 3f00 	ldrex	r3, [r3]
 800453a:	61fb      	str	r3, [r7, #28]
   return(result);
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f023 0301 	bic.w	r3, r3, #1
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800454c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800454e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004554:	e841 2300 	strex	r3, r2, [r1]
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e5      	bne.n	800452c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004564:	2b01      	cmp	r3, #1
 8004566:	d118      	bne.n	800459a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	60bb      	str	r3, [r7, #8]
   return(result);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f023 0310 	bic.w	r3, r3, #16
 800457c:	647b      	str	r3, [r7, #68]	@ 0x44
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	613b      	str	r3, [r7, #16]
   return(result);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e6      	bne.n	8004568 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045ae:	bf00      	nop
 80045b0:	3754      	adds	r7, #84	@ 0x54
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <siprintf>:
 80045bc:	b40e      	push	{r1, r2, r3}
 80045be:	b500      	push	{lr}
 80045c0:	b09c      	sub	sp, #112	@ 0x70
 80045c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	9006      	str	r0, [sp, #24]
 80045c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80045cc:	4809      	ldr	r0, [pc, #36]	@ (80045f4 <siprintf+0x38>)
 80045ce:	9107      	str	r1, [sp, #28]
 80045d0:	9104      	str	r1, [sp, #16]
 80045d2:	4909      	ldr	r1, [pc, #36]	@ (80045f8 <siprintf+0x3c>)
 80045d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d8:	9105      	str	r1, [sp, #20]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	a902      	add	r1, sp, #8
 80045e0:	f000 f994 	bl	800490c <_svfiprintf_r>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	b01c      	add	sp, #112	@ 0x70
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b003      	add	sp, #12
 80045f2:	4770      	bx	lr
 80045f4:	20000010 	.word	0x20000010
 80045f8:	ffff0208 	.word	0xffff0208

080045fc <memset>:
 80045fc:	4402      	add	r2, r0
 80045fe:	4603      	mov	r3, r0
 8004600:	4293      	cmp	r3, r2
 8004602:	d100      	bne.n	8004606 <memset+0xa>
 8004604:	4770      	bx	lr
 8004606:	f803 1b01 	strb.w	r1, [r3], #1
 800460a:	e7f9      	b.n	8004600 <memset+0x4>

0800460c <__errno>:
 800460c:	4b01      	ldr	r3, [pc, #4]	@ (8004614 <__errno+0x8>)
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000010 	.word	0x20000010

08004618 <__libc_init_array>:
 8004618:	b570      	push	{r4, r5, r6, lr}
 800461a:	4d0d      	ldr	r5, [pc, #52]	@ (8004650 <__libc_init_array+0x38>)
 800461c:	4c0d      	ldr	r4, [pc, #52]	@ (8004654 <__libc_init_array+0x3c>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	2600      	movs	r6, #0
 8004624:	42a6      	cmp	r6, r4
 8004626:	d109      	bne.n	800463c <__libc_init_array+0x24>
 8004628:	4d0b      	ldr	r5, [pc, #44]	@ (8004658 <__libc_init_array+0x40>)
 800462a:	4c0c      	ldr	r4, [pc, #48]	@ (800465c <__libc_init_array+0x44>)
 800462c:	f000 fc66 	bl	8004efc <_init>
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	2600      	movs	r6, #0
 8004636:	42a6      	cmp	r6, r4
 8004638:	d105      	bne.n	8004646 <__libc_init_array+0x2e>
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004640:	4798      	blx	r3
 8004642:	3601      	adds	r6, #1
 8004644:	e7ee      	b.n	8004624 <__libc_init_array+0xc>
 8004646:	f855 3b04 	ldr.w	r3, [r5], #4
 800464a:	4798      	blx	r3
 800464c:	3601      	adds	r6, #1
 800464e:	e7f2      	b.n	8004636 <__libc_init_array+0x1e>
 8004650:	08004f90 	.word	0x08004f90
 8004654:	08004f90 	.word	0x08004f90
 8004658:	08004f90 	.word	0x08004f90
 800465c:	08004f94 	.word	0x08004f94

08004660 <__retarget_lock_acquire_recursive>:
 8004660:	4770      	bx	lr

08004662 <__retarget_lock_release_recursive>:
 8004662:	4770      	bx	lr

08004664 <_free_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4605      	mov	r5, r0
 8004668:	2900      	cmp	r1, #0
 800466a:	d041      	beq.n	80046f0 <_free_r+0x8c>
 800466c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004670:	1f0c      	subs	r4, r1, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	bfb8      	it	lt
 8004676:	18e4      	addlt	r4, r4, r3
 8004678:	f000 f8e0 	bl	800483c <__malloc_lock>
 800467c:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <_free_r+0x90>)
 800467e:	6813      	ldr	r3, [r2, #0]
 8004680:	b933      	cbnz	r3, 8004690 <_free_r+0x2c>
 8004682:	6063      	str	r3, [r4, #4]
 8004684:	6014      	str	r4, [r2, #0]
 8004686:	4628      	mov	r0, r5
 8004688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800468c:	f000 b8dc 	b.w	8004848 <__malloc_unlock>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d908      	bls.n	80046a6 <_free_r+0x42>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	1821      	adds	r1, r4, r0
 8004698:	428b      	cmp	r3, r1
 800469a:	bf01      	itttt	eq
 800469c:	6819      	ldreq	r1, [r3, #0]
 800469e:	685b      	ldreq	r3, [r3, #4]
 80046a0:	1809      	addeq	r1, r1, r0
 80046a2:	6021      	streq	r1, [r4, #0]
 80046a4:	e7ed      	b.n	8004682 <_free_r+0x1e>
 80046a6:	461a      	mov	r2, r3
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	b10b      	cbz	r3, 80046b0 <_free_r+0x4c>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d9fa      	bls.n	80046a6 <_free_r+0x42>
 80046b0:	6811      	ldr	r1, [r2, #0]
 80046b2:	1850      	adds	r0, r2, r1
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d10b      	bne.n	80046d0 <_free_r+0x6c>
 80046b8:	6820      	ldr	r0, [r4, #0]
 80046ba:	4401      	add	r1, r0
 80046bc:	1850      	adds	r0, r2, r1
 80046be:	4283      	cmp	r3, r0
 80046c0:	6011      	str	r1, [r2, #0]
 80046c2:	d1e0      	bne.n	8004686 <_free_r+0x22>
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	4408      	add	r0, r1
 80046cc:	6010      	str	r0, [r2, #0]
 80046ce:	e7da      	b.n	8004686 <_free_r+0x22>
 80046d0:	d902      	bls.n	80046d8 <_free_r+0x74>
 80046d2:	230c      	movs	r3, #12
 80046d4:	602b      	str	r3, [r5, #0]
 80046d6:	e7d6      	b.n	8004686 <_free_r+0x22>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	1821      	adds	r1, r4, r0
 80046dc:	428b      	cmp	r3, r1
 80046de:	bf04      	itt	eq
 80046e0:	6819      	ldreq	r1, [r3, #0]
 80046e2:	685b      	ldreq	r3, [r3, #4]
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	bf04      	itt	eq
 80046e8:	1809      	addeq	r1, r1, r0
 80046ea:	6021      	streq	r1, [r4, #0]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7ca      	b.n	8004686 <_free_r+0x22>
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	200003b0 	.word	0x200003b0

080046f8 <sbrk_aligned>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004738 <sbrk_aligned+0x40>)
 80046fc:	460c      	mov	r4, r1
 80046fe:	6831      	ldr	r1, [r6, #0]
 8004700:	4605      	mov	r5, r0
 8004702:	b911      	cbnz	r1, 800470a <sbrk_aligned+0x12>
 8004704:	f000 fba6 	bl	8004e54 <_sbrk_r>
 8004708:	6030      	str	r0, [r6, #0]
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 fba1 	bl	8004e54 <_sbrk_r>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d103      	bne.n	800471e <sbrk_aligned+0x26>
 8004716:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800471a:	4620      	mov	r0, r4
 800471c:	bd70      	pop	{r4, r5, r6, pc}
 800471e:	1cc4      	adds	r4, r0, #3
 8004720:	f024 0403 	bic.w	r4, r4, #3
 8004724:	42a0      	cmp	r0, r4
 8004726:	d0f8      	beq.n	800471a <sbrk_aligned+0x22>
 8004728:	1a21      	subs	r1, r4, r0
 800472a:	4628      	mov	r0, r5
 800472c:	f000 fb92 	bl	8004e54 <_sbrk_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d1f2      	bne.n	800471a <sbrk_aligned+0x22>
 8004734:	e7ef      	b.n	8004716 <sbrk_aligned+0x1e>
 8004736:	bf00      	nop
 8004738:	200003ac 	.word	0x200003ac

0800473c <_malloc_r>:
 800473c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004740:	1ccd      	adds	r5, r1, #3
 8004742:	f025 0503 	bic.w	r5, r5, #3
 8004746:	3508      	adds	r5, #8
 8004748:	2d0c      	cmp	r5, #12
 800474a:	bf38      	it	cc
 800474c:	250c      	movcc	r5, #12
 800474e:	2d00      	cmp	r5, #0
 8004750:	4606      	mov	r6, r0
 8004752:	db01      	blt.n	8004758 <_malloc_r+0x1c>
 8004754:	42a9      	cmp	r1, r5
 8004756:	d904      	bls.n	8004762 <_malloc_r+0x26>
 8004758:	230c      	movs	r3, #12
 800475a:	6033      	str	r3, [r6, #0]
 800475c:	2000      	movs	r0, #0
 800475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004838 <_malloc_r+0xfc>
 8004766:	f000 f869 	bl	800483c <__malloc_lock>
 800476a:	f8d8 3000 	ldr.w	r3, [r8]
 800476e:	461c      	mov	r4, r3
 8004770:	bb44      	cbnz	r4, 80047c4 <_malloc_r+0x88>
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff ffbf 	bl	80046f8 <sbrk_aligned>
 800477a:	1c43      	adds	r3, r0, #1
 800477c:	4604      	mov	r4, r0
 800477e:	d158      	bne.n	8004832 <_malloc_r+0xf6>
 8004780:	f8d8 4000 	ldr.w	r4, [r8]
 8004784:	4627      	mov	r7, r4
 8004786:	2f00      	cmp	r7, #0
 8004788:	d143      	bne.n	8004812 <_malloc_r+0xd6>
 800478a:	2c00      	cmp	r4, #0
 800478c:	d04b      	beq.n	8004826 <_malloc_r+0xea>
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	4639      	mov	r1, r7
 8004792:	4630      	mov	r0, r6
 8004794:	eb04 0903 	add.w	r9, r4, r3
 8004798:	f000 fb5c 	bl	8004e54 <_sbrk_r>
 800479c:	4581      	cmp	r9, r0
 800479e:	d142      	bne.n	8004826 <_malloc_r+0xea>
 80047a0:	6821      	ldr	r1, [r4, #0]
 80047a2:	1a6d      	subs	r5, r5, r1
 80047a4:	4629      	mov	r1, r5
 80047a6:	4630      	mov	r0, r6
 80047a8:	f7ff ffa6 	bl	80046f8 <sbrk_aligned>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d03a      	beq.n	8004826 <_malloc_r+0xea>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	442b      	add	r3, r5
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	f8d8 3000 	ldr.w	r3, [r8]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	bb62      	cbnz	r2, 8004818 <_malloc_r+0xdc>
 80047be:	f8c8 7000 	str.w	r7, [r8]
 80047c2:	e00f      	b.n	80047e4 <_malloc_r+0xa8>
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	1b52      	subs	r2, r2, r5
 80047c8:	d420      	bmi.n	800480c <_malloc_r+0xd0>
 80047ca:	2a0b      	cmp	r2, #11
 80047cc:	d917      	bls.n	80047fe <_malloc_r+0xc2>
 80047ce:	1961      	adds	r1, r4, r5
 80047d0:	42a3      	cmp	r3, r4
 80047d2:	6025      	str	r5, [r4, #0]
 80047d4:	bf18      	it	ne
 80047d6:	6059      	strne	r1, [r3, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	bf08      	it	eq
 80047dc:	f8c8 1000 	streq.w	r1, [r8]
 80047e0:	5162      	str	r2, [r4, r5]
 80047e2:	604b      	str	r3, [r1, #4]
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 f82f 	bl	8004848 <__malloc_unlock>
 80047ea:	f104 000b 	add.w	r0, r4, #11
 80047ee:	1d23      	adds	r3, r4, #4
 80047f0:	f020 0007 	bic.w	r0, r0, #7
 80047f4:	1ac2      	subs	r2, r0, r3
 80047f6:	bf1c      	itt	ne
 80047f8:	1a1b      	subne	r3, r3, r0
 80047fa:	50a3      	strne	r3, [r4, r2]
 80047fc:	e7af      	b.n	800475e <_malloc_r+0x22>
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	42a3      	cmp	r3, r4
 8004802:	bf0c      	ite	eq
 8004804:	f8c8 2000 	streq.w	r2, [r8]
 8004808:	605a      	strne	r2, [r3, #4]
 800480a:	e7eb      	b.n	80047e4 <_malloc_r+0xa8>
 800480c:	4623      	mov	r3, r4
 800480e:	6864      	ldr	r4, [r4, #4]
 8004810:	e7ae      	b.n	8004770 <_malloc_r+0x34>
 8004812:	463c      	mov	r4, r7
 8004814:	687f      	ldr	r7, [r7, #4]
 8004816:	e7b6      	b.n	8004786 <_malloc_r+0x4a>
 8004818:	461a      	mov	r2, r3
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	42a3      	cmp	r3, r4
 800481e:	d1fb      	bne.n	8004818 <_malloc_r+0xdc>
 8004820:	2300      	movs	r3, #0
 8004822:	6053      	str	r3, [r2, #4]
 8004824:	e7de      	b.n	80047e4 <_malloc_r+0xa8>
 8004826:	230c      	movs	r3, #12
 8004828:	6033      	str	r3, [r6, #0]
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f80c 	bl	8004848 <__malloc_unlock>
 8004830:	e794      	b.n	800475c <_malloc_r+0x20>
 8004832:	6005      	str	r5, [r0, #0]
 8004834:	e7d6      	b.n	80047e4 <_malloc_r+0xa8>
 8004836:	bf00      	nop
 8004838:	200003b0 	.word	0x200003b0

0800483c <__malloc_lock>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__malloc_lock+0x8>)
 800483e:	f7ff bf0f 	b.w	8004660 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	200003a8 	.word	0x200003a8

08004848 <__malloc_unlock>:
 8004848:	4801      	ldr	r0, [pc, #4]	@ (8004850 <__malloc_unlock+0x8>)
 800484a:	f7ff bf0a 	b.w	8004662 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	200003a8 	.word	0x200003a8

08004854 <__ssputs_r>:
 8004854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004858:	688e      	ldr	r6, [r1, #8]
 800485a:	461f      	mov	r7, r3
 800485c:	42be      	cmp	r6, r7
 800485e:	680b      	ldr	r3, [r1, #0]
 8004860:	4682      	mov	sl, r0
 8004862:	460c      	mov	r4, r1
 8004864:	4690      	mov	r8, r2
 8004866:	d82d      	bhi.n	80048c4 <__ssputs_r+0x70>
 8004868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800486c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004870:	d026      	beq.n	80048c0 <__ssputs_r+0x6c>
 8004872:	6965      	ldr	r5, [r4, #20]
 8004874:	6909      	ldr	r1, [r1, #16]
 8004876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800487a:	eba3 0901 	sub.w	r9, r3, r1
 800487e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004882:	1c7b      	adds	r3, r7, #1
 8004884:	444b      	add	r3, r9
 8004886:	106d      	asrs	r5, r5, #1
 8004888:	429d      	cmp	r5, r3
 800488a:	bf38      	it	cc
 800488c:	461d      	movcc	r5, r3
 800488e:	0553      	lsls	r3, r2, #21
 8004890:	d527      	bpl.n	80048e2 <__ssputs_r+0x8e>
 8004892:	4629      	mov	r1, r5
 8004894:	f7ff ff52 	bl	800473c <_malloc_r>
 8004898:	4606      	mov	r6, r0
 800489a:	b360      	cbz	r0, 80048f6 <__ssputs_r+0xa2>
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	464a      	mov	r2, r9
 80048a0:	f000 fae8 	bl	8004e74 <memcpy>
 80048a4:	89a3      	ldrh	r3, [r4, #12]
 80048a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80048aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ae:	81a3      	strh	r3, [r4, #12]
 80048b0:	6126      	str	r6, [r4, #16]
 80048b2:	6165      	str	r5, [r4, #20]
 80048b4:	444e      	add	r6, r9
 80048b6:	eba5 0509 	sub.w	r5, r5, r9
 80048ba:	6026      	str	r6, [r4, #0]
 80048bc:	60a5      	str	r5, [r4, #8]
 80048be:	463e      	mov	r6, r7
 80048c0:	42be      	cmp	r6, r7
 80048c2:	d900      	bls.n	80048c6 <__ssputs_r+0x72>
 80048c4:	463e      	mov	r6, r7
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	4632      	mov	r2, r6
 80048ca:	4641      	mov	r1, r8
 80048cc:	f000 faa8 	bl	8004e20 <memmove>
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	1b9b      	subs	r3, r3, r6
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	4433      	add	r3, r6
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	2000      	movs	r0, #0
 80048de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e2:	462a      	mov	r2, r5
 80048e4:	f000 fad4 	bl	8004e90 <_realloc_r>
 80048e8:	4606      	mov	r6, r0
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d1e0      	bne.n	80048b0 <__ssputs_r+0x5c>
 80048ee:	6921      	ldr	r1, [r4, #16]
 80048f0:	4650      	mov	r0, sl
 80048f2:	f7ff feb7 	bl	8004664 <_free_r>
 80048f6:	230c      	movs	r3, #12
 80048f8:	f8ca 3000 	str.w	r3, [sl]
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004902:	81a3      	strh	r3, [r4, #12]
 8004904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004908:	e7e9      	b.n	80048de <__ssputs_r+0x8a>
	...

0800490c <_svfiprintf_r>:
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	4698      	mov	r8, r3
 8004912:	898b      	ldrh	r3, [r1, #12]
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	b09d      	sub	sp, #116	@ 0x74
 8004918:	4607      	mov	r7, r0
 800491a:	460d      	mov	r5, r1
 800491c:	4614      	mov	r4, r2
 800491e:	d510      	bpl.n	8004942 <_svfiprintf_r+0x36>
 8004920:	690b      	ldr	r3, [r1, #16]
 8004922:	b973      	cbnz	r3, 8004942 <_svfiprintf_r+0x36>
 8004924:	2140      	movs	r1, #64	@ 0x40
 8004926:	f7ff ff09 	bl	800473c <_malloc_r>
 800492a:	6028      	str	r0, [r5, #0]
 800492c:	6128      	str	r0, [r5, #16]
 800492e:	b930      	cbnz	r0, 800493e <_svfiprintf_r+0x32>
 8004930:	230c      	movs	r3, #12
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004938:	b01d      	add	sp, #116	@ 0x74
 800493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800493e:	2340      	movs	r3, #64	@ 0x40
 8004940:	616b      	str	r3, [r5, #20]
 8004942:	2300      	movs	r3, #0
 8004944:	9309      	str	r3, [sp, #36]	@ 0x24
 8004946:	2320      	movs	r3, #32
 8004948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800494c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004950:	2330      	movs	r3, #48	@ 0x30
 8004952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004af0 <_svfiprintf_r+0x1e4>
 8004956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800495a:	f04f 0901 	mov.w	r9, #1
 800495e:	4623      	mov	r3, r4
 8004960:	469a      	mov	sl, r3
 8004962:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004966:	b10a      	cbz	r2, 800496c <_svfiprintf_r+0x60>
 8004968:	2a25      	cmp	r2, #37	@ 0x25
 800496a:	d1f9      	bne.n	8004960 <_svfiprintf_r+0x54>
 800496c:	ebba 0b04 	subs.w	fp, sl, r4
 8004970:	d00b      	beq.n	800498a <_svfiprintf_r+0x7e>
 8004972:	465b      	mov	r3, fp
 8004974:	4622      	mov	r2, r4
 8004976:	4629      	mov	r1, r5
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff ff6b 	bl	8004854 <__ssputs_r>
 800497e:	3001      	adds	r0, #1
 8004980:	f000 80a7 	beq.w	8004ad2 <_svfiprintf_r+0x1c6>
 8004984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004986:	445a      	add	r2, fp
 8004988:	9209      	str	r2, [sp, #36]	@ 0x24
 800498a:	f89a 3000 	ldrb.w	r3, [sl]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 809f 	beq.w	8004ad2 <_svfiprintf_r+0x1c6>
 8004994:	2300      	movs	r3, #0
 8004996:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800499a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800499e:	f10a 0a01 	add.w	sl, sl, #1
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	9307      	str	r3, [sp, #28]
 80049a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80049ac:	4654      	mov	r4, sl
 80049ae:	2205      	movs	r2, #5
 80049b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b4:	484e      	ldr	r0, [pc, #312]	@ (8004af0 <_svfiprintf_r+0x1e4>)
 80049b6:	f7fb fc13 	bl	80001e0 <memchr>
 80049ba:	9a04      	ldr	r2, [sp, #16]
 80049bc:	b9d8      	cbnz	r0, 80049f6 <_svfiprintf_r+0xea>
 80049be:	06d0      	lsls	r0, r2, #27
 80049c0:	bf44      	itt	mi
 80049c2:	2320      	movmi	r3, #32
 80049c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049c8:	0711      	lsls	r1, r2, #28
 80049ca:	bf44      	itt	mi
 80049cc:	232b      	movmi	r3, #43	@ 0x2b
 80049ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049d2:	f89a 3000 	ldrb.w	r3, [sl]
 80049d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049d8:	d015      	beq.n	8004a06 <_svfiprintf_r+0xfa>
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	4654      	mov	r4, sl
 80049de:	2000      	movs	r0, #0
 80049e0:	f04f 0c0a 	mov.w	ip, #10
 80049e4:	4621      	mov	r1, r4
 80049e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ea:	3b30      	subs	r3, #48	@ 0x30
 80049ec:	2b09      	cmp	r3, #9
 80049ee:	d94b      	bls.n	8004a88 <_svfiprintf_r+0x17c>
 80049f0:	b1b0      	cbz	r0, 8004a20 <_svfiprintf_r+0x114>
 80049f2:	9207      	str	r2, [sp, #28]
 80049f4:	e014      	b.n	8004a20 <_svfiprintf_r+0x114>
 80049f6:	eba0 0308 	sub.w	r3, r0, r8
 80049fa:	fa09 f303 	lsl.w	r3, r9, r3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	9304      	str	r3, [sp, #16]
 8004a02:	46a2      	mov	sl, r4
 8004a04:	e7d2      	b.n	80049ac <_svfiprintf_r+0xa0>
 8004a06:	9b03      	ldr	r3, [sp, #12]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	9103      	str	r1, [sp, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfbb      	ittet	lt
 8004a12:	425b      	neglt	r3, r3
 8004a14:	f042 0202 	orrlt.w	r2, r2, #2
 8004a18:	9307      	strge	r3, [sp, #28]
 8004a1a:	9307      	strlt	r3, [sp, #28]
 8004a1c:	bfb8      	it	lt
 8004a1e:	9204      	strlt	r2, [sp, #16]
 8004a20:	7823      	ldrb	r3, [r4, #0]
 8004a22:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a24:	d10a      	bne.n	8004a3c <_svfiprintf_r+0x130>
 8004a26:	7863      	ldrb	r3, [r4, #1]
 8004a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a2a:	d132      	bne.n	8004a92 <_svfiprintf_r+0x186>
 8004a2c:	9b03      	ldr	r3, [sp, #12]
 8004a2e:	1d1a      	adds	r2, r3, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	9203      	str	r2, [sp, #12]
 8004a34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a38:	3402      	adds	r4, #2
 8004a3a:	9305      	str	r3, [sp, #20]
 8004a3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b00 <_svfiprintf_r+0x1f4>
 8004a40:	7821      	ldrb	r1, [r4, #0]
 8004a42:	2203      	movs	r2, #3
 8004a44:	4650      	mov	r0, sl
 8004a46:	f7fb fbcb 	bl	80001e0 <memchr>
 8004a4a:	b138      	cbz	r0, 8004a5c <_svfiprintf_r+0x150>
 8004a4c:	9b04      	ldr	r3, [sp, #16]
 8004a4e:	eba0 000a 	sub.w	r0, r0, sl
 8004a52:	2240      	movs	r2, #64	@ 0x40
 8004a54:	4082      	lsls	r2, r0
 8004a56:	4313      	orrs	r3, r2
 8004a58:	3401      	adds	r4, #1
 8004a5a:	9304      	str	r3, [sp, #16]
 8004a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a60:	4824      	ldr	r0, [pc, #144]	@ (8004af4 <_svfiprintf_r+0x1e8>)
 8004a62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a66:	2206      	movs	r2, #6
 8004a68:	f7fb fbba 	bl	80001e0 <memchr>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d036      	beq.n	8004ade <_svfiprintf_r+0x1d2>
 8004a70:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <_svfiprintf_r+0x1ec>)
 8004a72:	bb1b      	cbnz	r3, 8004abc <_svfiprintf_r+0x1b0>
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	3307      	adds	r3, #7
 8004a78:	f023 0307 	bic.w	r3, r3, #7
 8004a7c:	3308      	adds	r3, #8
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a82:	4433      	add	r3, r6
 8004a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a86:	e76a      	b.n	800495e <_svfiprintf_r+0x52>
 8004a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e7a8      	b.n	80049e4 <_svfiprintf_r+0xd8>
 8004a92:	2300      	movs	r3, #0
 8004a94:	3401      	adds	r4, #1
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	4619      	mov	r1, r3
 8004a9a:	f04f 0c0a 	mov.w	ip, #10
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa4:	3a30      	subs	r2, #48	@ 0x30
 8004aa6:	2a09      	cmp	r2, #9
 8004aa8:	d903      	bls.n	8004ab2 <_svfiprintf_r+0x1a6>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0c6      	beq.n	8004a3c <_svfiprintf_r+0x130>
 8004aae:	9105      	str	r1, [sp, #20]
 8004ab0:	e7c4      	b.n	8004a3c <_svfiprintf_r+0x130>
 8004ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e7f0      	b.n	8004a9e <_svfiprintf_r+0x192>
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <_svfiprintf_r+0x1f0>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	f3af 8000 	nop.w
 8004acc:	1c42      	adds	r2, r0, #1
 8004ace:	4606      	mov	r6, r0
 8004ad0:	d1d6      	bne.n	8004a80 <_svfiprintf_r+0x174>
 8004ad2:	89ab      	ldrh	r3, [r5, #12]
 8004ad4:	065b      	lsls	r3, r3, #25
 8004ad6:	f53f af2d 	bmi.w	8004934 <_svfiprintf_r+0x28>
 8004ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004adc:	e72c      	b.n	8004938 <_svfiprintf_r+0x2c>
 8004ade:	ab03      	add	r3, sp, #12
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	462a      	mov	r2, r5
 8004ae4:	4b05      	ldr	r3, [pc, #20]	@ (8004afc <_svfiprintf_r+0x1f0>)
 8004ae6:	a904      	add	r1, sp, #16
 8004ae8:	4638      	mov	r0, r7
 8004aea:	f000 f879 	bl	8004be0 <_printf_i>
 8004aee:	e7ed      	b.n	8004acc <_svfiprintf_r+0x1c0>
 8004af0:	08004f54 	.word	0x08004f54
 8004af4:	08004f5e 	.word	0x08004f5e
 8004af8:	00000000 	.word	0x00000000
 8004afc:	08004855 	.word	0x08004855
 8004b00:	08004f5a 	.word	0x08004f5a

08004b04 <_printf_common>:
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4616      	mov	r6, r2
 8004b0a:	4698      	mov	r8, r3
 8004b0c:	688a      	ldr	r2, [r1, #8]
 8004b0e:	690b      	ldr	r3, [r1, #16]
 8004b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bfb8      	it	lt
 8004b18:	4613      	movlt	r3, r2
 8004b1a:	6033      	str	r3, [r6, #0]
 8004b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b20:	4607      	mov	r7, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	b10a      	cbz	r2, 8004b2a <_printf_common+0x26>
 8004b26:	3301      	adds	r3, #1
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	0699      	lsls	r1, r3, #26
 8004b2e:	bf42      	ittt	mi
 8004b30:	6833      	ldrmi	r3, [r6, #0]
 8004b32:	3302      	addmi	r3, #2
 8004b34:	6033      	strmi	r3, [r6, #0]
 8004b36:	6825      	ldr	r5, [r4, #0]
 8004b38:	f015 0506 	ands.w	r5, r5, #6
 8004b3c:	d106      	bne.n	8004b4c <_printf_common+0x48>
 8004b3e:	f104 0a19 	add.w	sl, r4, #25
 8004b42:	68e3      	ldr	r3, [r4, #12]
 8004b44:	6832      	ldr	r2, [r6, #0]
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	dc26      	bgt.n	8004b9a <_printf_common+0x96>
 8004b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b50:	6822      	ldr	r2, [r4, #0]
 8004b52:	3b00      	subs	r3, #0
 8004b54:	bf18      	it	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	0692      	lsls	r2, r2, #26
 8004b5a:	d42b      	bmi.n	8004bb4 <_printf_common+0xb0>
 8004b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b60:	4641      	mov	r1, r8
 8004b62:	4638      	mov	r0, r7
 8004b64:	47c8      	blx	r9
 8004b66:	3001      	adds	r0, #1
 8004b68:	d01e      	beq.n	8004ba8 <_printf_common+0xa4>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	6922      	ldr	r2, [r4, #16]
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf02      	ittt	eq
 8004b76:	68e5      	ldreq	r5, [r4, #12]
 8004b78:	6833      	ldreq	r3, [r6, #0]
 8004b7a:	1aed      	subeq	r5, r5, r3
 8004b7c:	68a3      	ldr	r3, [r4, #8]
 8004b7e:	bf0c      	ite	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	2500      	movne	r5, #0
 8004b86:	4293      	cmp	r3, r2
 8004b88:	bfc4      	itt	gt
 8004b8a:	1a9b      	subgt	r3, r3, r2
 8004b8c:	18ed      	addgt	r5, r5, r3
 8004b8e:	2600      	movs	r6, #0
 8004b90:	341a      	adds	r4, #26
 8004b92:	42b5      	cmp	r5, r6
 8004b94:	d11a      	bne.n	8004bcc <_printf_common+0xc8>
 8004b96:	2000      	movs	r0, #0
 8004b98:	e008      	b.n	8004bac <_printf_common+0xa8>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	4652      	mov	r2, sl
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	47c8      	blx	r9
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0xac>
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	e7c6      	b.n	8004b42 <_printf_common+0x3e>
 8004bb4:	18e1      	adds	r1, r4, r3
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	2030      	movs	r0, #48	@ 0x30
 8004bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bbe:	4422      	add	r2, r4
 8004bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc8:	3302      	adds	r3, #2
 8004bca:	e7c7      	b.n	8004b5c <_printf_common+0x58>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c8      	blx	r9
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d0e6      	beq.n	8004ba8 <_printf_common+0xa4>
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7d9      	b.n	8004b92 <_printf_common+0x8e>
	...

08004be0 <_printf_i>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	7e0f      	ldrb	r7, [r1, #24]
 8004be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be8:	2f78      	cmp	r7, #120	@ 0x78
 8004bea:	4691      	mov	r9, r2
 8004bec:	4680      	mov	r8, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	469a      	mov	sl, r3
 8004bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bf6:	d807      	bhi.n	8004c08 <_printf_i+0x28>
 8004bf8:	2f62      	cmp	r7, #98	@ 0x62
 8004bfa:	d80a      	bhi.n	8004c12 <_printf_i+0x32>
 8004bfc:	2f00      	cmp	r7, #0
 8004bfe:	f000 80d2 	beq.w	8004da6 <_printf_i+0x1c6>
 8004c02:	2f58      	cmp	r7, #88	@ 0x58
 8004c04:	f000 80b9 	beq.w	8004d7a <_printf_i+0x19a>
 8004c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c10:	e03a      	b.n	8004c88 <_printf_i+0xa8>
 8004c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c16:	2b15      	cmp	r3, #21
 8004c18:	d8f6      	bhi.n	8004c08 <_printf_i+0x28>
 8004c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c20 <_printf_i+0x40>)
 8004c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c20:	08004c79 	.word	0x08004c79
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c09 	.word	0x08004c09
 8004c2c:	08004c09 	.word	0x08004c09
 8004c30:	08004c09 	.word	0x08004c09
 8004c34:	08004c09 	.word	0x08004c09
 8004c38:	08004c8d 	.word	0x08004c8d
 8004c3c:	08004c09 	.word	0x08004c09
 8004c40:	08004c09 	.word	0x08004c09
 8004c44:	08004c09 	.word	0x08004c09
 8004c48:	08004c09 	.word	0x08004c09
 8004c4c:	08004d8d 	.word	0x08004d8d
 8004c50:	08004cb7 	.word	0x08004cb7
 8004c54:	08004d47 	.word	0x08004d47
 8004c58:	08004c09 	.word	0x08004c09
 8004c5c:	08004c09 	.word	0x08004c09
 8004c60:	08004daf 	.word	0x08004daf
 8004c64:	08004c09 	.word	0x08004c09
 8004c68:	08004cb7 	.word	0x08004cb7
 8004c6c:	08004c09 	.word	0x08004c09
 8004c70:	08004c09 	.word	0x08004c09
 8004c74:	08004d4f 	.word	0x08004d4f
 8004c78:	6833      	ldr	r3, [r6, #0]
 8004c7a:	1d1a      	adds	r2, r3, #4
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6032      	str	r2, [r6, #0]
 8004c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e09d      	b.n	8004dc8 <_printf_i+0x1e8>
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	6820      	ldr	r0, [r4, #0]
 8004c90:	1d19      	adds	r1, r3, #4
 8004c92:	6031      	str	r1, [r6, #0]
 8004c94:	0606      	lsls	r6, r0, #24
 8004c96:	d501      	bpl.n	8004c9c <_printf_i+0xbc>
 8004c98:	681d      	ldr	r5, [r3, #0]
 8004c9a:	e003      	b.n	8004ca4 <_printf_i+0xc4>
 8004c9c:	0645      	lsls	r5, r0, #25
 8004c9e:	d5fb      	bpl.n	8004c98 <_printf_i+0xb8>
 8004ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	da03      	bge.n	8004cb0 <_printf_i+0xd0>
 8004ca8:	232d      	movs	r3, #45	@ 0x2d
 8004caa:	426d      	negs	r5, r5
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cb0:	4859      	ldr	r0, [pc, #356]	@ (8004e18 <_printf_i+0x238>)
 8004cb2:	230a      	movs	r3, #10
 8004cb4:	e011      	b.n	8004cda <_printf_i+0xfa>
 8004cb6:	6821      	ldr	r1, [r4, #0]
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	0608      	lsls	r0, r1, #24
 8004cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cc0:	d402      	bmi.n	8004cc8 <_printf_i+0xe8>
 8004cc2:	0649      	lsls	r1, r1, #25
 8004cc4:	bf48      	it	mi
 8004cc6:	b2ad      	uxthmi	r5, r5
 8004cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cca:	4853      	ldr	r0, [pc, #332]	@ (8004e18 <_printf_i+0x238>)
 8004ccc:	6033      	str	r3, [r6, #0]
 8004cce:	bf14      	ite	ne
 8004cd0:	230a      	movne	r3, #10
 8004cd2:	2308      	moveq	r3, #8
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cda:	6866      	ldr	r6, [r4, #4]
 8004cdc:	60a6      	str	r6, [r4, #8]
 8004cde:	2e00      	cmp	r6, #0
 8004ce0:	bfa2      	ittt	ge
 8004ce2:	6821      	ldrge	r1, [r4, #0]
 8004ce4:	f021 0104 	bicge.w	r1, r1, #4
 8004ce8:	6021      	strge	r1, [r4, #0]
 8004cea:	b90d      	cbnz	r5, 8004cf0 <_printf_i+0x110>
 8004cec:	2e00      	cmp	r6, #0
 8004cee:	d04b      	beq.n	8004d88 <_printf_i+0x1a8>
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8004cfa:	5dc7      	ldrb	r7, [r0, r7]
 8004cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d00:	462f      	mov	r7, r5
 8004d02:	42bb      	cmp	r3, r7
 8004d04:	460d      	mov	r5, r1
 8004d06:	d9f4      	bls.n	8004cf2 <_printf_i+0x112>
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d10b      	bne.n	8004d24 <_printf_i+0x144>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	07df      	lsls	r7, r3, #31
 8004d10:	d508      	bpl.n	8004d24 <_printf_i+0x144>
 8004d12:	6923      	ldr	r3, [r4, #16]
 8004d14:	6861      	ldr	r1, [r4, #4]
 8004d16:	4299      	cmp	r1, r3
 8004d18:	bfde      	ittt	le
 8004d1a:	2330      	movle	r3, #48	@ 0x30
 8004d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004d24:	1b92      	subs	r2, r2, r6
 8004d26:	6122      	str	r2, [r4, #16]
 8004d28:	f8cd a000 	str.w	sl, [sp]
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	aa03      	add	r2, sp, #12
 8004d30:	4621      	mov	r1, r4
 8004d32:	4640      	mov	r0, r8
 8004d34:	f7ff fee6 	bl	8004b04 <_printf_common>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d14a      	bne.n	8004dd2 <_printf_i+0x1f2>
 8004d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d40:	b004      	add	sp, #16
 8004d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f043 0320 	orr.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	4833      	ldr	r0, [pc, #204]	@ (8004e1c <_printf_i+0x23c>)
 8004d50:	2778      	movs	r7, #120	@ 0x78
 8004d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	6831      	ldr	r1, [r6, #0]
 8004d5a:	061f      	lsls	r7, r3, #24
 8004d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d60:	d402      	bmi.n	8004d68 <_printf_i+0x188>
 8004d62:	065f      	lsls	r7, r3, #25
 8004d64:	bf48      	it	mi
 8004d66:	b2ad      	uxthmi	r5, r5
 8004d68:	6031      	str	r1, [r6, #0]
 8004d6a:	07d9      	lsls	r1, r3, #31
 8004d6c:	bf44      	itt	mi
 8004d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d72:	6023      	strmi	r3, [r4, #0]
 8004d74:	b11d      	cbz	r5, 8004d7e <_printf_i+0x19e>
 8004d76:	2310      	movs	r3, #16
 8004d78:	e7ac      	b.n	8004cd4 <_printf_i+0xf4>
 8004d7a:	4827      	ldr	r0, [pc, #156]	@ (8004e18 <_printf_i+0x238>)
 8004d7c:	e7e9      	b.n	8004d52 <_printf_i+0x172>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	f023 0320 	bic.w	r3, r3, #32
 8004d84:	6023      	str	r3, [r4, #0]
 8004d86:	e7f6      	b.n	8004d76 <_printf_i+0x196>
 8004d88:	4616      	mov	r6, r2
 8004d8a:	e7bd      	b.n	8004d08 <_printf_i+0x128>
 8004d8c:	6833      	ldr	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	6961      	ldr	r1, [r4, #20]
 8004d92:	1d18      	adds	r0, r3, #4
 8004d94:	6030      	str	r0, [r6, #0]
 8004d96:	062e      	lsls	r6, r5, #24
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	d501      	bpl.n	8004da0 <_printf_i+0x1c0>
 8004d9c:	6019      	str	r1, [r3, #0]
 8004d9e:	e002      	b.n	8004da6 <_printf_i+0x1c6>
 8004da0:	0668      	lsls	r0, r5, #25
 8004da2:	d5fb      	bpl.n	8004d9c <_printf_i+0x1bc>
 8004da4:	8019      	strh	r1, [r3, #0]
 8004da6:	2300      	movs	r3, #0
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	4616      	mov	r6, r2
 8004dac:	e7bc      	b.n	8004d28 <_printf_i+0x148>
 8004dae:	6833      	ldr	r3, [r6, #0]
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	6032      	str	r2, [r6, #0]
 8004db4:	681e      	ldr	r6, [r3, #0]
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	2100      	movs	r1, #0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7fb fa10 	bl	80001e0 <memchr>
 8004dc0:	b108      	cbz	r0, 8004dc6 <_printf_i+0x1e6>
 8004dc2:	1b80      	subs	r0, r0, r6
 8004dc4:	6060      	str	r0, [r4, #4]
 8004dc6:	6863      	ldr	r3, [r4, #4]
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd0:	e7aa      	b.n	8004d28 <_printf_i+0x148>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	4632      	mov	r2, r6
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4640      	mov	r0, r8
 8004dda:	47d0      	blx	sl
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d0ad      	beq.n	8004d3c <_printf_i+0x15c>
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	079b      	lsls	r3, r3, #30
 8004de4:	d413      	bmi.n	8004e0e <_printf_i+0x22e>
 8004de6:	68e0      	ldr	r0, [r4, #12]
 8004de8:	9b03      	ldr	r3, [sp, #12]
 8004dea:	4298      	cmp	r0, r3
 8004dec:	bfb8      	it	lt
 8004dee:	4618      	movlt	r0, r3
 8004df0:	e7a6      	b.n	8004d40 <_printf_i+0x160>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4632      	mov	r2, r6
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	47d0      	blx	sl
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d09d      	beq.n	8004d3c <_printf_i+0x15c>
 8004e00:	3501      	adds	r5, #1
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	9903      	ldr	r1, [sp, #12]
 8004e06:	1a5b      	subs	r3, r3, r1
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dcf2      	bgt.n	8004df2 <_printf_i+0x212>
 8004e0c:	e7eb      	b.n	8004de6 <_printf_i+0x206>
 8004e0e:	2500      	movs	r5, #0
 8004e10:	f104 0619 	add.w	r6, r4, #25
 8004e14:	e7f5      	b.n	8004e02 <_printf_i+0x222>
 8004e16:	bf00      	nop
 8004e18:	08004f65 	.word	0x08004f65
 8004e1c:	08004f76 	.word	0x08004f76

08004e20 <memmove>:
 8004e20:	4288      	cmp	r0, r1
 8004e22:	b510      	push	{r4, lr}
 8004e24:	eb01 0402 	add.w	r4, r1, r2
 8004e28:	d902      	bls.n	8004e30 <memmove+0x10>
 8004e2a:	4284      	cmp	r4, r0
 8004e2c:	4623      	mov	r3, r4
 8004e2e:	d807      	bhi.n	8004e40 <memmove+0x20>
 8004e30:	1e43      	subs	r3, r0, #1
 8004e32:	42a1      	cmp	r1, r4
 8004e34:	d008      	beq.n	8004e48 <memmove+0x28>
 8004e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e3e:	e7f8      	b.n	8004e32 <memmove+0x12>
 8004e40:	4402      	add	r2, r0
 8004e42:	4601      	mov	r1, r0
 8004e44:	428a      	cmp	r2, r1
 8004e46:	d100      	bne.n	8004e4a <memmove+0x2a>
 8004e48:	bd10      	pop	{r4, pc}
 8004e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e52:	e7f7      	b.n	8004e44 <memmove+0x24>

08004e54 <_sbrk_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d06      	ldr	r5, [pc, #24]	@ (8004e70 <_sbrk_r+0x1c>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fb feb4 	bl	8000bcc <_sbrk>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_sbrk_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_sbrk_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	200003a4 	.word	0x200003a4

08004e74 <memcpy>:
 8004e74:	440a      	add	r2, r1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e7c:	d100      	bne.n	8004e80 <memcpy+0xc>
 8004e7e:	4770      	bx	lr
 8004e80:	b510      	push	{r4, lr}
 8004e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e8a:	4291      	cmp	r1, r2
 8004e8c:	d1f9      	bne.n	8004e82 <memcpy+0xe>
 8004e8e:	bd10      	pop	{r4, pc}

08004e90 <_realloc_r>:
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	4680      	mov	r8, r0
 8004e96:	4615      	mov	r5, r2
 8004e98:	460c      	mov	r4, r1
 8004e9a:	b921      	cbnz	r1, 8004ea6 <_realloc_r+0x16>
 8004e9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	f7ff bc4b 	b.w	800473c <_malloc_r>
 8004ea6:	b92a      	cbnz	r2, 8004eb4 <_realloc_r+0x24>
 8004ea8:	f7ff fbdc 	bl	8004664 <_free_r>
 8004eac:	2400      	movs	r4, #0
 8004eae:	4620      	mov	r0, r4
 8004eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb4:	f000 f81a 	bl	8004eec <_malloc_usable_size_r>
 8004eb8:	4285      	cmp	r5, r0
 8004eba:	4606      	mov	r6, r0
 8004ebc:	d802      	bhi.n	8004ec4 <_realloc_r+0x34>
 8004ebe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ec2:	d8f4      	bhi.n	8004eae <_realloc_r+0x1e>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	f7ff fc38 	bl	800473c <_malloc_r>
 8004ecc:	4607      	mov	r7, r0
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d0ec      	beq.n	8004eac <_realloc_r+0x1c>
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	462a      	mov	r2, r5
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	bf28      	it	cs
 8004eda:	4632      	movcs	r2, r6
 8004edc:	f7ff ffca 	bl	8004e74 <memcpy>
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	f7ff fbbe 	bl	8004664 <_free_r>
 8004ee8:	463c      	mov	r4, r7
 8004eea:	e7e0      	b.n	8004eae <_realloc_r+0x1e>

08004eec <_malloc_usable_size_r>:
 8004eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef0:	1f18      	subs	r0, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	bfbc      	itt	lt
 8004ef6:	580b      	ldrlt	r3, [r1, r0]
 8004ef8:	18c0      	addlt	r0, r0, r3
 8004efa:	4770      	bx	lr

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
