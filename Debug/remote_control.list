
remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800474c  0800474c  0000574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004754  08004754  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00005754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800475c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000002a0  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a666  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001844  00000000  00000000  000106f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00011f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000061c  00000000  00000000  00012720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b213  00000000  00000000  00012d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b609  00000000  00000000  0002df4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a208b  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000db5e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000245c  00000000  00000000  000db628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000dda84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046bc 	.word	0x080046bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080046bc 	.word	0x080046bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b086      	sub	sp, #24
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb77 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f86d 	bl	8000368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f9c1 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f98f 	bl	80005b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000296:	f000 f8bf 	bl	8000418 <MX_ADC1_Init>
  MX_ADC2_Init();
 800029a:	f000 f92d 	bl	80004f8 <MX_ADC2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start(&hadc1);
 800029e:	482a      	ldr	r0, [pc, #168]	@ (8000348 <main+0xc8>)
 80002a0:	f000 fd86 	bl	8000db0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80002a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002a8:	4827      	ldr	r0, [pc, #156]	@ (8000348 <main+0xc8>)
 80002aa:	f000 fe37 	bl	8000f1c <HAL_ADC_PollForConversion>
	  readValueX = HAL_ADC_GetValue(&hadc1);
 80002ae:	4826      	ldr	r0, [pc, #152]	@ (8000348 <main+0xc8>)
 80002b0:	f000 ff02 	bl	80010b8 <HAL_ADC_GetValue>
 80002b4:	4603      	mov	r3, r0
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	4b24      	ldr	r3, [pc, #144]	@ (800034c <main+0xcc>)
 80002ba:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Start(&hadc2);
 80002bc:	4824      	ldr	r0, [pc, #144]	@ (8000350 <main+0xd0>)
 80002be:	f000 fd77 	bl	8000db0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2,1000);
 80002c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002c6:	4822      	ldr	r0, [pc, #136]	@ (8000350 <main+0xd0>)
 80002c8:	f000 fe28 	bl	8000f1c <HAL_ADC_PollForConversion>
	  readValueY = HAL_ADC_GetValue(&hadc2);
 80002cc:	4820      	ldr	r0, [pc, #128]	@ (8000350 <main+0xd0>)
 80002ce:	f000 fef3 	bl	80010b8 <HAL_ADC_GetValue>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <main+0xd4>)
 80002d8:	801a      	strh	r2, [r3, #0]

	  // hacer que solo imprima cuando hay un cambio en el joystick (quitar ruido)
	  if (abs(readValueX - lastX) > THRESHOLD || abs(readValueY - lastY) > THRESHOLD)
 80002da:	4b1c      	ldr	r3, [pc, #112]	@ (800034c <main+0xcc>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <main+0xd8>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	1ad3      	subs	r3, r2, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b0a      	cmp	r3, #10
 80002ee:	dc0a      	bgt.n	8000306 <main+0x86>
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <main+0xd4>)
 80002f2:	881b      	ldrh	r3, [r3, #0]
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b19      	ldr	r3, [pc, #100]	@ (800035c <main+0xdc>)
 80002f8:	881b      	ldrh	r3, [r3, #0]
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	bfb8      	it	lt
 8000300:	425b      	neglt	r3, r3
 8000302:	2b0a      	cmp	r3, #10
 8000304:	dd1c      	ble.n	8000340 <main+0xc0>
	  {
		  lastX = readValueX;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <main+0xcc>)
 8000308:	881a      	ldrh	r2, [r3, #0]
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <main+0xd8>)
 800030c:	801a      	strh	r2, [r3, #0]
		  lastY = readValueY;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <main+0xd4>)
 8000310:	881a      	ldrh	r2, [r3, #0]
 8000312:	4b12      	ldr	r3, [pc, #72]	@ (800035c <main+0xdc>)
 8000314:	801a      	strh	r2, [r3, #0]

		  char msg[20];
		  sprintf(msg, "%d//%d\r\n", readValueX, readValueY);
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <main+0xcc>)
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	461a      	mov	r2, r3
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <main+0xd4>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	1d38      	adds	r0, r7, #4
 8000322:	490f      	ldr	r1, [pc, #60]	@ (8000360 <main+0xe0>)
 8000324:	f003 fd2a 	bl	8003d7c <siprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff50 	bl	80001d0 <strlen>
 8000330:	4603      	mov	r3, r0
 8000332:	b29a      	uxth	r2, r3
 8000334:	1d39      	adds	r1, r7, #4
 8000336:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800033a:	480a      	ldr	r0, [pc, #40]	@ (8000364 <main+0xe4>)
 800033c:	f003 f942 	bl	80035c4 <HAL_UART_Transmit>

	  }
	  HAL_Delay(100);
 8000340:	2064      	movs	r0, #100	@ 0x64
 8000342:	f000 fb7f 	bl	8000a44 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000346:	e7aa      	b.n	800029e <main+0x1e>
 8000348:	20000078 	.word	0x20000078
 800034c:	200001a4 	.word	0x200001a4
 8000350:	200000c8 	.word	0x200000c8
 8000354:	200001a6 	.word	0x200001a6
 8000358:	200001a0 	.word	0x200001a0
 800035c:	200001a2 	.word	0x200001a2
 8000360:	080046d4 	.word	0x080046d4
 8000364:	20000118 	.word	0x20000118

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b096      	sub	sp, #88	@ 0x58
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000372:	2228      	movs	r2, #40	@ 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f003 fd20 	bl	8003dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037c:	f107 031c 	add.w	r3, r7, #28
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]
 800039a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039c:	2302      	movs	r3, #2
 800039e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a0:	2301      	movs	r3, #1
 80003a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a4:	2310      	movs	r3, #16
 80003a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a8:	2302      	movs	r3, #2
 80003aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ac:	2300      	movs	r3, #0
 80003ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80003b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 fd30 	bl	8001e20 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003c6:	f000 f949 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	f107 031c 	add.w	r3, r7, #28
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 fd59 	bl	8002e9c <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003f0:	f000 f934 	bl	800065c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003f4:	2380      	movs	r3, #128	@ 0x80
 80003f6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f002 ff6b 	bl	80032dc <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800040c:	f000 f926 	bl	800065c <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3758      	adds	r7, #88	@ 0x58
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800041e:	f107 031c 	add.w	r3, r7, #28
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
 8000438:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800043a:	4b2e      	ldr	r3, [pc, #184]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800043c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000440:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000442:	4b2c      	ldr	r3, [pc, #176]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000444:	2200      	movs	r2, #0
 8000446:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000448:	4b2a      	ldr	r3, [pc, #168]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044e:	4b29      	ldr	r3, [pc, #164]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000454:	4b27      	ldr	r3, [pc, #156]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000456:	2201      	movs	r2, #1
 8000458:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800045c:	2200      	movs	r2, #0
 800045e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000462:	4b24      	ldr	r3, [pc, #144]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000464:	2200      	movs	r2, #0
 8000466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000468:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800046a:	2201      	movs	r2, #1
 800046c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800046e:	4b21      	ldr	r3, [pc, #132]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000476:	2201      	movs	r2, #1
 8000478:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800047a:	4b1e      	ldr	r3, [pc, #120]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800047c:	2200      	movs	r2, #0
 800047e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000482:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000484:	2204      	movs	r2, #4
 8000486:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000488:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 800048a:	2200      	movs	r2, #0
 800048c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800048e:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000490:	2200      	movs	r2, #0
 8000492:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000494:	4817      	ldr	r0, [pc, #92]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 8000496:	f000 faf9 	bl	8000a8c <HAL_ADC_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004a0:	f000 f8dc 	bl	800065c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004a8:	f107 031c 	add.w	r3, r7, #28
 80004ac:	4619      	mov	r1, r3
 80004ae:	4811      	ldr	r0, [pc, #68]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 80004b0:	f001 f8ce 	bl	8001650 <HAL_ADCEx_MultiModeConfigChannel>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004ba:	f000 f8cf 	bl	800065c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004be:	2301      	movs	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	4619      	mov	r1, r3
 80004da:	4806      	ldr	r0, [pc, #24]	@ (80004f4 <MX_ADC1_Init+0xdc>)
 80004dc:	f000 fdfa 	bl	80010d4 <HAL_ADC_ConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004e6:	f000 f8b9 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	3728      	adds	r7, #40	@ 0x28
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000078 	.word	0x20000078

080004f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fe:	463b      	mov	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
 800050c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800050e:	4b27      	ldr	r3, [pc, #156]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000510:	4a27      	ldr	r2, [pc, #156]	@ (80005b0 <MX_ADC2_Init+0xb8>)
 8000512:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800051a:	4b24      	ldr	r3, [pc, #144]	@ (80005ac <MX_ADC2_Init+0xb4>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000520:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000526:	4b21      	ldr	r3, [pc, #132]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000528:	2201      	movs	r2, #1
 800052a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800052c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_ADC2_Init+0xb4>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000534:	4b1d      	ldr	r3, [pc, #116]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000536:	2200      	movs	r2, #0
 8000538:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800053a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <MX_ADC2_Init+0xb4>)
 800053c:	2201      	movs	r2, #1
 800053e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000540:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000546:	4b19      	ldr	r3, [pc, #100]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000548:	2201      	movs	r2, #1
 800054a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800054c:	4b17      	ldr	r3, [pc, #92]	@ (80005ac <MX_ADC2_Init+0xb4>)
 800054e:	2200      	movs	r2, #0
 8000550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000554:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000556:	2204      	movs	r2, #4
 8000558:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_ADC2_Init+0xb4>)
 800055c:	2200      	movs	r2, #0
 800055e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000562:	2200      	movs	r2, #0
 8000564:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000566:	4811      	ldr	r0, [pc, #68]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000568:	f000 fa90 	bl	8000a8c <HAL_ADC_Init>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000572:	f000 f873 	bl	800065c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000576:	2302      	movs	r3, #2
 8000578:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057a:	2301      	movs	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <MX_ADC2_Init+0xb4>)
 8000594:	f000 fd9e 	bl	80010d4 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800059e:	f000 f85d 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	50000100 	.word	0x50000100

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <MX_USART2_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005be:	4b13      	ldr	r3, [pc, #76]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	@ (800060c <MX_USART2_UART_Init+0x58>)
 80005f8:	f002 ff96 	bl	8003528 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f82b 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000118 	.word	0x20000118
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_GPIO_Init+0x44>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <MX_GPIO_Init+0x44>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_GPIO_Init+0x44>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_GPIO_Init+0x44>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <MX_GPIO_Init+0x44>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_GPIO_Init+0x44>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <Error_Handler+0x8>

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <HAL_MspInit+0x44>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <HAL_MspInit+0x44>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6193      	str	r3, [r2, #24]
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <HAL_MspInit+0x44>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <HAL_MspInit+0x44>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <HAL_MspInit+0x44>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_MspInit+0x44>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80006d0:	d12e      	bne.n	8000730 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80006d2:	4b33      	ldr	r3, [pc, #204]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3301      	adds	r3, #1
 80006d8:	4a31      	ldr	r2, [pc, #196]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 80006da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80006dc:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d10b      	bne.n	80006fc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ee:	6153      	str	r3, [r2, #20]
 80006f0:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	4a28      	ldr	r2, [pc, #160]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 8000702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000706:	6153      	str	r3, [r2, #20]
 8000708:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000714:	2301      	movs	r3, #1
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072a:	f001 fa07 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800072e:	e032      	b.n	8000796 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1c      	ldr	r2, [pc, #112]	@ (80007a8 <HAL_ADC_MspInit+0xf8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d12d      	bne.n	8000796 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3301      	adds	r3, #1
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 8000742:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000744:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <HAL_ADC_MspInit+0xf0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d10b      	bne.n	8000764 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800074c:	4b15      	ldr	r3, [pc, #84]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 800076a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076e:	6153      	str	r3, [r2, #20]
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <HAL_ADC_MspInit+0xf4>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800077c:	2320      	movs	r3, #32
 800077e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000780:	2303      	movs	r3, #3
 8000782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000792:	f001 f9d3 	bl	8001b3c <HAL_GPIO_Init>
}
 8000796:	bf00      	nop
 8000798:	3730      	adds	r7, #48	@ 0x30
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001a8 	.word	0x200001a8
 80007a4:	40021000 	.word	0x40021000
 80007a8:	50000100 	.word	0x50000100

080007ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a18      	ldr	r2, [pc, #96]	@ (800082c <HAL_UART_MspInit+0x80>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d129      	bne.n	8000822 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_UART_MspInit+0x84>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007fe:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000810:	2307      	movs	r3, #7
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f001 f98d 	bl	8001b3c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40004400 	.word	0x40004400
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f8bb 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <_sbrk>:
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
 80008c4:	f003 fa82 	bl	8003dcc <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20003000 	.word	0x20003000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	200001ac 	.word	0x200001ac
 80008fc:	20000300 	.word	0x20000300

08000900 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800095c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000928:	f7ff ffea 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	@ (8000960 <LoopForever+0x6>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	@ (8000964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <LoopForever+0xe>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	@ (800096c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	@ (8000970 <LoopForever+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000952:	f003 fa41 	bl	8003dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000956:	f7ff fc93 	bl	8000280 <main>

0800095a <LoopForever>:

LoopForever:
    b LoopForever
 800095a:	e7fe      	b.n	800095a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800095c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000968:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 800096c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000970:	200002fc 	.word	0x200002fc

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f001 f8a3 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fe68 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f8ad 	bl	8001b22 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009e0:	f001 f883 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200001b0 	.word	0x200001b0

08000a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200001b0 	.word	0x200001b0

08000a44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a5c:	d005      	beq.n	8000a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <HAL_Delay+0x44>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6a:	bf00      	nop
 8000a6c:	f7ff ffde 	bl	8000a2c <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d8f7      	bhi.n	8000a6c <HAL_Delay+0x28>
  {
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000008 	.word	0x20000008

08000a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b09a      	sub	sp, #104	@ 0x68
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e172      	b.n	8000d92 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d176      	bne.n	8000bac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d152      	bne.n	8000b6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fde5 	bl	80006b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d13b      	bne.n	8000b6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 fed5 	bl	80018a4 <ADC_Disable>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d12f      	bne.n	8000b6c <HAL_ADC_Init+0xe0>
 8000b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12b      	bne.n	8000b6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b1c:	f023 0302 	bic.w	r3, r3, #2
 8000b20:	f043 0202 	orr.w	r2, r3, #2
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b48:	4b94      	ldr	r3, [pc, #592]	@ (8000d9c <HAL_ADC_Init+0x310>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a94      	ldr	r2, [pc, #592]	@ (8000da0 <HAL_ADC_Init+0x314>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	0c9a      	lsrs	r2, r3, #18
 8000b54:	4613      	mov	r3, r2
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b5e:	e002      	b.n	8000b66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d1f9      	bne.n	8000b60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d007      	beq.n	8000b8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b88:	d110      	bne.n	8000bac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f023 0312 	bic.w	r3, r3, #18
 8000b92:	f043 0210 	orr.w	r2, r3, #16
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 80df 	bne.w	8000d78 <HAL_ADC_Init+0x2ec>
 8000bba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 80da 	bne.w	8000d78 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 80d2 	bne.w	8000d78 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000bdc:	f043 0202 	orr.w	r2, r3, #2
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000be4:	4b6f      	ldr	r3, [pc, #444]	@ (8000da4 <HAL_ADC_Init+0x318>)
 8000be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bf0:	d102      	bne.n	8000bf8 <HAL_ADC_Init+0x16c>
 8000bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8000da8 <HAL_ADC_Init+0x31c>)
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e002      	b.n	8000bfe <HAL_ADC_Init+0x172>
 8000bf8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bfc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d108      	bne.n	8000c1e <HAL_ADC_Init+0x192>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x192>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <HAL_ADC_Init+0x194>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d11c      	bne.n	8000c5e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d010      	beq.n	8000c4c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d107      	bne.n	8000c46 <HAL_ADC_Init+0x1ba>
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x1ba>
 8000c42:	2301      	movs	r3, #1
 8000c44:	e000      	b.n	8000c48 <HAL_ADC_Init+0x1bc>
 8000c46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d108      	bne.n	8000c5e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7e5b      	ldrb	r3, [r3, #25]
 8000c62:	035b      	lsls	r3, r3, #13
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c68:	2a01      	cmp	r2, #1
 8000c6a:	d002      	beq.n	8000c72 <HAL_ADC_Init+0x1e6>
 8000c6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c70:	e000      	b.n	8000c74 <HAL_ADC_Init+0x1e8>
 8000c72:	2200      	movs	r2, #0
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c84:	4313      	orrs	r3, r2
 8000c86:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d11b      	bne.n	8000cca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	7e5b      	ldrb	r3, [r3, #25]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d109      	bne.n	8000cae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	045a      	lsls	r2, r3, #17
 8000ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cac:	e00d      	b.n	8000cca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000cb6:	f043 0220 	orr.w	r2, r3, #32
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d007      	beq.n	8000ce2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d114      	bne.n	8000d1a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000cfe:	f023 0302 	bic.w	r3, r3, #2
 8000d02:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e1b      	ldrb	r3, [r3, #24]
 8000d08:	039a      	lsls	r2, r3, #14
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4313      	orrs	r3, r2
 8000d14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d16:	4313      	orrs	r3, r2
 8000d18:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	68da      	ldr	r2, [r3, #12]
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <HAL_ADC_Init+0x320>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10c      	bne.n	8000d50 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3c:	f023 010f 	bic.w	r1, r3, #15
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69db      	ldr	r3, [r3, #28]
 8000d44:	1e5a      	subs	r2, r3, #1
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d4e:	e007      	b.n	8000d60 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 020f 	bic.w	r2, r2, #15
 8000d5e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f023 0303 	bic.w	r3, r3, #3
 8000d6e:	f043 0201 	orr.w	r2, r3, #1
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d76:	e00a      	b.n	8000d8e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	f023 0312 	bic.w	r3, r3, #18
 8000d80:	f043 0210 	orr.w	r2, r3, #16
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000d88:	2301      	movs	r3, #1
 8000d8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000d8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3768      	adds	r7, #104	@ 0x68
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	431bde83 	.word	0x431bde83
 8000da4:	50000300 	.word	0x50000300
 8000da8:	50000100 	.word	0x50000100
 8000dac:	fff0c007 	.word	0xfff0c007

08000db0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f040 809c 	bne.w	8000f04 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d101      	bne.n	8000dda <HAL_ADC_Start+0x2a>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e097      	b.n	8000f0a <HAL_ADC_Start+0x15a>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 fcfa 	bl	80017dc <ADC_Enable>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dfc:	f023 0301 	bic.w	r3, r3, #1
 8000e00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e08:	4b42      	ldr	r3, [pc, #264]	@ (8000f14 <HAL_ADC_Start+0x164>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 031f 	and.w	r3, r3, #31
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d004      	beq.n	8000e1e <HAL_ADC_Start+0x6e>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1c:	d115      	bne.n	8000e4a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d027      	beq.n	8000e88 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e48:	e01e      	b.n	8000e88 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e5e:	d004      	beq.n	8000e6a <HAL_ADC_Start+0xba>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <HAL_ADC_Start+0x168>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10e      	bne.n	8000e88 <HAL_ADC_Start+0xd8>
 8000e6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d007      	beq.n	8000e88 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e94:	d106      	bne.n	8000ea4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f023 0206 	bic.w	r2, r3, #6
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ea2:	e002      	b.n	8000eaa <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	221c      	movs	r2, #28
 8000eb8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_ADC_Start+0x164>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d010      	beq.n	8000ee8 <HAL_ADC_Start+0x138>
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_ADC_Start+0x164>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d00a      	beq.n	8000ee8 <HAL_ADC_Start+0x138>
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_ADC_Start+0x164>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b09      	cmp	r3, #9
 8000edc:	d004      	beq.n	8000ee8 <HAL_ADC_Start+0x138>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ee6:	d10f      	bne.n	8000f08 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0204 	orr.w	r2, r2, #4
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	e006      	b.n	8000f08 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000f02:	e001      	b.n	8000f08 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f04:	2302      	movs	r3, #2
 8000f06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	50000300 	.word	0x50000300
 8000f18:	50000100 	.word	0x50000100

08000f1c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	2b08      	cmp	r3, #8
 8000f30:	d102      	bne.n	8000f38 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f32:	2308      	movs	r3, #8
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e02e      	b.n	8000f96 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f38:	4b5e      	ldr	r3, [pc, #376]	@ (80010b4 <HAL_ADC_PollForConversion+0x198>)
 8000f3a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 031f 	and.w	r3, r3, #31
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d112      	bne.n	8000f6e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d11d      	bne.n	8000f92 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f043 0220 	orr.w	r2, r3, #32
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e09d      	b.n	80010aa <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f043 0220 	orr.w	r2, r3, #32
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e08b      	b.n	80010aa <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f92:	230c      	movs	r3, #12
 8000f94:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f96:	4b47      	ldr	r3, [pc, #284]	@ (80010b4 <HAL_ADC_PollForConversion+0x198>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <HAL_ADC_PollForConversion+0x90>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000faa:	d104      	bne.n	8000fb6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	e003      	b.n	8000fbe <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8000fb6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8000fbe:	f7ff fd35 	bl	8000a2c <HAL_GetTick>
 8000fc2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fc4:	e021      	b.n	800100a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fcc:	d01d      	beq.n	800100a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d007      	beq.n	8000fe4 <HAL_ADC_PollForConversion+0xc8>
 8000fd4:	f7ff fd2a 	bl	8000a2c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d212      	bcs.n	800100a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10b      	bne.n	800100a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f043 0204 	orr.w	r2, r3, #4
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e04f      	b.n	80010aa <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	4013      	ands	r3, r2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0d6      	beq.n	8000fc6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800102e:	2b00      	cmp	r3, #0
 8001030:	d131      	bne.n	8001096 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001038:	2b00      	cmp	r3, #0
 800103a:	d12c      	bne.n	8001096 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b08      	cmp	r3, #8
 8001048:	d125      	bne.n	8001096 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d112      	bne.n	800107e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d112      	bne.n	8001096 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40
 800107c:	e00b      	b.n	8001096 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f043 0220 	orr.w	r2, r3, #32
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f043 0201 	orr.w	r2, r3, #1
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	50000300 	.word	0x50000300

080010b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b09b      	sub	sp, #108	@ 0x6c
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_ConfigChannel+0x22>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e2a1      	b.n	800163a <HAL_ADC_ConfigChannel+0x566>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 8285 	bne.w	8001618 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d81c      	bhi.n	8001150 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	461a      	mov	r2, r3
 800112a:	231f      	movs	r3, #31
 800112c:	4093      	lsls	r3, r2
 800112e:	43db      	mvns	r3, r3
 8001130:	4019      	ands	r1, r3
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa00 f203 	lsl.w	r2, r0, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30
 800114e:	e063      	b.n	8001218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b09      	cmp	r3, #9
 8001156:	d81e      	bhi.n	8001196 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	3b1e      	subs	r3, #30
 800116c:	221f      	movs	r2, #31
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	4019      	ands	r1, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	3b1e      	subs	r3, #30
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
 8001194:	e040      	b.n	8001218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b0e      	cmp	r3, #14
 800119c:	d81e      	bhi.n	80011dc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4613      	mov	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4413      	add	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	3b3c      	subs	r3, #60	@ 0x3c
 80011b2:	221f      	movs	r2, #31
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4019      	ands	r1, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4413      	add	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	3b3c      	subs	r3, #60	@ 0x3c
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80011da:	e01d      	b.n	8001218 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	3b5a      	subs	r3, #90	@ 0x5a
 80011f0:	221f      	movs	r2, #31
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	4019      	ands	r1, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	3b5a      	subs	r3, #90	@ 0x5a
 800120c:	fa00 f203 	lsl.w	r2, r0, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	f040 80e5 	bne.w	80013f2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b09      	cmp	r3, #9
 800122e:	d91c      	bls.n	800126a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6999      	ldr	r1, [r3, #24]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	4019      	ands	r1, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	3b1e      	subs	r3, #30
 800125c:	fa00 f203 	lsl.w	r2, r0, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	619a      	str	r2, [r3, #24]
 8001268:	e019      	b.n	800129e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6959      	ldr	r1, [r3, #20]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	2207      	movs	r2, #7
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4019      	ands	r1, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6898      	ldr	r0, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	fa00 f203 	lsl.w	r2, r0, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	695a      	ldr	r2, [r3, #20]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	08db      	lsrs	r3, r3, #3
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	2b03      	cmp	r3, #3
 80012be:	d84f      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0x28c>
 80012c0:	a201      	add	r2, pc, #4	@ (adr r2, 80012c8 <HAL_ADC_ConfigChannel+0x1f4>)
 80012c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c6:	bf00      	nop
 80012c8:	080012d9 	.word	0x080012d9
 80012cc:	080012fb 	.word	0x080012fb
 80012d0:	0800131d 	.word	0x0800131d
 80012d4:	0800133f 	.word	0x0800133f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012de:	4b9c      	ldr	r3, [pc, #624]	@ (8001550 <HAL_ADC_ConfigChannel+0x47c>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	0691      	lsls	r1, r2, #26
 80012e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80012ea:	430a      	orrs	r2, r1
 80012ec:	431a      	orrs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80012f6:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80012f8:	e07b      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001300:	4b93      	ldr	r3, [pc, #588]	@ (8001550 <HAL_ADC_ConfigChannel+0x47c>)
 8001302:	4013      	ands	r3, r2
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	0691      	lsls	r1, r2, #26
 800130a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800130c:	430a      	orrs	r2, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001318:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800131a:	e06a      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001322:	4b8b      	ldr	r3, [pc, #556]	@ (8001550 <HAL_ADC_ConfigChannel+0x47c>)
 8001324:	4013      	ands	r3, r2
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	0691      	lsls	r1, r2, #26
 800132c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800132e:	430a      	orrs	r2, r1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800133a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800133c:	e059      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001344:	4b82      	ldr	r3, [pc, #520]	@ (8001550 <HAL_ADC_ConfigChannel+0x47c>)
 8001346:	4013      	ands	r3, r2
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	0691      	lsls	r1, r2, #26
 800134e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001350:	430a      	orrs	r2, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800135c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800135e:	e048      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	069b      	lsls	r3, r3, #26
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001382:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800138a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	069b      	lsls	r3, r3, #26
 8001394:	429a      	cmp	r2, r3
 8001396:	d107      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80013a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80013ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	069b      	lsls	r3, r3, #26
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d107      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80013ca:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80013d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	069b      	lsls	r3, r3, #26
 80013dc:	429a      	cmp	r2, r3
 80013de:	d107      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80013ee:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80013f0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d108      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x33e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x33e>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_ADC_ConfigChannel+0x340>
 8001412:	2300      	movs	r3, #0
 8001414:	2b00      	cmp	r3, #0
 8001416:	f040 810a 	bne.w	800162e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d00f      	beq.n	8001442 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2201      	movs	r2, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43da      	mvns	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	400a      	ands	r2, r1
 800143c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001440:	e049      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	409a      	lsls	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b09      	cmp	r3, #9
 8001462:	d91c      	bls.n	800149e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6999      	ldr	r1, [r3, #24]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	3b1b      	subs	r3, #27
 8001476:	2207      	movs	r2, #7
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	4019      	ands	r1, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	6898      	ldr	r0, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	3b1b      	subs	r3, #27
 8001490:	fa00 f203 	lsl.w	r2, r0, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	430a      	orrs	r2, r1
 800149a:	619a      	str	r2, [r3, #24]
 800149c:	e01b      	b.n	80014d6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6959      	ldr	r1, [r3, #20]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	2207      	movs	r2, #7
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	4019      	ands	r1, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	6898      	ldr	r0, [r3, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	fa00 f203 	lsl.w	r2, r0, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <HAL_ADC_ConfigChannel+0x480>)
 80014d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d105      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80014f2:	2b11      	cmp	r3, #17
 80014f4:	d105      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80014f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d00b      	beq.n	800151a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001506:	2b12      	cmp	r3, #18
 8001508:	f040 8091 	bne.w	800162e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800150c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 808a 	bne.w	800162e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001522:	d102      	bne.n	800152a <HAL_ADC_ConfigChannel+0x456>
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_ADC_ConfigChannel+0x484>)
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	e002      	b.n	8001530 <HAL_ADC_ConfigChannel+0x45c>
 800152a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800152e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d10e      	bne.n	800155c <HAL_ADC_ConfigChannel+0x488>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d107      	bne.n	800155c <HAL_ADC_ConfigChannel+0x488>
 800154c:	2301      	movs	r3, #1
 800154e:	e006      	b.n	800155e <HAL_ADC_ConfigChannel+0x48a>
 8001550:	83fff000 	.word	0x83fff000
 8001554:	50000300 	.word	0x50000300
 8001558:	50000100 	.word	0x50000100
 800155c:	2300      	movs	r3, #0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d150      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001562:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001564:	2b00      	cmp	r3, #0
 8001566:	d010      	beq.n	800158a <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b01      	cmp	r3, #1
 8001572:	d107      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x4b0>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x4b0>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <HAL_ADC_ConfigChannel+0x4b2>
 8001584:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001586:	2b00      	cmp	r3, #0
 8001588:	d13c      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d11d      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4fa>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800159a:	d118      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800159c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80015a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <HAL_ADC_ConfigChannel+0x574>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a27      	ldr	r2, [pc, #156]	@ (800164c <HAL_ADC_ConfigChannel+0x578>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9a      	lsrs	r2, r3, #18
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015be:	e002      	b.n	80015c6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f9      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015cc:	e02e      	b.n	800162c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d10b      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x51a>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015de:	d106      	bne.n	80015ee <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80015e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80015e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80015ec:	e01e      	b.n	800162c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b12      	cmp	r3, #18
 80015f4:	d11a      	bne.n	800162c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80015f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001600:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001602:	e013      	b.n	800162c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001616:	e00a      	b.n	800162e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800162a:	e000      	b.n	800162e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800162c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001636:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800163a:	4618      	mov	r0, r3
 800163c:	376c      	adds	r7, #108	@ 0x6c
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000000 	.word	0x20000000
 800164c:	431bde83 	.word	0x431bde83

08001650 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001650:	b480      	push	{r7}
 8001652:	b099      	sub	sp, #100	@ 0x64
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001668:	d102      	bne.n	8001670 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800166a:	4b5a      	ldr	r3, [pc, #360]	@ (80017d4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	e002      	b.n	8001676 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001670:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001674:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e0a2      	b.n	80017c6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800168a:	2302      	movs	r3, #2
 800168c:	e09b      	b.n	80017c6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d17f      	bne.n	80017a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d179      	bne.n	80017a4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b0:	4b49      	ldr	r3, [pc, #292]	@ (80017d8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80016b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d040      	beq.n	800173e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80016bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	6859      	ldr	r1, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016ce:	035b      	lsls	r3, r3, #13
 80016d0:	430b      	orrs	r3, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016d6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d108      	bne.n	80016f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80016f8:	2300      	movs	r3, #0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d15c      	bne.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800171a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800171c:	2b00      	cmp	r3, #0
 800171e:	d14b      	bne.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001728:	f023 030f 	bic.w	r3, r3, #15
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	6811      	ldr	r1, [r2, #0]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	6892      	ldr	r2, [r2, #8]
 8001734:	430a      	orrs	r2, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800173a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800173c:	e03c      	b.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800173e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001748:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800176a:	2300      	movs	r3, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d123      	bne.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800178c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d112      	bne.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800179a:	f023 030f 	bic.w	r3, r3, #15
 800179e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80017a0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017a2:	e009      	b.n	80017b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f043 0220 	orr.w	r2, r3, #32
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80017b6:	e000      	b.n	80017ba <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80017b8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80017c6:	4618      	mov	r0, r3
 80017c8:	3764      	adds	r7, #100	@ 0x64
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	50000100 	.word	0x50000100
 80017d8:	50000300 	.word	0x50000300

080017dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d108      	bne.n	8001808 <ADC_Enable+0x2c>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <ADC_Enable+0x2c>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <ADC_Enable+0x2e>
 8001808:	2300      	movs	r3, #0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d143      	bne.n	8001896 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <ADC_Enable+0xc4>)
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00d      	beq.n	8001838 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f043 0210 	orr.w	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e02f      	b.n	8001898 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 0201 	orr.w	r2, r2, #1
 8001846:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001848:	f7ff f8f0 	bl	8000a2c <HAL_GetTick>
 800184c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800184e:	e01b      	b.n	8001888 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001850:	f7ff f8ec 	bl	8000a2c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d914      	bls.n	8001888 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00d      	beq.n	8001888 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f043 0210 	orr.w	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e007      	b.n	8001898 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d1dc      	bne.n	8001850 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	8000003f 	.word	0x8000003f

080018a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <ADC_Disable+0x2c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <ADC_Disable+0x2c>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <ADC_Disable+0x2e>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d047      	beq.n	8001966 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030d 	and.w	r3, r3, #13
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d10f      	bne.n	8001904 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0202 	orr.w	r2, r2, #2
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2203      	movs	r2, #3
 80018fa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80018fc:	f7ff f896 	bl	8000a2c <HAL_GetTick>
 8001900:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001902:	e029      	b.n	8001958 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001908:	f043 0210 	orr.w	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e023      	b.n	8001968 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001920:	f7ff f884 	bl	8000a2c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d914      	bls.n	8001958 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10d      	bne.n	8001958 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f043 0210 	orr.w	r2, r3, #16
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e007      	b.n	8001968 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b01      	cmp	r3, #1
 8001964:	d0dc      	beq.n	8001920 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff47 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5c 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e14e      	b.n	8001dea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8140 	beq.w	8001de4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_GPIO_Init+0x40>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d017      	beq.n	8001c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	6939      	ldr	r1, [r7, #16]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 809a 	beq.w	8001de4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b55      	ldr	r3, [pc, #340]	@ (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a54      	ldr	r2, [pc, #336]	@ (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b52      	ldr	r3, [pc, #328]	@ (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc8:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1e0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a46      	ldr	r2, [pc, #280]	@ (8001e10 <HAL_GPIO_Init+0x2d4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1dc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a45      	ldr	r2, [pc, #276]	@ (8001e14 <HAL_GPIO_Init+0x2d8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1d8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a44      	ldr	r2, [pc, #272]	@ (8001e18 <HAL_GPIO_Init+0x2dc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1d4>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e006      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d10:	2305      	movs	r3, #5
 8001d12:	e004      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_GPIO_Init+0x1e2>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	f002 0203 	and.w	r2, r2, #3
 8001d24:	0092      	lsls	r2, r2, #2
 8001d26:	4093      	lsls	r3, r2
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d2e:	4937      	ldr	r1, [pc, #220]	@ (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3c:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d60:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d66:	4b2d      	ldr	r3, [pc, #180]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d8a:	4a24      	ldr	r2, [pc, #144]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d90:	4b22      	ldr	r3, [pc, #136]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001db4:	4a19      	ldr	r2, [pc, #100]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dba:	4b18      	ldr	r3, [pc, #96]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dde:	4a0f      	ldr	r2, [pc, #60]	@ (8001e1c <HAL_GPIO_Init+0x2e0>)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f47f aea9 	bne.w	8001b4c <HAL_GPIO_Init+0x10>
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	48000400 	.word	0x48000400
 8001e14:	48000800 	.word	0x48000800
 8001e18:	48000c00 	.word	0x48000c00
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	f001 b823 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 817d 	beq.w	8002156 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e5c:	4bbc      	ldr	r3, [pc, #752]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e68:	4bb9      	ldr	r3, [pc, #740]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d15c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x10e>
 8001e74:	4bb6      	ldr	r3, [pc, #728]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e80:	d155      	bne.n	8001f2e <HAL_RCC_OscConfig+0x10e>
 8001e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e86:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e96:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x94>
 8001eae:	4ba8      	ldr	r3, [pc, #672]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e015      	b.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eb8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ec8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ecc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ed0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001edc:	4b9c      	ldr	r3, [pc, #624]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001ee8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001eec:	fa92 f2a2 	rbit	r2, r2
 8001ef0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ef4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	f002 021f 	and.w	r2, r2, #31
 8001f08:	2101      	movs	r1, #1
 8001f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 811f 	beq.w	8002154 <HAL_RCC_OscConfig+0x334>
 8001f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f040 8116 	bne.w	8002154 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f000 bfaf 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12e>
 8001f40:	4b83      	ldr	r3, [pc, #524]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a82      	ldr	r2, [pc, #520]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	e036      	b.n	8001fbc <HAL_RCC_OscConfig+0x19c>
 8001f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x158>
 8001f5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7b      	ldr	r2, [pc, #492]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b79      	ldr	r3, [pc, #484]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a78      	ldr	r2, [pc, #480]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e021      	b.n	8001fbc <HAL_RCC_OscConfig+0x19c>
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x184>
 8001f8a:	4b71      	ldr	r3, [pc, #452]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a70      	ldr	r2, [pc, #448]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b6e      	ldr	r3, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a6d      	ldr	r2, [pc, #436]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x19c>
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a69      	ldr	r2, [pc, #420]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b67      	ldr	r3, [pc, #412]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a66      	ldr	r2, [pc, #408]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001fb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fbc:	4b64      	ldr	r3, [pc, #400]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	f023 020f 	bic.w	r2, r3, #15
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	495f      	ldr	r1, [pc, #380]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d059      	beq.n	800209a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fd21 	bl	8000a2c <HAL_GetTick>
 8001fea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fd1c 	bl	8000a2c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	@ 0x64
 8001ffe:	d902      	bls.n	8002006 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	f000 bf43 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002006:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800200a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800201a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0x218>
 8002032:	4b47      	ldr	r3, [pc, #284]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	e015      	b.n	8002064 <HAL_RCC_OscConfig+0x244>
 8002038:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800203c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800204c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002050:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002054:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002058:	fa93 f3a3 	rbit	r3, r3
 800205c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002068:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800206c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002070:	fa92 f2a2 	rbit	r2, r2
 8002074:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002078:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f042 0220 	orr.w	r2, r2, #32
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f002 021f 	and.w	r2, r2, #31
 800208c:	2101      	movs	r1, #1
 800208e:	fa01 f202 	lsl.w	r2, r1, r2
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ab      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x1d0>
 8002098:	e05d      	b.n	8002156 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7fe fcc7 	bl	8000a2c <HAL_GetTick>
 800209e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fcc2 	bl	8000a2c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	@ 0x64
 80020b2:	d902      	bls.n	80020ba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	f000 bee9 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 80020ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80020ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_OscConfig+0x2cc>
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e015      	b.n	8002118 <HAL_RCC_OscConfig+0x2f8>
 80020ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020f0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80020f8:	fa93 f3a3 	rbit	r3, r3
 80020fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002100:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002104:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002108:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_RCC_OscConfig+0x330>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800211c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002120:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800212c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ab      	bne.n	80020a4 <HAL_RCC_OscConfig+0x284>
 800214c:	e003      	b.n	8002156 <HAL_RCC_OscConfig+0x336>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 817d 	beq.w	8002466 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800216c:	4ba6      	ldr	r3, [pc, #664]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002178:	4ba3      	ldr	r3, [pc, #652]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d172      	bne.n	800226a <HAL_RCC_OscConfig+0x44a>
 8002184:	4ba0      	ldr	r3, [pc, #640]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d16c      	bne.n	800226a <HAL_RCC_OscConfig+0x44a>
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80021a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x3a0>
 80021ba:	4b93      	ldr	r3, [pc, #588]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e013      	b.n	80021e8 <HAL_RCC_OscConfig+0x3c8>
 80021c0:	2302      	movs	r3, #2
 80021c2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80021e4:	4b88      	ldr	r3, [pc, #544]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	2202      	movs	r2, #2
 80021ea:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80021ee:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021f2:	fa92 f2a2 	rbit	r2, r2
 80021f6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80021fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	f042 0220 	orr.w	r2, r2, #32
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f002 021f 	and.w	r2, r2, #31
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f202 	lsl.w	r2, r1, r2
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCC_OscConfig+0x410>
 800221a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d002      	beq.n	8002230 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f000 be2e 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b75      	ldr	r3, [pc, #468]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	21f8      	movs	r1, #248	@ 0xf8
 8002246:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800224e:	fa91 f1a1 	rbit	r1, r1
 8002252:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002256:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800225a:	fab1 f181 	clz	r1, r1
 800225e:	b2c9      	uxtb	r1, r1
 8002260:	408b      	lsls	r3, r1
 8002262:	4969      	ldr	r1, [pc, #420]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002268:	e0fd      	b.n	8002466 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 8088 	beq.w	800238c <HAL_RCC_OscConfig+0x56c>
 800227c:	2301      	movs	r3, #1
 800227e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800228e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800229c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	461a      	mov	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7fe fbc0 	bl	8000a2c <HAL_GetTick>
 80022ac:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7fe fbbb 	bl	8000a2c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d902      	bls.n	80022c8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	f000 bde2 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 80022c8:	2302      	movs	r3, #2
 80022ca:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d102      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4d8>
 80022f2:	4b45      	ldr	r3, [pc, #276]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	e013      	b.n	8002320 <HAL_RCC_OscConfig+0x500>
 80022f8:	2302      	movs	r3, #2
 80022fa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800230a:	2302      	movs	r3, #2
 800230c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002310:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800231c:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	2202      	movs	r2, #2
 8002322:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002326:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800232a:	fa92 f2a2 	rbit	r2, r2
 800232e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002332:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0af      	beq.n	80022b2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002352:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800235a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	21f8      	movs	r1, #248	@ 0xf8
 8002368:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002370:	fa91 f1a1 	rbit	r1, r1
 8002374:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002378:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800237c:	fab1 f181 	clz	r1, r1
 8002380:	b2c9      	uxtb	r1, r1
 8002382:	408b      	lsls	r3, r1
 8002384:	4920      	ldr	r1, [pc, #128]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
 800238a:	e06c      	b.n	8002466 <HAL_RCC_OscConfig+0x646>
 800238c:	2301      	movs	r3, #1
 800238e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800239e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fb38 	bl	8000a2c <HAL_GetTick>
 80023bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c2:	f7fe fb33 	bl	8000a2c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d902      	bls.n	80023d8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	f000 bd5a 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 80023d8:	2302      	movs	r3, #2
 80023da:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023e2:	fa93 f3a3 	rbit	r3, r3
 80023e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80023ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d104      	bne.n	800240c <HAL_RCC_OscConfig+0x5ec>
 8002402:	4b01      	ldr	r3, [pc, #4]	@ (8002408 <HAL_RCC_OscConfig+0x5e8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e015      	b.n	8002434 <HAL_RCC_OscConfig+0x614>
 8002408:	40021000 	.word	0x40021000
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800241e:	2302      	movs	r3, #2
 8002420:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002424:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002430:	4bc8      	ldr	r3, [pc, #800]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	2202      	movs	r2, #2
 8002436:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800243a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800243e:	fa92 f2a2 	rbit	r2, r2
 8002442:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002446:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800244a:	fab2 f282 	clz	r2, r2
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	f042 0220 	orr.w	r2, r2, #32
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	f002 021f 	and.w	r2, r2, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f202 	lsl.w	r2, r1, r2
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1ad      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8110 	beq.w	800269c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d079      	beq.n	8002580 <HAL_RCC_OscConfig+0x760>
 800248c:	2301      	movs	r3, #1
 800248e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002496:	fa93 f3a3 	rbit	r3, r3
 800249a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800249e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	4bab      	ldr	r3, [pc, #684]	@ (8002758 <HAL_RCC_OscConfig+0x938>)
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	461a      	mov	r2, r3
 80024b2:	2301      	movs	r3, #1
 80024b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fab9 	bl	8000a2c <HAL_GetTick>
 80024ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe fab4 	bl	8000a2c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d902      	bls.n	80024d6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f000 bcdb 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 80024d6:	2302      	movs	r3, #2
 80024d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024e0:	fa93 f3a3 	rbit	r3, r3
 80024e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024f0:	2202      	movs	r2, #2
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	fa93 f2a3 	rbit	r2, r3
 8002502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002514:	2202      	movs	r2, #2
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800252e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002530:	4b88      	ldr	r3, [pc, #544]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 8002532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800253c:	2102      	movs	r1, #2
 800253e:	6019      	str	r1, [r3, #0]
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	fa93 f1a3 	rbit	r1, r3
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002556:	6019      	str	r1, [r3, #0]
  return result;
 8002558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2101      	movs	r1, #1
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0a0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x6a0>
 800257e:	e08d      	b.n	800269c <HAL_RCC_OscConfig+0x87c>
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002588:	2201      	movs	r2, #1
 800258a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002590:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025a2:	601a      	str	r2, [r3, #0]
  return result;
 80025a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b68      	ldr	r3, [pc, #416]	@ (8002758 <HAL_RCC_OscConfig+0x938>)
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	2300      	movs	r3, #0
 80025c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fa33 	bl	8000a2c <HAL_GetTick>
 80025c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025cc:	f7fe fa2e 	bl	8000a2c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d902      	bls.n	80025e2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	f000 bc55 	b.w	8002e8c <HAL_RCC_OscConfig+0x106c>
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ea:	2202      	movs	r2, #2
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002600:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800260e:	2202      	movs	r2, #2
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002616:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	fa93 f2a3 	rbit	r2, r3
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800264c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264e:	4b41      	ldr	r3, [pc, #260]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 8002650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800265a:	2102      	movs	r1, #2
 800265c:	6019      	str	r1, [r3, #0]
 800265e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002662:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	fa93 f1a3 	rbit	r1, r3
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002674:	6019      	str	r1, [r3, #0]
  return result;
 8002676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800268a:	b2db      	uxtb	r3, r3
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	2101      	movs	r1, #1
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d197      	bne.n	80025cc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 81a1 	beq.w	80029f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d116      	bne.n	80026f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	4a22      	ldr	r2, [pc, #136]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	61d3      	str	r3, [r2, #28]
 80026d0:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <HAL_RCC_OscConfig+0x93c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d11a      	bne.n	8002734 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <HAL_RCC_OscConfig+0x93c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a16      	ldr	r2, [pc, #88]	@ (800275c <HAL_RCC_OscConfig+0x93c>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe f98f 	bl	8000a2c <HAL_GetTick>
 800270e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	e009      	b.n	8002728 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe f98a 	bl	8000a2c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b64      	cmp	r3, #100	@ 0x64
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e3b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <HAL_RCC_OscConfig+0x93c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ef      	beq.n	8002714 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002738:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_OscConfig+0x940>
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a02      	ldr	r2, [pc, #8]	@ (8002754 <HAL_RCC_OscConfig+0x934>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e03c      	b.n	80027cc <HAL_RCC_OscConfig+0x9ac>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	10908120 	.word	0x10908120
 800275c:	40007000 	.word	0x40007000
 8002760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002764:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10c      	bne.n	800278a <HAL_RCC_OscConfig+0x96a>
 8002770:	4bc1      	ldr	r3, [pc, #772]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4ac0      	ldr	r2, [pc, #768]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	4bbe      	ldr	r3, [pc, #760]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4abd      	ldr	r2, [pc, #756]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002782:	f023 0304 	bic.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	e020      	b.n	80027cc <HAL_RCC_OscConfig+0x9ac>
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	2b05      	cmp	r3, #5
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x994>
 800279a:	4bb7      	ldr	r3, [pc, #732]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4ab6      	ldr	r2, [pc, #728]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027a0:	f043 0304 	orr.w	r3, r3, #4
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	4bb4      	ldr	r3, [pc, #720]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	4ab3      	ldr	r2, [pc, #716]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6213      	str	r3, [r2, #32]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0x9ac>
 80027b4:	4bb0      	ldr	r3, [pc, #704]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4aaf      	ldr	r2, [pc, #700]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027ba:	f023 0301 	bic.w	r3, r3, #1
 80027be:	6213      	str	r3, [r2, #32]
 80027c0:	4bad      	ldr	r3, [pc, #692]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	4aac      	ldr	r2, [pc, #688]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8081 	beq.w	80028e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027de:	f7fe f925 	bl	8000a2c <HAL_GetTick>
 80027e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e8:	f7fe f920 	bl	8000a2c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e345      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002808:	2202      	movs	r2, #2
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800282c:	2202      	movs	r2, #2
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002834:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002842:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002846:	601a      	str	r2, [r3, #0]
  return result;
 8002848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002850:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d102      	bne.n	800286c <HAL_RCC_OscConfig+0xa4c>
 8002866:	4b84      	ldr	r3, [pc, #528]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	e013      	b.n	8002894 <HAL_RCC_OscConfig+0xa74>
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002874:	2202      	movs	r2, #2
 8002876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800288a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002898:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800289c:	2102      	movs	r1, #2
 800289e:	6011      	str	r1, [r2, #0]
 80028a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	fa92 f1a2 	rbit	r1, r2
 80028ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028b6:	6011      	str	r1, [r2, #0]
  return result;
 80028b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028bc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	fab2 f282 	clz	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	f002 021f 	and.w	r2, r2, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f202 	lsl.w	r2, r1, r2
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d084      	beq.n	80027e8 <HAL_RCC_OscConfig+0x9c8>
 80028de:	e07f      	b.n	80029e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe f8a4 	bl	8000a2c <HAL_GetTick>
 80028e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe f89f 	bl	8000a2c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e2c4      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800290a:	2202      	movs	r2, #2
 800290c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f2a3 	rbit	r2, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800292e:	2202      	movs	r2, #2
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002936:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002948:	601a      	str	r2, [r3, #0]
  return result;
 800294a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002952:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	b2db      	uxtb	r3, r3
 800295e:	f043 0302 	orr.w	r3, r3, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d102      	bne.n	800296e <HAL_RCC_OscConfig+0xb4e>
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	e013      	b.n	8002996 <HAL_RCC_OscConfig+0xb76>
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002976:	2202      	movs	r2, #2
 8002978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4b39      	ldr	r3, [pc, #228]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800299e:	2102      	movs	r1, #2
 80029a0:	6011      	str	r1, [r2, #0]
 80029a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	fa92 f1a2 	rbit	r1, r2
 80029b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029b8:	6011      	str	r1, [r2, #0]
  return result;
 80029ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	fab2 f282 	clz	r2, r2
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	f002 021f 	and.w	r2, r2, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d184      	bne.n	80028ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a22      	ldr	r2, [pc, #136]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8242 	beq.w	8002e8a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a06:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <HAL_RCC_OscConfig+0xc58>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	f000 8213 	beq.w	8002e3a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	f040 8162 	bne.w	8002cea <HAL_RCC_OscConfig+0xeca>
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a38:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a46:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a4a:	601a      	str	r2, [r3, #0]
  return result;
 8002a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a50:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	fab3 f383 	clz	r3, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	461a      	mov	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fd ffde 	bl	8000a2c <HAL_GetTick>
 8002a70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a74:	e00c      	b.n	8002a90 <HAL_RCC_OscConfig+0xc70>
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fd ffd6 	bl	8000a2c <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1fd      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a94:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ab4:	601a      	str	r2, [r3, #0]
  return result;
 8002ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002abe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_OscConfig+0xcba>
 8002ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	e027      	b.n	8002b2a <HAL_RCC_OscConfig+0xd0a>
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	fa93 f2a3 	rbit	r2, r3
 8002af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b20:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	4b9c      	ldr	r3, [pc, #624]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b2e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b32:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b36:	6011      	str	r1, [r2, #0]
 8002b38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b3c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	fa92 f1a2 	rbit	r1, r2
 8002b46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b4a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b4e:	6011      	str	r1, [r2, #0]
  return result;
 8002b50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b54:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	f002 021f 	and.w	r2, r2, #31
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d182      	bne.n	8002a7c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b76:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	497f      	ldr	r1, [pc, #508]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ba6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	fa93 f2a3 	rbit	r2, r3
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bc2:	601a      	str	r2, [r3, #0]
  return result;
 8002bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bcc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bd8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	2301      	movs	r3, #1
 8002be2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fd ff22 	bl	8000a2c <HAL_GetTick>
 8002be8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e009      	b.n	8002c02 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fd ff1d 	bl	8000a2c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e144      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c26:	601a      	str	r2, [r3, #0]
  return result;
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d102      	bne.n	8002c4c <HAL_RCC_OscConfig+0xe2c>
 8002c46:	4b54      	ldr	r3, [pc, #336]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	e027      	b.n	8002c9c <HAL_RCC_OscConfig+0xe7c>
 8002c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c50:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	fa93 f2a3 	rbit	r2, r3
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c76:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c84:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b3f      	ldr	r3, [pc, #252]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ca4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ca8:	6011      	str	r1, [r2, #0]
 8002caa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	fa92 f1a2 	rbit	r1, r2
 8002cb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cbc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cc0:	6011      	str	r1, [r2, #0]
  return result;
 8002cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cc6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	f042 0220 	orr.w	r2, r2, #32
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f002 021f 	and.w	r2, r2, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d082      	beq.n	8002bee <HAL_RCC_OscConfig+0xdce>
 8002ce8:	e0cf      	b.n	8002e8a <HAL_RCC_OscConfig+0x106a>
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cf2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	fa93 f2a3 	rbit	r2, r3
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d0e:	601a      	str	r2, [r3, #0]
  return result;
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7fd fe7c 	bl	8000a2c <HAL_GetTick>
 8002d34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	e009      	b.n	8002d4e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3a:	f7fd fe77 	bl	8000a2c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e09e      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	fa93 f2a3 	rbit	r2, r3
 8002d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d72:	601a      	str	r2, [r3, #0]
  return result;
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d104      	bne.n	8002d9c <HAL_RCC_OscConfig+0xf7c>
 8002d92:	4b01      	ldr	r3, [pc, #4]	@ (8002d98 <HAL_RCC_OscConfig+0xf78>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	e029      	b.n	8002dec <HAL_RCC_OscConfig+0xfcc>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002da4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	fa93 f2a3 	rbit	r2, r3
 8002db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dbc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	fa93 f2a3 	rbit	r2, r3
 8002dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002de2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e98 <HAL_RCC_OscConfig+0x1078>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002df4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002dfe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fa92 f1a2 	rbit	r1, r2
 8002e08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e10:	6011      	str	r1, [r2, #0]
  return result;
 8002e12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	fab2 f282 	clz	r2, r2
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	f042 0220 	orr.w	r2, r2, #32
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	f002 021f 	and.w	r2, r2, #31
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d180      	bne.n	8002d3a <HAL_RCC_OscConfig+0xf1a>
 8002e38:	e027      	b.n	8002e8a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01e      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e4e:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_RCC_OscConfig+0x1078>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e5a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b09e      	sub	sp, #120	@ 0x78
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e162      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b90      	ldr	r3, [pc, #576]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d910      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 0207 	bic.w	r2, r3, #7
 8002eca:	498b      	ldr	r1, [pc, #556]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b89      	ldr	r3, [pc, #548]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e14a      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef0:	4b82      	ldr	r3, [pc, #520]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	497f      	ldr	r1, [pc, #508]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80dc 	beq.w	80030c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d13c      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xf6>
 8002f18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xa6>
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	e00f      	b.n	8002f62 <HAL_RCC_ClockConfig+0xc6>
 8002f42:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f5e:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f66:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f6a:	fa92 f2a2 	rbit	r2, r2
 8002f6e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f72:	fab2 f282 	clz	r2, r2
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f042 0220 	orr.w	r2, r2, #32
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	f002 021f 	and.w	r2, r2, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f202 	lsl.w	r2, r1, r2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d17b      	bne.n	8003086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0f3      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d13c      	bne.n	8003014 <HAL_RCC_ClockConfig+0x178>
 8002f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	095b      	lsrs	r3, r3, #5
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x128>
 8002fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	e00f      	b.n	8002fe4 <HAL_RCC_ClockConfig+0x148>
 8002fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fe0:	4b46      	ldr	r3, [pc, #280]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fec:	fa92 f2a2 	rbit	r2, r2
 8002ff0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff4:	fab2 f282 	clz	r2, r2
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	f042 0220 	orr.w	r2, r2, #32
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	f002 021f 	and.w	r2, r2, #31
 8003004:	2101      	movs	r1, #1
 8003006:	fa01 f202 	lsl.w	r2, r1, r2
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d13a      	bne.n	8003086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b2      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
 8003014:	2302      	movs	r3, #2
 8003016:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_RCC_ClockConfig+0x1a0>
 8003036:	4b31      	ldr	r3, [pc, #196]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e00d      	b.n	8003058 <HAL_RCC_ClockConfig+0x1bc>
 800303c:	2302      	movs	r3, #2
 800303e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	627b      	str	r3, [r7, #36]	@ 0x24
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	2202      	movs	r2, #2
 800305a:	61ba      	str	r2, [r7, #24]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	fa92 f2a2 	rbit	r2, r2
 8003062:	617a      	str	r2, [r7, #20]
  return result;
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	f002 021f 	and.w	r2, r2, #31
 8003076:	2101      	movs	r1, #1
 8003078:	fa01 f202 	lsl.w	r2, r1, r2
 800307c:	4013      	ands	r3, r2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e079      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003086:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	491a      	ldr	r1, [pc, #104]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003098:	f7fd fcc8 	bl	8000a2c <HAL_GetTick>
 800309c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030a0:	f7fd fcc4 	bl	8000a2c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e061      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030b6:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_ClockConfig+0x260>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 020c 	and.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d1eb      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d214      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 0207 	bic.w	r2, r3, #7
 80030de:	4906      	ldr	r1, [pc, #24]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e6:	4b04      	ldr	r3, [pc, #16]	@ (80030f8 <HAL_RCC_ClockConfig+0x25c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d005      	beq.n	8003100 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e040      	b.n	800317a <HAL_RCC_ClockConfig+0x2de>
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	491a      	ldr	r1, [pc, #104]	@ (8003184 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <HAL_RCC_ClockConfig+0x2e8>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4912      	ldr	r1, [pc, #72]	@ (8003184 <HAL_RCC_ClockConfig+0x2e8>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800313e:	f000 f829 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003142:	4601      	mov	r1, r0
 8003144:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <HAL_RCC_ClockConfig+0x2e8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800314c:	22f0      	movs	r2, #240	@ 0xf0
 800314e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	fa92 f2a2 	rbit	r2, r2
 8003156:	60fa      	str	r2, [r7, #12]
  return result;
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fab2 f282 	clz	r2, r2
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	40d3      	lsrs	r3, r2
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x2ec>)
 8003164:	5cd3      	ldrb	r3, [r2, r3]
 8003166:	fa21 f303 	lsr.w	r3, r1, r3
 800316a:	4a08      	ldr	r2, [pc, #32]	@ (800318c <HAL_RCC_ClockConfig+0x2f0>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_RCC_ClockConfig+0x2f4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fc16 	bl	80009a4 <HAL_InitTick>
  
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3778      	adds	r7, #120	@ 0x78
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	080046e0 	.word	0x080046e0
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	2300      	movs	r3, #0
 80031a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x94>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x30>
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x36>
 80031c2:	e026      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCC_GetSysClockFreq+0x98>)
 80031c6:	613b      	str	r3, [r7, #16]
      break;
 80031c8:	e026      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0c9b      	lsrs	r3, r3, #18
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	4a17      	ldr	r2, [pc, #92]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031d8:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <HAL_RCC_GetSysClockFreq+0x94>)
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	4a14      	ldr	r2, [pc, #80]	@ (8003234 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f0:	4a0e      	ldr	r2, [pc, #56]	@ (800322c <HAL_RCC_GetSysClockFreq+0x98>)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e004      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0c      	ldr	r2, [pc, #48]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003212:	4b06      	ldr	r3, [pc, #24]	@ (800322c <HAL_RCC_GetSysClockFreq+0x98>)
 8003214:	613b      	str	r3, [r7, #16]
      break;
 8003216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003218:	693b      	ldr	r3, [r7, #16]
}
 800321a:	4618      	mov	r0, r3
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	007a1200 	.word	0x007a1200
 8003230:	080046f8 	.word	0x080046f8
 8003234:	08004708 	.word	0x08004708
 8003238:	003d0900 	.word	0x003d0900

0800323c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800325a:	f7ff ffef 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325e:	4601      	mov	r1, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003268:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800326c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	fa92 f2a2 	rbit	r2, r2
 8003274:	603a      	str	r2, [r7, #0]
  return result;
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	fab2 f282 	clz	r2, r2
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	40d3      	lsrs	r3, r2
 8003280:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	080046f0 	.word	0x080046f0

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800329e:	f7ff ffcd 	bl	800323c <HAL_RCC_GetHCLKFreq>
 80032a2:	4601      	mov	r1, r0
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80032ac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80032b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	fa92 f2a2 	rbit	r2, r2
 80032b8:	603a      	str	r2, [r7, #0]
  return result;
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	fab2 f282 	clz	r2, r2
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	40d3      	lsrs	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	@ (80032d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40021000 	.word	0x40021000
 80032d8:	080046f0 	.word	0x080046f0

080032dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b092      	sub	sp, #72	@ 0x48
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80cd 	beq.w	800349a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003300:	4b86      	ldr	r3, [pc, #536]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10e      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330c:	4b83      	ldr	r3, [pc, #524]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a82      	ldr	r2, [pc, #520]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
 8003318:	4b80      	ldr	r3, [pc, #512]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b7d      	ldr	r3, [pc, #500]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d118      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b7a      	ldr	r3, [pc, #488]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a79      	ldr	r2, [pc, #484]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003340:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd fb73 	bl	8000a2c <HAL_GetTick>
 8003346:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fd fb6f 	bl	8000a2c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b64      	cmp	r3, #100	@ 0x64
 8003356:	d901      	bls.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0db      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	4b70      	ldr	r3, [pc, #448]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003368:	4b6c      	ldr	r3, [pc, #432]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003370:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d07d      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003382:	429a      	cmp	r2, r3
 8003384:	d076      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003386:	4b65      	ldr	r3, [pc, #404]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003394:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	fab3 f383 	clz	r3, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	461a      	mov	r2, r3
 80033b0:	2301      	movs	r3, #1
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80033c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	4b55      	ldr	r3, [pc, #340]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033d8:	4a50      	ldr	r2, [pc, #320]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80033da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033dc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d045      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fb20 	bl	8000a2c <HAL_GetTick>
 80033ec:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fd fb1c 	bl	8000a2c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e086      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003406:	2302      	movs	r3, #2
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
 8003412:	2302      	movs	r3, #2
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	61fb      	str	r3, [r7, #28]
  return result;
 800341e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003420:	fab3 f383 	clz	r3, r3
 8003424:	b2db      	uxtb	r3, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f043 0302 	orr.w	r3, r3, #2
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d102      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003434:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	e007      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800343a:	2302      	movs	r3, #2
 800343c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	4b35      	ldr	r3, [pc, #212]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	2202      	movs	r2, #2
 800344c:	613a      	str	r2, [r7, #16]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	60fa      	str	r2, [r7, #12]
  return result;
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	f002 021f 	and.w	r2, r2, #31
 8003468:	2101      	movs	r1, #1
 800346a:	fa01 f202 	lsl.w	r2, r1, r2
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0bd      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003474:	4b29      	ldr	r3, [pc, #164]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4926      	ldr	r1, [pc, #152]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003482:	4313      	orrs	r3, r2
 8003484:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003486:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4a22      	ldr	r2, [pc, #136]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003498:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a6:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f023 0203 	bic.w	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	491a      	ldr	r1, [pc, #104]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c4:	4b15      	ldr	r3, [pc, #84]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f023 0210 	bic.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	4912      	ldr	r1, [pc, #72]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034e2:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	490b      	ldr	r1, [pc, #44]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	4903      	ldr	r1, [pc, #12]	@ (800351c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800350e:	4313      	orrs	r3, r2
 8003510:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3748      	adds	r7, #72	@ 0x48
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000
 8003520:	40007000 	.word	0x40007000
 8003524:	10908100 	.word	0x10908100

08003528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e040      	b.n	80035bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd f92e 	bl	80007ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	@ 0x24
 8003554:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f9e8 	bl	8003944 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f8af 	bl	80036d8 <UART_SetConfig>
 800357a:	4603      	mov	r3, r0
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e01b      	b.n	80035bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fa67 	bl	8003a88 <UART_CheckIdleState>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	@ 0x28
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d177      	bne.n	80036cc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Transmit+0x24>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e070      	b.n	80036ce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	@ 0x21
 80035f8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fa:	f7fd fa17 	bl	8000a2c <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	88fa      	ldrh	r2, [r7, #6]
 8003604:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003618:	d108      	bne.n	800362c <HAL_UART_Transmit+0x68>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e003      	b.n	8003634 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003634:	e02f      	b.n	8003696 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	@ 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fac9 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d004      	beq.n	8003656 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e03b      	b.n	80036ce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	881a      	ldrh	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003668:	b292      	uxth	r2, r2
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	3302      	adds	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e007      	b.n	8003684 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1c9      	bne.n	8003636 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2140      	movs	r1, #64	@ 0x40
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fa93 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d004      	beq.n	80036c2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e005      	b.n	80036ce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	e000      	b.n	80036ce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80036cc:	2302      	movs	r3, #2
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	4b8a      	ldr	r3, [pc, #552]	@ (800392c <UART_SetConfig+0x254>)
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	6979      	ldr	r1, [r7, #20]
 800370c:	430b      	orrs	r3, r1
 800370e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a78      	ldr	r2, [pc, #480]	@ (8003930 <UART_SetConfig+0x258>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0xbe>
 8003754:	4b77      	ldr	r3, [pc, #476]	@ (8003934 <UART_SetConfig+0x25c>)
 8003756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	2b03      	cmp	r3, #3
 800375e:	d817      	bhi.n	8003790 <UART_SetConfig+0xb8>
 8003760:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <UART_SetConfig+0x90>)
 8003762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003766:	bf00      	nop
 8003768:	08003779 	.word	0x08003779
 800376c:	08003785 	.word	0x08003785
 8003770:	0800378b 	.word	0x0800378b
 8003774:	0800377f 	.word	0x0800377f
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e01d      	b.n	80037ba <UART_SetConfig+0xe2>
 800377e:	2302      	movs	r3, #2
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e01a      	b.n	80037ba <UART_SetConfig+0xe2>
 8003784:	2304      	movs	r3, #4
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e017      	b.n	80037ba <UART_SetConfig+0xe2>
 800378a:	2308      	movs	r3, #8
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e014      	b.n	80037ba <UART_SetConfig+0xe2>
 8003790:	2310      	movs	r3, #16
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e011      	b.n	80037ba <UART_SetConfig+0xe2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a67      	ldr	r2, [pc, #412]	@ (8003938 <UART_SetConfig+0x260>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d102      	bne.n	80037a6 <UART_SetConfig+0xce>
 80037a0:	2300      	movs	r3, #0
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e009      	b.n	80037ba <UART_SetConfig+0xe2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a64      	ldr	r2, [pc, #400]	@ (800393c <UART_SetConfig+0x264>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d102      	bne.n	80037b6 <UART_SetConfig+0xde>
 80037b0:	2300      	movs	r3, #0
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e001      	b.n	80037ba <UART_SetConfig+0xe2>
 80037b6:	2310      	movs	r3, #16
 80037b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037c2:	d15a      	bne.n	800387a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d827      	bhi.n	800381a <UART_SetConfig+0x142>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <UART_SetConfig+0xf8>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	080037fd 	.word	0x080037fd
 80037d8:	08003805 	.word	0x08003805
 80037dc:	0800381b 	.word	0x0800381b
 80037e0:	0800380b 	.word	0x0800380b
 80037e4:	0800381b 	.word	0x0800381b
 80037e8:	0800381b 	.word	0x0800381b
 80037ec:	0800381b 	.word	0x0800381b
 80037f0:	08003813 	.word	0x08003813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f4:	f7ff fd2e 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80037f8:	61b8      	str	r0, [r7, #24]
        break;
 80037fa:	e013      	b.n	8003824 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037fc:	f7ff fd4c 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8003800:	61b8      	str	r0, [r7, #24]
        break;
 8003802:	e00f      	b.n	8003824 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003804:	4b4e      	ldr	r3, [pc, #312]	@ (8003940 <UART_SetConfig+0x268>)
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e00c      	b.n	8003824 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380a:	f7ff fcc3 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 800380e:	61b8      	str	r0, [r7, #24]
        break;
 8003810:	e008      	b.n	8003824 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e004      	b.n	8003824 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	77bb      	strb	r3, [r7, #30]
        break;
 8003822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d074      	beq.n	8003914 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	005a      	lsls	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	085b      	lsrs	r3, r3, #1
 8003834:	441a      	add	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d916      	bls.n	8003874 <UART_SetConfig+0x19c>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384c:	d212      	bcs.n	8003874 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f023 030f 	bic.w	r3, r3, #15
 8003856:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	b29a      	uxth	r2, r3
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4313      	orrs	r3, r2
 8003868:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	89fa      	ldrh	r2, [r7, #14]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	e04f      	b.n	8003914 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	77bb      	strb	r3, [r7, #30]
 8003878:	e04c      	b.n	8003914 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800387a:	7ffb      	ldrb	r3, [r7, #31]
 800387c:	2b08      	cmp	r3, #8
 800387e:	d828      	bhi.n	80038d2 <UART_SetConfig+0x1fa>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <UART_SetConfig+0x1b0>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038ad 	.word	0x080038ad
 800388c:	080038b5 	.word	0x080038b5
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038c3 	.word	0x080038c3
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038ac:	f7ff fcd2 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80038b0:	61b8      	str	r0, [r7, #24]
        break;
 80038b2:	e013      	b.n	80038dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7ff fcf0 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 80038b8:	61b8      	str	r0, [r7, #24]
        break;
 80038ba:	e00f      	b.n	80038dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <UART_SetConfig+0x268>)
 80038be:	61bb      	str	r3, [r7, #24]
        break;
 80038c0:	e00c      	b.n	80038dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7ff fc67 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 80038c6:	61b8      	str	r0, [r7, #24]
        break;
 80038c8:	e008      	b.n	80038dc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ce:	61bb      	str	r3, [r7, #24]
        break;
 80038d0:	e004      	b.n	80038dc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	77bb      	strb	r3, [r7, #30]
        break;
 80038da:	bf00      	nop
    }

    if (pclk != 0U)
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	085a      	lsrs	r2, r3, #1
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d909      	bls.n	8003910 <UART_SetConfig+0x238>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003902:	d205      	bcs.n	8003910 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	e001      	b.n	8003914 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003920:	7fbb      	ldrb	r3, [r7, #30]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	efff69f3 	.word	0xefff69f3
 8003930:	40013800 	.word	0x40013800
 8003934:	40021000 	.word	0x40021000
 8003938:	40004400 	.word	0x40004400
 800393c:	40004800 	.word	0x40004800
 8003940:	007a1200 	.word	0x007a1200

08003944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00a      	beq.n	80039f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01a      	beq.n	8003a5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a42:	d10a      	bne.n	8003a5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b098      	sub	sp, #96	@ 0x60
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a98:	f7fc ffc8 	bl	8000a2c <HAL_GetTick>
 8003a9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d12e      	bne.n	8003b0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f88c 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d021      	beq.n	8003b0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e6      	bne.n	8003ac6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e062      	b.n	8003bd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d149      	bne.n	8003bac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b20:	2200      	movs	r2, #0
 8003b22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f856 	bl	8003bd8 <UART_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03c      	beq.n	8003bac <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e6      	bne.n	8003b32 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3308      	adds	r3, #8
 8003b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b84:	61fa      	str	r2, [r7, #28]
 8003b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b88:	69b9      	ldr	r1, [r7, #24]
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	e841 2300 	strex	r3, r2, [r1]
 8003b90:	617b      	str	r3, [r7, #20]
   return(result);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e5      	bne.n	8003b64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e011      	b.n	8003bd0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3758      	adds	r7, #88	@ 0x58
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003be8:	e04f      	b.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bf0:	d04b      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fc ff1b 	bl	8000a2c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e04e      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d037      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b80      	cmp	r3, #128	@ 0x80
 8003c1e:	d034      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	d031      	beq.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d110      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f838 	bl	8003cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2208      	movs	r2, #8
 8003c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e029      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c64:	d111      	bne.n	8003c8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f81e 	bl	8003cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e00f      	b.n	8003caa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d0a0      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b095      	sub	sp, #84	@ 0x54
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003cde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d14:	e841 2300 	strex	r3, r2, [r1]
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e5      	bne.n	8003cec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d118      	bne.n	8003d5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4a:	6979      	ldr	r1, [r7, #20]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	613b      	str	r3, [r7, #16]
   return(result);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e6      	bne.n	8003d28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d6e:	bf00      	nop
 8003d70:	3754      	adds	r7, #84	@ 0x54
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <siprintf>:
 8003d7c:	b40e      	push	{r1, r2, r3}
 8003d7e:	b500      	push	{lr}
 8003d80:	b09c      	sub	sp, #112	@ 0x70
 8003d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	9006      	str	r0, [sp, #24]
 8003d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d8c:	4809      	ldr	r0, [pc, #36]	@ (8003db4 <siprintf+0x38>)
 8003d8e:	9107      	str	r1, [sp, #28]
 8003d90:	9104      	str	r1, [sp, #16]
 8003d92:	4909      	ldr	r1, [pc, #36]	@ (8003db8 <siprintf+0x3c>)
 8003d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d98:	9105      	str	r1, [sp, #20]
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	a902      	add	r1, sp, #8
 8003da0:	f000 f89c 	bl	8003edc <_svfiprintf_r>
 8003da4:	9b02      	ldr	r3, [sp, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
 8003daa:	b01c      	add	sp, #112	@ 0x70
 8003dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db0:	b003      	add	sp, #12
 8003db2:	4770      	bx	lr
 8003db4:	2000000c 	.word	0x2000000c
 8003db8:	ffff0208 	.word	0xffff0208

08003dbc <memset>:
 8003dbc:	4402      	add	r2, r0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d100      	bne.n	8003dc6 <memset+0xa>
 8003dc4:	4770      	bx	lr
 8003dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dca:	e7f9      	b.n	8003dc0 <memset+0x4>

08003dcc <__errno>:
 8003dcc:	4b01      	ldr	r3, [pc, #4]	@ (8003dd4 <__errno+0x8>)
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c

08003dd8 <__libc_init_array>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	4d0d      	ldr	r5, [pc, #52]	@ (8003e10 <__libc_init_array+0x38>)
 8003ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8003e14 <__libc_init_array+0x3c>)
 8003dde:	1b64      	subs	r4, r4, r5
 8003de0:	10a4      	asrs	r4, r4, #2
 8003de2:	2600      	movs	r6, #0
 8003de4:	42a6      	cmp	r6, r4
 8003de6:	d109      	bne.n	8003dfc <__libc_init_array+0x24>
 8003de8:	4d0b      	ldr	r5, [pc, #44]	@ (8003e18 <__libc_init_array+0x40>)
 8003dea:	4c0c      	ldr	r4, [pc, #48]	@ (8003e1c <__libc_init_array+0x44>)
 8003dec:	f000 fc66 	bl	80046bc <_init>
 8003df0:	1b64      	subs	r4, r4, r5
 8003df2:	10a4      	asrs	r4, r4, #2
 8003df4:	2600      	movs	r6, #0
 8003df6:	42a6      	cmp	r6, r4
 8003df8:	d105      	bne.n	8003e06 <__libc_init_array+0x2e>
 8003dfa:	bd70      	pop	{r4, r5, r6, pc}
 8003dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e00:	4798      	blx	r3
 8003e02:	3601      	adds	r6, #1
 8003e04:	e7ee      	b.n	8003de4 <__libc_init_array+0xc>
 8003e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0a:	4798      	blx	r3
 8003e0c:	3601      	adds	r6, #1
 8003e0e:	e7f2      	b.n	8003df6 <__libc_init_array+0x1e>
 8003e10:	08004754 	.word	0x08004754
 8003e14:	08004754 	.word	0x08004754
 8003e18:	08004754 	.word	0x08004754
 8003e1c:	08004758 	.word	0x08004758

08003e20 <__retarget_lock_acquire_recursive>:
 8003e20:	4770      	bx	lr

08003e22 <__retarget_lock_release_recursive>:
 8003e22:	4770      	bx	lr

08003e24 <__ssputs_r>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	688e      	ldr	r6, [r1, #8]
 8003e2a:	461f      	mov	r7, r3
 8003e2c:	42be      	cmp	r6, r7
 8003e2e:	680b      	ldr	r3, [r1, #0]
 8003e30:	4682      	mov	sl, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4690      	mov	r8, r2
 8003e36:	d82d      	bhi.n	8003e94 <__ssputs_r+0x70>
 8003e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e40:	d026      	beq.n	8003e90 <__ssputs_r+0x6c>
 8003e42:	6965      	ldr	r5, [r4, #20]
 8003e44:	6909      	ldr	r1, [r1, #16]
 8003e46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e4a:	eba3 0901 	sub.w	r9, r3, r1
 8003e4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e52:	1c7b      	adds	r3, r7, #1
 8003e54:	444b      	add	r3, r9
 8003e56:	106d      	asrs	r5, r5, #1
 8003e58:	429d      	cmp	r5, r3
 8003e5a:	bf38      	it	cc
 8003e5c:	461d      	movcc	r5, r3
 8003e5e:	0553      	lsls	r3, r2, #21
 8003e60:	d527      	bpl.n	8003eb2 <__ssputs_r+0x8e>
 8003e62:	4629      	mov	r1, r5
 8003e64:	f000 f958 	bl	8004118 <_malloc_r>
 8003e68:	4606      	mov	r6, r0
 8003e6a:	b360      	cbz	r0, 8003ec6 <__ssputs_r+0xa2>
 8003e6c:	6921      	ldr	r1, [r4, #16]
 8003e6e:	464a      	mov	r2, r9
 8003e70:	f000 fbc4 	bl	80045fc <memcpy>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	6126      	str	r6, [r4, #16]
 8003e82:	6165      	str	r5, [r4, #20]
 8003e84:	444e      	add	r6, r9
 8003e86:	eba5 0509 	sub.w	r5, r5, r9
 8003e8a:	6026      	str	r6, [r4, #0]
 8003e8c:	60a5      	str	r5, [r4, #8]
 8003e8e:	463e      	mov	r6, r7
 8003e90:	42be      	cmp	r6, r7
 8003e92:	d900      	bls.n	8003e96 <__ssputs_r+0x72>
 8003e94:	463e      	mov	r6, r7
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	4632      	mov	r2, r6
 8003e9a:	4641      	mov	r1, r8
 8003e9c:	f000 fb84 	bl	80045a8 <memmove>
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	1b9b      	subs	r3, r3, r6
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	4433      	add	r3, r6
 8003eaa:	6023      	str	r3, [r4, #0]
 8003eac:	2000      	movs	r0, #0
 8003eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb2:	462a      	mov	r2, r5
 8003eb4:	f000 fb4a 	bl	800454c <_realloc_r>
 8003eb8:	4606      	mov	r6, r0
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d1e0      	bne.n	8003e80 <__ssputs_r+0x5c>
 8003ebe:	6921      	ldr	r1, [r4, #16]
 8003ec0:	4650      	mov	r0, sl
 8003ec2:	f000 fba9 	bl	8004618 <_free_r>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	f8ca 3000 	str.w	r3, [sl]
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ed8:	e7e9      	b.n	8003eae <__ssputs_r+0x8a>
	...

08003edc <_svfiprintf_r>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	4698      	mov	r8, r3
 8003ee2:	898b      	ldrh	r3, [r1, #12]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	b09d      	sub	sp, #116	@ 0x74
 8003ee8:	4607      	mov	r7, r0
 8003eea:	460d      	mov	r5, r1
 8003eec:	4614      	mov	r4, r2
 8003eee:	d510      	bpl.n	8003f12 <_svfiprintf_r+0x36>
 8003ef0:	690b      	ldr	r3, [r1, #16]
 8003ef2:	b973      	cbnz	r3, 8003f12 <_svfiprintf_r+0x36>
 8003ef4:	2140      	movs	r1, #64	@ 0x40
 8003ef6:	f000 f90f 	bl	8004118 <_malloc_r>
 8003efa:	6028      	str	r0, [r5, #0]
 8003efc:	6128      	str	r0, [r5, #16]
 8003efe:	b930      	cbnz	r0, 8003f0e <_svfiprintf_r+0x32>
 8003f00:	230c      	movs	r3, #12
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f08:	b01d      	add	sp, #116	@ 0x74
 8003f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0e:	2340      	movs	r3, #64	@ 0x40
 8003f10:	616b      	str	r3, [r5, #20]
 8003f12:	2300      	movs	r3, #0
 8003f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f16:	2320      	movs	r3, #32
 8003f18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f20:	2330      	movs	r3, #48	@ 0x30
 8003f22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80040c0 <_svfiprintf_r+0x1e4>
 8003f26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f2a:	f04f 0901 	mov.w	r9, #1
 8003f2e:	4623      	mov	r3, r4
 8003f30:	469a      	mov	sl, r3
 8003f32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f36:	b10a      	cbz	r2, 8003f3c <_svfiprintf_r+0x60>
 8003f38:	2a25      	cmp	r2, #37	@ 0x25
 8003f3a:	d1f9      	bne.n	8003f30 <_svfiprintf_r+0x54>
 8003f3c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f40:	d00b      	beq.n	8003f5a <_svfiprintf_r+0x7e>
 8003f42:	465b      	mov	r3, fp
 8003f44:	4622      	mov	r2, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f7ff ff6b 	bl	8003e24 <__ssputs_r>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	f000 80a7 	beq.w	80040a2 <_svfiprintf_r+0x1c6>
 8003f54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f56:	445a      	add	r2, fp
 8003f58:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 809f 	beq.w	80040a2 <_svfiprintf_r+0x1c6>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6e:	f10a 0a01 	add.w	sl, sl, #1
 8003f72:	9304      	str	r3, [sp, #16]
 8003f74:	9307      	str	r3, [sp, #28]
 8003f76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f7c:	4654      	mov	r4, sl
 8003f7e:	2205      	movs	r2, #5
 8003f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f84:	484e      	ldr	r0, [pc, #312]	@ (80040c0 <_svfiprintf_r+0x1e4>)
 8003f86:	f7fc f92b 	bl	80001e0 <memchr>
 8003f8a:	9a04      	ldr	r2, [sp, #16]
 8003f8c:	b9d8      	cbnz	r0, 8003fc6 <_svfiprintf_r+0xea>
 8003f8e:	06d0      	lsls	r0, r2, #27
 8003f90:	bf44      	itt	mi
 8003f92:	2320      	movmi	r3, #32
 8003f94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f98:	0711      	lsls	r1, r2, #28
 8003f9a:	bf44      	itt	mi
 8003f9c:	232b      	movmi	r3, #43	@ 0x2b
 8003f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fa8:	d015      	beq.n	8003fd6 <_svfiprintf_r+0xfa>
 8003faa:	9a07      	ldr	r2, [sp, #28]
 8003fac:	4654      	mov	r4, sl
 8003fae:	2000      	movs	r0, #0
 8003fb0:	f04f 0c0a 	mov.w	ip, #10
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fba:	3b30      	subs	r3, #48	@ 0x30
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d94b      	bls.n	8004058 <_svfiprintf_r+0x17c>
 8003fc0:	b1b0      	cbz	r0, 8003ff0 <_svfiprintf_r+0x114>
 8003fc2:	9207      	str	r2, [sp, #28]
 8003fc4:	e014      	b.n	8003ff0 <_svfiprintf_r+0x114>
 8003fc6:	eba0 0308 	sub.w	r3, r0, r8
 8003fca:	fa09 f303 	lsl.w	r3, r9, r3
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	9304      	str	r3, [sp, #16]
 8003fd2:	46a2      	mov	sl, r4
 8003fd4:	e7d2      	b.n	8003f7c <_svfiprintf_r+0xa0>
 8003fd6:	9b03      	ldr	r3, [sp, #12]
 8003fd8:	1d19      	adds	r1, r3, #4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	9103      	str	r1, [sp, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	bfbb      	ittet	lt
 8003fe2:	425b      	neglt	r3, r3
 8003fe4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe8:	9307      	strge	r3, [sp, #28]
 8003fea:	9307      	strlt	r3, [sp, #28]
 8003fec:	bfb8      	it	lt
 8003fee:	9204      	strlt	r2, [sp, #16]
 8003ff0:	7823      	ldrb	r3, [r4, #0]
 8003ff2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff4:	d10a      	bne.n	800400c <_svfiprintf_r+0x130>
 8003ff6:	7863      	ldrb	r3, [r4, #1]
 8003ff8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ffa:	d132      	bne.n	8004062 <_svfiprintf_r+0x186>
 8003ffc:	9b03      	ldr	r3, [sp, #12]
 8003ffe:	1d1a      	adds	r2, r3, #4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	9203      	str	r2, [sp, #12]
 8004004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004008:	3402      	adds	r4, #2
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80040d0 <_svfiprintf_r+0x1f4>
 8004010:	7821      	ldrb	r1, [r4, #0]
 8004012:	2203      	movs	r2, #3
 8004014:	4650      	mov	r0, sl
 8004016:	f7fc f8e3 	bl	80001e0 <memchr>
 800401a:	b138      	cbz	r0, 800402c <_svfiprintf_r+0x150>
 800401c:	9b04      	ldr	r3, [sp, #16]
 800401e:	eba0 000a 	sub.w	r0, r0, sl
 8004022:	2240      	movs	r2, #64	@ 0x40
 8004024:	4082      	lsls	r2, r0
 8004026:	4313      	orrs	r3, r2
 8004028:	3401      	adds	r4, #1
 800402a:	9304      	str	r3, [sp, #16]
 800402c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004030:	4824      	ldr	r0, [pc, #144]	@ (80040c4 <_svfiprintf_r+0x1e8>)
 8004032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004036:	2206      	movs	r2, #6
 8004038:	f7fc f8d2 	bl	80001e0 <memchr>
 800403c:	2800      	cmp	r0, #0
 800403e:	d036      	beq.n	80040ae <_svfiprintf_r+0x1d2>
 8004040:	4b21      	ldr	r3, [pc, #132]	@ (80040c8 <_svfiprintf_r+0x1ec>)
 8004042:	bb1b      	cbnz	r3, 800408c <_svfiprintf_r+0x1b0>
 8004044:	9b03      	ldr	r3, [sp, #12]
 8004046:	3307      	adds	r3, #7
 8004048:	f023 0307 	bic.w	r3, r3, #7
 800404c:	3308      	adds	r3, #8
 800404e:	9303      	str	r3, [sp, #12]
 8004050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004052:	4433      	add	r3, r6
 8004054:	9309      	str	r3, [sp, #36]	@ 0x24
 8004056:	e76a      	b.n	8003f2e <_svfiprintf_r+0x52>
 8004058:	fb0c 3202 	mla	r2, ip, r2, r3
 800405c:	460c      	mov	r4, r1
 800405e:	2001      	movs	r0, #1
 8004060:	e7a8      	b.n	8003fb4 <_svfiprintf_r+0xd8>
 8004062:	2300      	movs	r3, #0
 8004064:	3401      	adds	r4, #1
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	4619      	mov	r1, r3
 800406a:	f04f 0c0a 	mov.w	ip, #10
 800406e:	4620      	mov	r0, r4
 8004070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004074:	3a30      	subs	r2, #48	@ 0x30
 8004076:	2a09      	cmp	r2, #9
 8004078:	d903      	bls.n	8004082 <_svfiprintf_r+0x1a6>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0c6      	beq.n	800400c <_svfiprintf_r+0x130>
 800407e:	9105      	str	r1, [sp, #20]
 8004080:	e7c4      	b.n	800400c <_svfiprintf_r+0x130>
 8004082:	fb0c 2101 	mla	r1, ip, r1, r2
 8004086:	4604      	mov	r4, r0
 8004088:	2301      	movs	r3, #1
 800408a:	e7f0      	b.n	800406e <_svfiprintf_r+0x192>
 800408c:	ab03      	add	r3, sp, #12
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	462a      	mov	r2, r5
 8004092:	4b0e      	ldr	r3, [pc, #56]	@ (80040cc <_svfiprintf_r+0x1f0>)
 8004094:	a904      	add	r1, sp, #16
 8004096:	4638      	mov	r0, r7
 8004098:	f3af 8000 	nop.w
 800409c:	1c42      	adds	r2, r0, #1
 800409e:	4606      	mov	r6, r0
 80040a0:	d1d6      	bne.n	8004050 <_svfiprintf_r+0x174>
 80040a2:	89ab      	ldrh	r3, [r5, #12]
 80040a4:	065b      	lsls	r3, r3, #25
 80040a6:	f53f af2d 	bmi.w	8003f04 <_svfiprintf_r+0x28>
 80040aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040ac:	e72c      	b.n	8003f08 <_svfiprintf_r+0x2c>
 80040ae:	ab03      	add	r3, sp, #12
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	462a      	mov	r2, r5
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <_svfiprintf_r+0x1f0>)
 80040b6:	a904      	add	r1, sp, #16
 80040b8:	4638      	mov	r0, r7
 80040ba:	f000 f91b 	bl	80042f4 <_printf_i>
 80040be:	e7ed      	b.n	800409c <_svfiprintf_r+0x1c0>
 80040c0:	08004718 	.word	0x08004718
 80040c4:	08004722 	.word	0x08004722
 80040c8:	00000000 	.word	0x00000000
 80040cc:	08003e25 	.word	0x08003e25
 80040d0:	0800471e 	.word	0x0800471e

080040d4 <sbrk_aligned>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004114 <sbrk_aligned+0x40>)
 80040d8:	460c      	mov	r4, r1
 80040da:	6831      	ldr	r1, [r6, #0]
 80040dc:	4605      	mov	r5, r0
 80040de:	b911      	cbnz	r1, 80040e6 <sbrk_aligned+0x12>
 80040e0:	f000 fa7c 	bl	80045dc <_sbrk_r>
 80040e4:	6030      	str	r0, [r6, #0]
 80040e6:	4621      	mov	r1, r4
 80040e8:	4628      	mov	r0, r5
 80040ea:	f000 fa77 	bl	80045dc <_sbrk_r>
 80040ee:	1c43      	adds	r3, r0, #1
 80040f0:	d103      	bne.n	80040fa <sbrk_aligned+0x26>
 80040f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80040f6:	4620      	mov	r0, r4
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	1cc4      	adds	r4, r0, #3
 80040fc:	f024 0403 	bic.w	r4, r4, #3
 8004100:	42a0      	cmp	r0, r4
 8004102:	d0f8      	beq.n	80040f6 <sbrk_aligned+0x22>
 8004104:	1a21      	subs	r1, r4, r0
 8004106:	4628      	mov	r0, r5
 8004108:	f000 fa68 	bl	80045dc <_sbrk_r>
 800410c:	3001      	adds	r0, #1
 800410e:	d1f2      	bne.n	80040f6 <sbrk_aligned+0x22>
 8004110:	e7ef      	b.n	80040f2 <sbrk_aligned+0x1e>
 8004112:	bf00      	nop
 8004114:	200002f0 	.word	0x200002f0

08004118 <_malloc_r>:
 8004118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800411c:	1ccd      	adds	r5, r1, #3
 800411e:	f025 0503 	bic.w	r5, r5, #3
 8004122:	3508      	adds	r5, #8
 8004124:	2d0c      	cmp	r5, #12
 8004126:	bf38      	it	cc
 8004128:	250c      	movcc	r5, #12
 800412a:	2d00      	cmp	r5, #0
 800412c:	4606      	mov	r6, r0
 800412e:	db01      	blt.n	8004134 <_malloc_r+0x1c>
 8004130:	42a9      	cmp	r1, r5
 8004132:	d904      	bls.n	800413e <_malloc_r+0x26>
 8004134:	230c      	movs	r3, #12
 8004136:	6033      	str	r3, [r6, #0]
 8004138:	2000      	movs	r0, #0
 800413a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800413e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004214 <_malloc_r+0xfc>
 8004142:	f000 f9f7 	bl	8004534 <__malloc_lock>
 8004146:	f8d8 3000 	ldr.w	r3, [r8]
 800414a:	461c      	mov	r4, r3
 800414c:	bb44      	cbnz	r4, 80041a0 <_malloc_r+0x88>
 800414e:	4629      	mov	r1, r5
 8004150:	4630      	mov	r0, r6
 8004152:	f7ff ffbf 	bl	80040d4 <sbrk_aligned>
 8004156:	1c43      	adds	r3, r0, #1
 8004158:	4604      	mov	r4, r0
 800415a:	d158      	bne.n	800420e <_malloc_r+0xf6>
 800415c:	f8d8 4000 	ldr.w	r4, [r8]
 8004160:	4627      	mov	r7, r4
 8004162:	2f00      	cmp	r7, #0
 8004164:	d143      	bne.n	80041ee <_malloc_r+0xd6>
 8004166:	2c00      	cmp	r4, #0
 8004168:	d04b      	beq.n	8004202 <_malloc_r+0xea>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	4639      	mov	r1, r7
 800416e:	4630      	mov	r0, r6
 8004170:	eb04 0903 	add.w	r9, r4, r3
 8004174:	f000 fa32 	bl	80045dc <_sbrk_r>
 8004178:	4581      	cmp	r9, r0
 800417a:	d142      	bne.n	8004202 <_malloc_r+0xea>
 800417c:	6821      	ldr	r1, [r4, #0]
 800417e:	1a6d      	subs	r5, r5, r1
 8004180:	4629      	mov	r1, r5
 8004182:	4630      	mov	r0, r6
 8004184:	f7ff ffa6 	bl	80040d4 <sbrk_aligned>
 8004188:	3001      	adds	r0, #1
 800418a:	d03a      	beq.n	8004202 <_malloc_r+0xea>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	442b      	add	r3, r5
 8004190:	6023      	str	r3, [r4, #0]
 8004192:	f8d8 3000 	ldr.w	r3, [r8]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	bb62      	cbnz	r2, 80041f4 <_malloc_r+0xdc>
 800419a:	f8c8 7000 	str.w	r7, [r8]
 800419e:	e00f      	b.n	80041c0 <_malloc_r+0xa8>
 80041a0:	6822      	ldr	r2, [r4, #0]
 80041a2:	1b52      	subs	r2, r2, r5
 80041a4:	d420      	bmi.n	80041e8 <_malloc_r+0xd0>
 80041a6:	2a0b      	cmp	r2, #11
 80041a8:	d917      	bls.n	80041da <_malloc_r+0xc2>
 80041aa:	1961      	adds	r1, r4, r5
 80041ac:	42a3      	cmp	r3, r4
 80041ae:	6025      	str	r5, [r4, #0]
 80041b0:	bf18      	it	ne
 80041b2:	6059      	strne	r1, [r3, #4]
 80041b4:	6863      	ldr	r3, [r4, #4]
 80041b6:	bf08      	it	eq
 80041b8:	f8c8 1000 	streq.w	r1, [r8]
 80041bc:	5162      	str	r2, [r4, r5]
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	4630      	mov	r0, r6
 80041c2:	f000 f9bd 	bl	8004540 <__malloc_unlock>
 80041c6:	f104 000b 	add.w	r0, r4, #11
 80041ca:	1d23      	adds	r3, r4, #4
 80041cc:	f020 0007 	bic.w	r0, r0, #7
 80041d0:	1ac2      	subs	r2, r0, r3
 80041d2:	bf1c      	itt	ne
 80041d4:	1a1b      	subne	r3, r3, r0
 80041d6:	50a3      	strne	r3, [r4, r2]
 80041d8:	e7af      	b.n	800413a <_malloc_r+0x22>
 80041da:	6862      	ldr	r2, [r4, #4]
 80041dc:	42a3      	cmp	r3, r4
 80041de:	bf0c      	ite	eq
 80041e0:	f8c8 2000 	streq.w	r2, [r8]
 80041e4:	605a      	strne	r2, [r3, #4]
 80041e6:	e7eb      	b.n	80041c0 <_malloc_r+0xa8>
 80041e8:	4623      	mov	r3, r4
 80041ea:	6864      	ldr	r4, [r4, #4]
 80041ec:	e7ae      	b.n	800414c <_malloc_r+0x34>
 80041ee:	463c      	mov	r4, r7
 80041f0:	687f      	ldr	r7, [r7, #4]
 80041f2:	e7b6      	b.n	8004162 <_malloc_r+0x4a>
 80041f4:	461a      	mov	r2, r3
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	42a3      	cmp	r3, r4
 80041fa:	d1fb      	bne.n	80041f4 <_malloc_r+0xdc>
 80041fc:	2300      	movs	r3, #0
 80041fe:	6053      	str	r3, [r2, #4]
 8004200:	e7de      	b.n	80041c0 <_malloc_r+0xa8>
 8004202:	230c      	movs	r3, #12
 8004204:	6033      	str	r3, [r6, #0]
 8004206:	4630      	mov	r0, r6
 8004208:	f000 f99a 	bl	8004540 <__malloc_unlock>
 800420c:	e794      	b.n	8004138 <_malloc_r+0x20>
 800420e:	6005      	str	r5, [r0, #0]
 8004210:	e7d6      	b.n	80041c0 <_malloc_r+0xa8>
 8004212:	bf00      	nop
 8004214:	200002f4 	.word	0x200002f4

08004218 <_printf_common>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	4616      	mov	r6, r2
 800421e:	4698      	mov	r8, r3
 8004220:	688a      	ldr	r2, [r1, #8]
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004228:	4293      	cmp	r3, r2
 800422a:	bfb8      	it	lt
 800422c:	4613      	movlt	r3, r2
 800422e:	6033      	str	r3, [r6, #0]
 8004230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004234:	4607      	mov	r7, r0
 8004236:	460c      	mov	r4, r1
 8004238:	b10a      	cbz	r2, 800423e <_printf_common+0x26>
 800423a:	3301      	adds	r3, #1
 800423c:	6033      	str	r3, [r6, #0]
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	0699      	lsls	r1, r3, #26
 8004242:	bf42      	ittt	mi
 8004244:	6833      	ldrmi	r3, [r6, #0]
 8004246:	3302      	addmi	r3, #2
 8004248:	6033      	strmi	r3, [r6, #0]
 800424a:	6825      	ldr	r5, [r4, #0]
 800424c:	f015 0506 	ands.w	r5, r5, #6
 8004250:	d106      	bne.n	8004260 <_printf_common+0x48>
 8004252:	f104 0a19 	add.w	sl, r4, #25
 8004256:	68e3      	ldr	r3, [r4, #12]
 8004258:	6832      	ldr	r2, [r6, #0]
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	42ab      	cmp	r3, r5
 800425e:	dc26      	bgt.n	80042ae <_printf_common+0x96>
 8004260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	3b00      	subs	r3, #0
 8004268:	bf18      	it	ne
 800426a:	2301      	movne	r3, #1
 800426c:	0692      	lsls	r2, r2, #26
 800426e:	d42b      	bmi.n	80042c8 <_printf_common+0xb0>
 8004270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004274:	4641      	mov	r1, r8
 8004276:	4638      	mov	r0, r7
 8004278:	47c8      	blx	r9
 800427a:	3001      	adds	r0, #1
 800427c:	d01e      	beq.n	80042bc <_printf_common+0xa4>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	f003 0306 	and.w	r3, r3, #6
 8004286:	2b04      	cmp	r3, #4
 8004288:	bf02      	ittt	eq
 800428a:	68e5      	ldreq	r5, [r4, #12]
 800428c:	6833      	ldreq	r3, [r6, #0]
 800428e:	1aed      	subeq	r5, r5, r3
 8004290:	68a3      	ldr	r3, [r4, #8]
 8004292:	bf0c      	ite	eq
 8004294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004298:	2500      	movne	r5, #0
 800429a:	4293      	cmp	r3, r2
 800429c:	bfc4      	itt	gt
 800429e:	1a9b      	subgt	r3, r3, r2
 80042a0:	18ed      	addgt	r5, r5, r3
 80042a2:	2600      	movs	r6, #0
 80042a4:	341a      	adds	r4, #26
 80042a6:	42b5      	cmp	r5, r6
 80042a8:	d11a      	bne.n	80042e0 <_printf_common+0xc8>
 80042aa:	2000      	movs	r0, #0
 80042ac:	e008      	b.n	80042c0 <_printf_common+0xa8>
 80042ae:	2301      	movs	r3, #1
 80042b0:	4652      	mov	r2, sl
 80042b2:	4641      	mov	r1, r8
 80042b4:	4638      	mov	r0, r7
 80042b6:	47c8      	blx	r9
 80042b8:	3001      	adds	r0, #1
 80042ba:	d103      	bne.n	80042c4 <_printf_common+0xac>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80042c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c4:	3501      	adds	r5, #1
 80042c6:	e7c6      	b.n	8004256 <_printf_common+0x3e>
 80042c8:	18e1      	adds	r1, r4, r3
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	2030      	movs	r0, #48	@ 0x30
 80042ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042d2:	4422      	add	r2, r4
 80042d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042dc:	3302      	adds	r3, #2
 80042de:	e7c7      	b.n	8004270 <_printf_common+0x58>
 80042e0:	2301      	movs	r3, #1
 80042e2:	4622      	mov	r2, r4
 80042e4:	4641      	mov	r1, r8
 80042e6:	4638      	mov	r0, r7
 80042e8:	47c8      	blx	r9
 80042ea:	3001      	adds	r0, #1
 80042ec:	d0e6      	beq.n	80042bc <_printf_common+0xa4>
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7d9      	b.n	80042a6 <_printf_common+0x8e>
	...

080042f4 <_printf_i>:
 80042f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	7e0f      	ldrb	r7, [r1, #24]
 80042fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042fc:	2f78      	cmp	r7, #120	@ 0x78
 80042fe:	4691      	mov	r9, r2
 8004300:	4680      	mov	r8, r0
 8004302:	460c      	mov	r4, r1
 8004304:	469a      	mov	sl, r3
 8004306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800430a:	d807      	bhi.n	800431c <_printf_i+0x28>
 800430c:	2f62      	cmp	r7, #98	@ 0x62
 800430e:	d80a      	bhi.n	8004326 <_printf_i+0x32>
 8004310:	2f00      	cmp	r7, #0
 8004312:	f000 80d2 	beq.w	80044ba <_printf_i+0x1c6>
 8004316:	2f58      	cmp	r7, #88	@ 0x58
 8004318:	f000 80b9 	beq.w	800448e <_printf_i+0x19a>
 800431c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004324:	e03a      	b.n	800439c <_printf_i+0xa8>
 8004326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800432a:	2b15      	cmp	r3, #21
 800432c:	d8f6      	bhi.n	800431c <_printf_i+0x28>
 800432e:	a101      	add	r1, pc, #4	@ (adr r1, 8004334 <_printf_i+0x40>)
 8004330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004334:	0800438d 	.word	0x0800438d
 8004338:	080043a1 	.word	0x080043a1
 800433c:	0800431d 	.word	0x0800431d
 8004340:	0800431d 	.word	0x0800431d
 8004344:	0800431d 	.word	0x0800431d
 8004348:	0800431d 	.word	0x0800431d
 800434c:	080043a1 	.word	0x080043a1
 8004350:	0800431d 	.word	0x0800431d
 8004354:	0800431d 	.word	0x0800431d
 8004358:	0800431d 	.word	0x0800431d
 800435c:	0800431d 	.word	0x0800431d
 8004360:	080044a1 	.word	0x080044a1
 8004364:	080043cb 	.word	0x080043cb
 8004368:	0800445b 	.word	0x0800445b
 800436c:	0800431d 	.word	0x0800431d
 8004370:	0800431d 	.word	0x0800431d
 8004374:	080044c3 	.word	0x080044c3
 8004378:	0800431d 	.word	0x0800431d
 800437c:	080043cb 	.word	0x080043cb
 8004380:	0800431d 	.word	0x0800431d
 8004384:	0800431d 	.word	0x0800431d
 8004388:	08004463 	.word	0x08004463
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800439c:	2301      	movs	r3, #1
 800439e:	e09d      	b.n	80044dc <_printf_i+0x1e8>
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	1d19      	adds	r1, r3, #4
 80043a6:	6031      	str	r1, [r6, #0]
 80043a8:	0606      	lsls	r6, r0, #24
 80043aa:	d501      	bpl.n	80043b0 <_printf_i+0xbc>
 80043ac:	681d      	ldr	r5, [r3, #0]
 80043ae:	e003      	b.n	80043b8 <_printf_i+0xc4>
 80043b0:	0645      	lsls	r5, r0, #25
 80043b2:	d5fb      	bpl.n	80043ac <_printf_i+0xb8>
 80043b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80043b8:	2d00      	cmp	r5, #0
 80043ba:	da03      	bge.n	80043c4 <_printf_i+0xd0>
 80043bc:	232d      	movs	r3, #45	@ 0x2d
 80043be:	426d      	negs	r5, r5
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c4:	4859      	ldr	r0, [pc, #356]	@ (800452c <_printf_i+0x238>)
 80043c6:	230a      	movs	r3, #10
 80043c8:	e011      	b.n	80043ee <_printf_i+0xfa>
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	6833      	ldr	r3, [r6, #0]
 80043ce:	0608      	lsls	r0, r1, #24
 80043d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80043d4:	d402      	bmi.n	80043dc <_printf_i+0xe8>
 80043d6:	0649      	lsls	r1, r1, #25
 80043d8:	bf48      	it	mi
 80043da:	b2ad      	uxthmi	r5, r5
 80043dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80043de:	4853      	ldr	r0, [pc, #332]	@ (800452c <_printf_i+0x238>)
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	bf14      	ite	ne
 80043e4:	230a      	movne	r3, #10
 80043e6:	2308      	moveq	r3, #8
 80043e8:	2100      	movs	r1, #0
 80043ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043ee:	6866      	ldr	r6, [r4, #4]
 80043f0:	60a6      	str	r6, [r4, #8]
 80043f2:	2e00      	cmp	r6, #0
 80043f4:	bfa2      	ittt	ge
 80043f6:	6821      	ldrge	r1, [r4, #0]
 80043f8:	f021 0104 	bicge.w	r1, r1, #4
 80043fc:	6021      	strge	r1, [r4, #0]
 80043fe:	b90d      	cbnz	r5, 8004404 <_printf_i+0x110>
 8004400:	2e00      	cmp	r6, #0
 8004402:	d04b      	beq.n	800449c <_printf_i+0x1a8>
 8004404:	4616      	mov	r6, r2
 8004406:	fbb5 f1f3 	udiv	r1, r5, r3
 800440a:	fb03 5711 	mls	r7, r3, r1, r5
 800440e:	5dc7      	ldrb	r7, [r0, r7]
 8004410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004414:	462f      	mov	r7, r5
 8004416:	42bb      	cmp	r3, r7
 8004418:	460d      	mov	r5, r1
 800441a:	d9f4      	bls.n	8004406 <_printf_i+0x112>
 800441c:	2b08      	cmp	r3, #8
 800441e:	d10b      	bne.n	8004438 <_printf_i+0x144>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	07df      	lsls	r7, r3, #31
 8004424:	d508      	bpl.n	8004438 <_printf_i+0x144>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6861      	ldr	r1, [r4, #4]
 800442a:	4299      	cmp	r1, r3
 800442c:	bfde      	ittt	le
 800442e:	2330      	movle	r3, #48	@ 0x30
 8004430:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004434:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004438:	1b92      	subs	r2, r2, r6
 800443a:	6122      	str	r2, [r4, #16]
 800443c:	f8cd a000 	str.w	sl, [sp]
 8004440:	464b      	mov	r3, r9
 8004442:	aa03      	add	r2, sp, #12
 8004444:	4621      	mov	r1, r4
 8004446:	4640      	mov	r0, r8
 8004448:	f7ff fee6 	bl	8004218 <_printf_common>
 800444c:	3001      	adds	r0, #1
 800444e:	d14a      	bne.n	80044e6 <_printf_i+0x1f2>
 8004450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004454:	b004      	add	sp, #16
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	f043 0320 	orr.w	r3, r3, #32
 8004460:	6023      	str	r3, [r4, #0]
 8004462:	4833      	ldr	r0, [pc, #204]	@ (8004530 <_printf_i+0x23c>)
 8004464:	2778      	movs	r7, #120	@ 0x78
 8004466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	6831      	ldr	r1, [r6, #0]
 800446e:	061f      	lsls	r7, r3, #24
 8004470:	f851 5b04 	ldr.w	r5, [r1], #4
 8004474:	d402      	bmi.n	800447c <_printf_i+0x188>
 8004476:	065f      	lsls	r7, r3, #25
 8004478:	bf48      	it	mi
 800447a:	b2ad      	uxthmi	r5, r5
 800447c:	6031      	str	r1, [r6, #0]
 800447e:	07d9      	lsls	r1, r3, #31
 8004480:	bf44      	itt	mi
 8004482:	f043 0320 	orrmi.w	r3, r3, #32
 8004486:	6023      	strmi	r3, [r4, #0]
 8004488:	b11d      	cbz	r5, 8004492 <_printf_i+0x19e>
 800448a:	2310      	movs	r3, #16
 800448c:	e7ac      	b.n	80043e8 <_printf_i+0xf4>
 800448e:	4827      	ldr	r0, [pc, #156]	@ (800452c <_printf_i+0x238>)
 8004490:	e7e9      	b.n	8004466 <_printf_i+0x172>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f023 0320 	bic.w	r3, r3, #32
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	e7f6      	b.n	800448a <_printf_i+0x196>
 800449c:	4616      	mov	r6, r2
 800449e:	e7bd      	b.n	800441c <_printf_i+0x128>
 80044a0:	6833      	ldr	r3, [r6, #0]
 80044a2:	6825      	ldr	r5, [r4, #0]
 80044a4:	6961      	ldr	r1, [r4, #20]
 80044a6:	1d18      	adds	r0, r3, #4
 80044a8:	6030      	str	r0, [r6, #0]
 80044aa:	062e      	lsls	r6, r5, #24
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	d501      	bpl.n	80044b4 <_printf_i+0x1c0>
 80044b0:	6019      	str	r1, [r3, #0]
 80044b2:	e002      	b.n	80044ba <_printf_i+0x1c6>
 80044b4:	0668      	lsls	r0, r5, #25
 80044b6:	d5fb      	bpl.n	80044b0 <_printf_i+0x1bc>
 80044b8:	8019      	strh	r1, [r3, #0]
 80044ba:	2300      	movs	r3, #0
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	4616      	mov	r6, r2
 80044c0:	e7bc      	b.n	800443c <_printf_i+0x148>
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	1d1a      	adds	r2, r3, #4
 80044c6:	6032      	str	r2, [r6, #0]
 80044c8:	681e      	ldr	r6, [r3, #0]
 80044ca:	6862      	ldr	r2, [r4, #4]
 80044cc:	2100      	movs	r1, #0
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fb fe86 	bl	80001e0 <memchr>
 80044d4:	b108      	cbz	r0, 80044da <_printf_i+0x1e6>
 80044d6:	1b80      	subs	r0, r0, r6
 80044d8:	6060      	str	r0, [r4, #4]
 80044da:	6863      	ldr	r3, [r4, #4]
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	2300      	movs	r3, #0
 80044e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044e4:	e7aa      	b.n	800443c <_printf_i+0x148>
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	4632      	mov	r2, r6
 80044ea:	4649      	mov	r1, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	47d0      	blx	sl
 80044f0:	3001      	adds	r0, #1
 80044f2:	d0ad      	beq.n	8004450 <_printf_i+0x15c>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	079b      	lsls	r3, r3, #30
 80044f8:	d413      	bmi.n	8004522 <_printf_i+0x22e>
 80044fa:	68e0      	ldr	r0, [r4, #12]
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	4298      	cmp	r0, r3
 8004500:	bfb8      	it	lt
 8004502:	4618      	movlt	r0, r3
 8004504:	e7a6      	b.n	8004454 <_printf_i+0x160>
 8004506:	2301      	movs	r3, #1
 8004508:	4632      	mov	r2, r6
 800450a:	4649      	mov	r1, r9
 800450c:	4640      	mov	r0, r8
 800450e:	47d0      	blx	sl
 8004510:	3001      	adds	r0, #1
 8004512:	d09d      	beq.n	8004450 <_printf_i+0x15c>
 8004514:	3501      	adds	r5, #1
 8004516:	68e3      	ldr	r3, [r4, #12]
 8004518:	9903      	ldr	r1, [sp, #12]
 800451a:	1a5b      	subs	r3, r3, r1
 800451c:	42ab      	cmp	r3, r5
 800451e:	dcf2      	bgt.n	8004506 <_printf_i+0x212>
 8004520:	e7eb      	b.n	80044fa <_printf_i+0x206>
 8004522:	2500      	movs	r5, #0
 8004524:	f104 0619 	add.w	r6, r4, #25
 8004528:	e7f5      	b.n	8004516 <_printf_i+0x222>
 800452a:	bf00      	nop
 800452c:	08004729 	.word	0x08004729
 8004530:	0800473a 	.word	0x0800473a

08004534 <__malloc_lock>:
 8004534:	4801      	ldr	r0, [pc, #4]	@ (800453c <__malloc_lock+0x8>)
 8004536:	f7ff bc73 	b.w	8003e20 <__retarget_lock_acquire_recursive>
 800453a:	bf00      	nop
 800453c:	200002ec 	.word	0x200002ec

08004540 <__malloc_unlock>:
 8004540:	4801      	ldr	r0, [pc, #4]	@ (8004548 <__malloc_unlock+0x8>)
 8004542:	f7ff bc6e 	b.w	8003e22 <__retarget_lock_release_recursive>
 8004546:	bf00      	nop
 8004548:	200002ec 	.word	0x200002ec

0800454c <_realloc_r>:
 800454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004550:	4680      	mov	r8, r0
 8004552:	4615      	mov	r5, r2
 8004554:	460c      	mov	r4, r1
 8004556:	b921      	cbnz	r1, 8004562 <_realloc_r+0x16>
 8004558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455c:	4611      	mov	r1, r2
 800455e:	f7ff bddb 	b.w	8004118 <_malloc_r>
 8004562:	b92a      	cbnz	r2, 8004570 <_realloc_r+0x24>
 8004564:	f000 f858 	bl	8004618 <_free_r>
 8004568:	2400      	movs	r4, #0
 800456a:	4620      	mov	r0, r4
 800456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004570:	f000 f89c 	bl	80046ac <_malloc_usable_size_r>
 8004574:	4285      	cmp	r5, r0
 8004576:	4606      	mov	r6, r0
 8004578:	d802      	bhi.n	8004580 <_realloc_r+0x34>
 800457a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800457e:	d8f4      	bhi.n	800456a <_realloc_r+0x1e>
 8004580:	4629      	mov	r1, r5
 8004582:	4640      	mov	r0, r8
 8004584:	f7ff fdc8 	bl	8004118 <_malloc_r>
 8004588:	4607      	mov	r7, r0
 800458a:	2800      	cmp	r0, #0
 800458c:	d0ec      	beq.n	8004568 <_realloc_r+0x1c>
 800458e:	42b5      	cmp	r5, r6
 8004590:	462a      	mov	r2, r5
 8004592:	4621      	mov	r1, r4
 8004594:	bf28      	it	cs
 8004596:	4632      	movcs	r2, r6
 8004598:	f000 f830 	bl	80045fc <memcpy>
 800459c:	4621      	mov	r1, r4
 800459e:	4640      	mov	r0, r8
 80045a0:	f000 f83a 	bl	8004618 <_free_r>
 80045a4:	463c      	mov	r4, r7
 80045a6:	e7e0      	b.n	800456a <_realloc_r+0x1e>

080045a8 <memmove>:
 80045a8:	4288      	cmp	r0, r1
 80045aa:	b510      	push	{r4, lr}
 80045ac:	eb01 0402 	add.w	r4, r1, r2
 80045b0:	d902      	bls.n	80045b8 <memmove+0x10>
 80045b2:	4284      	cmp	r4, r0
 80045b4:	4623      	mov	r3, r4
 80045b6:	d807      	bhi.n	80045c8 <memmove+0x20>
 80045b8:	1e43      	subs	r3, r0, #1
 80045ba:	42a1      	cmp	r1, r4
 80045bc:	d008      	beq.n	80045d0 <memmove+0x28>
 80045be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045c6:	e7f8      	b.n	80045ba <memmove+0x12>
 80045c8:	4402      	add	r2, r0
 80045ca:	4601      	mov	r1, r0
 80045cc:	428a      	cmp	r2, r1
 80045ce:	d100      	bne.n	80045d2 <memmove+0x2a>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045da:	e7f7      	b.n	80045cc <memmove+0x24>

080045dc <_sbrk_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4d06      	ldr	r5, [pc, #24]	@ (80045f8 <_sbrk_r+0x1c>)
 80045e0:	2300      	movs	r3, #0
 80045e2:	4604      	mov	r4, r0
 80045e4:	4608      	mov	r0, r1
 80045e6:	602b      	str	r3, [r5, #0]
 80045e8:	f7fc f954 	bl	8000894 <_sbrk>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d102      	bne.n	80045f6 <_sbrk_r+0x1a>
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	b103      	cbz	r3, 80045f6 <_sbrk_r+0x1a>
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	bd38      	pop	{r3, r4, r5, pc}
 80045f8:	200002f8 	.word	0x200002f8

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004612:	4291      	cmp	r1, r2
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d041      	beq.n	80046a4 <_free_r+0x8c>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f7ff ff82 	bl	8004534 <__malloc_lock>
 8004630:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <_free_r+0x90>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	b933      	cbnz	r3, 8004644 <_free_r+0x2c>
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	4628      	mov	r0, r5
 800463c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004640:	f7ff bf7e 	b.w	8004540 <__malloc_unlock>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x42>
 8004648:	6820      	ldr	r0, [r4, #0]
 800464a:	1821      	adds	r1, r4, r0
 800464c:	428b      	cmp	r3, r1
 800464e:	bf01      	itttt	eq
 8004650:	6819      	ldreq	r1, [r3, #0]
 8004652:	685b      	ldreq	r3, [r3, #4]
 8004654:	1809      	addeq	r1, r1, r0
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	e7ed      	b.n	8004636 <_free_r+0x1e>
 800465a:	461a      	mov	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b10b      	cbz	r3, 8004664 <_free_r+0x4c>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d9fa      	bls.n	800465a <_free_r+0x42>
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	1850      	adds	r0, r2, r1
 8004668:	42a0      	cmp	r0, r4
 800466a:	d10b      	bne.n	8004684 <_free_r+0x6c>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	4401      	add	r1, r0
 8004670:	1850      	adds	r0, r2, r1
 8004672:	4283      	cmp	r3, r0
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	d1e0      	bne.n	800463a <_free_r+0x22>
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	4408      	add	r0, r1
 8004680:	6010      	str	r0, [r2, #0]
 8004682:	e7da      	b.n	800463a <_free_r+0x22>
 8004684:	d902      	bls.n	800468c <_free_r+0x74>
 8004686:	230c      	movs	r3, #12
 8004688:	602b      	str	r3, [r5, #0]
 800468a:	e7d6      	b.n	800463a <_free_r+0x22>
 800468c:	6820      	ldr	r0, [r4, #0]
 800468e:	1821      	adds	r1, r4, r0
 8004690:	428b      	cmp	r3, r1
 8004692:	bf04      	itt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	bf04      	itt	eq
 800469c:	1809      	addeq	r1, r1, r0
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	6054      	str	r4, [r2, #4]
 80046a2:	e7ca      	b.n	800463a <_free_r+0x22>
 80046a4:	bd38      	pop	{r3, r4, r5, pc}
 80046a6:	bf00      	nop
 80046a8:	200002f4 	.word	0x200002f4

080046ac <_malloc_usable_size_r>:
 80046ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046b0:	1f18      	subs	r0, r3, #4
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfbc      	itt	lt
 80046b6:	580b      	ldrlt	r3, [r1, r0]
 80046b8:	18c0      	addlt	r0, r0, r3
 80046ba:	4770      	bx	lr

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	bf00      	nop
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
