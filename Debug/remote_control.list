
remote_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005084  08005084  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005084  08005084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800508c  0800508c  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005090  08005090  00006090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005094  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          00000360  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003c4  200003c4  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd56  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4d  00000000  00000000  00012dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00014938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d3  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3fd  00000000  00000000  000158eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bcc4  00000000  00000000  00030ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a21a9  00000000  00000000  0003c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000deb55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002898  00000000  00000000  000deb98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000e1430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff0 	.word	0x08004ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004ff0 	.word	0x08004ff0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <calculate_average>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int calculate_average(uint16_t readings[], const int size) {
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    if (size <= 2) return 0; // Evita errores si el tamaño es insuficiente
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b02      	cmp	r3, #2
 800028e:	dc01      	bgt.n	8000294 <calculate_average+0x14>
 8000290:	2300      	movs	r3, #0
 8000292:	e033      	b.n	80002fc <calculate_average+0x7c>

    uint16_t min = readings[0];
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	82fb      	strh	r3, [r7, #22]
    uint16_t max = readings[0];
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	82bb      	strh	r3, [r7, #20]
    int sum = readings[0];
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	613b      	str	r3, [r7, #16]

    // Recorrer el array una vez
    for (int i = 1; i < size; i++) {
 80002a6:	2301      	movs	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	e018      	b.n	80002de <calculate_average+0x5e>
        uint16_t value = readings[i];
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4413      	add	r3, r2
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	817b      	strh	r3, [r7, #10]
        if (value < min) min = value;
 80002b8:	897a      	ldrh	r2, [r7, #10]
 80002ba:	8afb      	ldrh	r3, [r7, #22]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d201      	bcs.n	80002c4 <calculate_average+0x44>
 80002c0:	897b      	ldrh	r3, [r7, #10]
 80002c2:	82fb      	strh	r3, [r7, #22]
        if (value > max) max = value;
 80002c4:	897a      	ldrh	r2, [r7, #10]
 80002c6:	8abb      	ldrh	r3, [r7, #20]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d901      	bls.n	80002d0 <calculate_average+0x50>
 80002cc:	897b      	ldrh	r3, [r7, #10]
 80002ce:	82bb      	strh	r3, [r7, #20]
        sum += value;
 80002d0:	897b      	ldrh	r3, [r7, #10]
 80002d2:	693a      	ldr	r2, [r7, #16]
 80002d4:	4413      	add	r3, r2
 80002d6:	613b      	str	r3, [r7, #16]
    for (int i = 1; i < size; i++) {
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	dbe2      	blt.n	80002ac <calculate_average+0x2c>
    }

    // Restar el mínimo y el máximo
    sum -= (min + max);
 80002e6:	8afa      	ldrh	r2, [r7, #22]
 80002e8:	8abb      	ldrh	r3, [r7, #20]
 80002ea:	4413      	add	r3, r2
 80002ec:	693a      	ldr	r2, [r7, #16]
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	613b      	str	r3, [r7, #16]

    // Devolver el promedio
    return sum / (size - 2);
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	3b02      	subs	r3, #2
 80002f6:	693a      	ldr	r2, [r7, #16]
 80002f8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <apply_deadzone>:

int apply_deadzone(int value, int center) {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	6039      	str	r1, [r7, #0]
    if (value > center - DEADZONE && value < center + DEADZONE) {
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	3b22      	subs	r3, #34	@ 0x22
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	429a      	cmp	r2, r3
 800031a:	db06      	blt.n	800032a <apply_deadzone+0x22>
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	3322      	adds	r3, #34	@ 0x22
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	dc01      	bgt.n	800032a <apply_deadzone+0x22>
        return center;  // Si está dentro de la zona muerta, ajusta al valor central
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	e000      	b.n	800032c <apply_deadzone+0x24>
    }
    return value;  // Si está fuera, devuelve el valor original
 800032a:	687b      	ldr	r3, [r7, #4]
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <LED_On>:

void LED_On(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);  // Encender LED
 800033c:	2201      	movs	r2, #1
 800033e:	2108      	movs	r1, #8
 8000340:	4802      	ldr	r0, [pc, #8]	@ (800034c <LED_On+0x14>)
 8000342:	f002 f9ef 	bl	8002724 <HAL_GPIO_WritePin>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <LED_Off>:

void LED_Off(void) {
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);  // Apagar LED
 8000354:	2200      	movs	r2, #0
 8000356:	2108      	movs	r1, #8
 8000358:	4802      	ldr	r0, [pc, #8]	@ (8000364 <LED_Off+0x14>)
 800035a:	f002 f9e3 	bl	8002724 <HAL_GPIO_WritePin>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	48000400 	.word	0x48000400

08000368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b096      	sub	sp, #88	@ 0x58
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800036e:	f000 fd19 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000372:	f000 f967 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000376:	f000 faed 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800037a:	f000 fabb 	bl	80008f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800037e:	f000 f9bb 	bl	80006f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000382:	f000 fa29 	bl	80007d8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000386:	f000 fa85 	bl	8000894 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#define INIT_SAMPLES 100  // Número de muestras para calibrar el centro

// Calibrar el centro del joystick
int tempSumX = 0, tempSumY = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	657b      	str	r3, [r7, #84]	@ 0x54
 800038e:	2300      	movs	r3, #0
 8000390:	653b      	str	r3, [r7, #80]	@ 0x50
for (int i = 0; i < INIT_SAMPLES; i++) {
 8000392:	2300      	movs	r3, #0
 8000394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000396:	e023      	b.n	80003e0 <main+0x78>
    HAL_ADC_Start(&hadc1);
 8000398:	4898      	ldr	r0, [pc, #608]	@ (80005fc <main+0x294>)
 800039a:	f000 ff3d 	bl	8001218 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);
 800039e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003a2:	4896      	ldr	r0, [pc, #600]	@ (80005fc <main+0x294>)
 80003a4:	f000 ffee 	bl	8001384 <HAL_ADC_PollForConversion>
    tempSumX += HAL_ADC_GetValue(&hadc1);
 80003a8:	4894      	ldr	r0, [pc, #592]	@ (80005fc <main+0x294>)
 80003aa:	f001 f8b9 	bl	8001520 <HAL_ADC_GetValue>
 80003ae:	4602      	mov	r2, r0
 80003b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003b2:	4413      	add	r3, r2
 80003b4:	657b      	str	r3, [r7, #84]	@ 0x54

    HAL_ADC_Start(&hadc2);
 80003b6:	4892      	ldr	r0, [pc, #584]	@ (8000600 <main+0x298>)
 80003b8:	f000 ff2e 	bl	8001218 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, 1000);
 80003bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80003c0:	488f      	ldr	r0, [pc, #572]	@ (8000600 <main+0x298>)
 80003c2:	f000 ffdf 	bl	8001384 <HAL_ADC_PollForConversion>
    tempSumY += HAL_ADC_GetValue(&hadc2);
 80003c6:	488e      	ldr	r0, [pc, #568]	@ (8000600 <main+0x298>)
 80003c8:	f001 f8aa 	bl	8001520 <HAL_ADC_GetValue>
 80003cc:	4602      	mov	r2, r0
 80003ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80003d0:	4413      	add	r3, r2
 80003d2:	653b      	str	r3, [r7, #80]	@ 0x50

    HAL_Delay(10);  // Pequeña pausa entre lecturas
 80003d4:	200a      	movs	r0, #10
 80003d6:	f000 fd4b 	bl	8000e70 <HAL_Delay>
for (int i = 0; i < INIT_SAMPLES; i++) {
 80003da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80003dc:	3301      	adds	r3, #1
 80003de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80003e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80003e2:	2b63      	cmp	r3, #99	@ 0x63
 80003e4:	ddd8      	ble.n	8000398 <main+0x30>
}
centerX = tempSumX / INIT_SAMPLES;
 80003e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80003e8:	4a86      	ldr	r2, [pc, #536]	@ (8000604 <main+0x29c>)
 80003ea:	fb82 1203 	smull	r1, r2, r2, r3
 80003ee:	1152      	asrs	r2, r2, #5
 80003f0:	17db      	asrs	r3, r3, #31
 80003f2:	1ad3      	subs	r3, r2, r3
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	4b84      	ldr	r3, [pc, #528]	@ (8000608 <main+0x2a0>)
 80003f8:	801a      	strh	r2, [r3, #0]
centerY = tempSumY / INIT_SAMPLES;
 80003fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80003fc:	4a81      	ldr	r2, [pc, #516]	@ (8000604 <main+0x29c>)
 80003fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000402:	1152      	asrs	r2, r2, #5
 8000404:	17db      	asrs	r3, r3, #31
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	b29a      	uxth	r2, r3
 800040a:	4b80      	ldr	r3, [pc, #512]	@ (800060c <main+0x2a4>)
 800040c:	801a      	strh	r2, [r3, #0]


  while (1)
  {
	  // Leer valores del ADC
	      HAL_ADC_Start(&hadc1);
 800040e:	487b      	ldr	r0, [pc, #492]	@ (80005fc <main+0x294>)
 8000410:	f000 ff02 	bl	8001218 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1000);
 8000414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000418:	4878      	ldr	r0, [pc, #480]	@ (80005fc <main+0x294>)
 800041a:	f000 ffb3 	bl	8001384 <HAL_ADC_PollForConversion>
	      readingsX[index] = HAL_ADC_GetValue(&hadc1);
 800041e:	4877      	ldr	r0, [pc, #476]	@ (80005fc <main+0x294>)
 8000420:	f001 f87e 	bl	8001520 <HAL_ADC_GetValue>
 8000424:	4602      	mov	r2, r0
 8000426:	4b7a      	ldr	r3, [pc, #488]	@ (8000610 <main+0x2a8>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	b291      	uxth	r1, r2
 800042c:	4a79      	ldr	r2, [pc, #484]	@ (8000614 <main+0x2ac>)
 800042e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	      HAL_ADC_Start(&hadc2);
 8000432:	4873      	ldr	r0, [pc, #460]	@ (8000600 <main+0x298>)
 8000434:	f000 fef0 	bl	8001218 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc2, 1000);
 8000438:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800043c:	4870      	ldr	r0, [pc, #448]	@ (8000600 <main+0x298>)
 800043e:	f000 ffa1 	bl	8001384 <HAL_ADC_PollForConversion>
	      readingsY[index] = HAL_ADC_GetValue(&hadc2);
 8000442:	486f      	ldr	r0, [pc, #444]	@ (8000600 <main+0x298>)
 8000444:	f001 f86c 	bl	8001520 <HAL_ADC_GetValue>
 8000448:	4602      	mov	r2, r0
 800044a:	4b71      	ldr	r3, [pc, #452]	@ (8000610 <main+0x2a8>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	b291      	uxth	r1, r2
 8000450:	4a71      	ldr	r2, [pc, #452]	@ (8000618 <main+0x2b0>)
 8000452:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	      uint16_t currentY = readingsY[index]; // Valor actual de Y
 8000456:	4b6e      	ldr	r3, [pc, #440]	@ (8000610 <main+0x2a8>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a6f      	ldr	r2, [pc, #444]	@ (8000618 <main+0x2b0>)
 800045c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000460:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	      // Verificar si el botón está presionado (Y > BUTTON_THRESHOLD)
	      if (currentY > BUTTON_THRESHOLD && !isBlocked) {
 8000464:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000468:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800046c:	d926      	bls.n	80004bc <main+0x154>
 800046e:	4b6b      	ldr	r3, [pc, #428]	@ (800061c <main+0x2b4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d122      	bne.n	80004bc <main+0x154>
	          pulseCounter++;
 8000476:	4b6a      	ldr	r3, [pc, #424]	@ (8000620 <main+0x2b8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	3301      	adds	r3, #1
 800047c:	4a68      	ldr	r2, [pc, #416]	@ (8000620 <main+0x2b8>)
 800047e:	6013      	str	r3, [r2, #0]
	          if (pulseCounter >= BUTTON_DEBOUNCE_COUNT) {
 8000480:	4b67      	ldr	r3, [pc, #412]	@ (8000620 <main+0x2b8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b09      	cmp	r3, #9
 8000486:	dd1d      	ble.n	80004c4 <main+0x15c>
	              isSending = !isSending;   // Alternar estado de envío
 8000488:	4b66      	ldr	r3, [pc, #408]	@ (8000624 <main+0x2bc>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	bf0c      	ite	eq
 8000490:	2301      	moveq	r3, #1
 8000492:	2300      	movne	r3, #0
 8000494:	b2db      	uxtb	r3, r3
 8000496:	461a      	mov	r2, r3
 8000498:	4b62      	ldr	r3, [pc, #392]	@ (8000624 <main+0x2bc>)
 800049a:	601a      	str	r2, [r3, #0]
	              pulseCounter = 0;         // Reiniciar contador
 800049c:	4b60      	ldr	r3, [pc, #384]	@ (8000620 <main+0x2b8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
	              if (!isSending) {
 80004a2:	4b60      	ldr	r3, [pc, #384]	@ (8000624 <main+0x2bc>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d10c      	bne.n	80004c4 <main+0x15c>
	                  isBlocked = 1;        // Bloquear después de desactivar envío
 80004aa:	4b5c      	ldr	r3, [pc, #368]	@ (800061c <main+0x2b4>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	601a      	str	r2, [r3, #0]
	                  blockTime = HAL_GetTick();  // Guardar tiempo de inicio del bloqueo
 80004b0:	f000 fcd2 	bl	8000e58 <HAL_GetTick>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a5c      	ldr	r2, [pc, #368]	@ (8000628 <main+0x2c0>)
 80004b8:	6013      	str	r3, [r2, #0]
	          if (pulseCounter >= BUTTON_DEBOUNCE_COUNT) {
 80004ba:	e003      	b.n	80004c4 <main+0x15c>
	              }
	          }
	      } else {
	          pulseCounter = 0; // Reiniciar si no está por encima del umbral
 80004bc:	4b58      	ldr	r3, [pc, #352]	@ (8000620 <main+0x2b8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	e000      	b.n	80004c6 <main+0x15e>
	          if (pulseCounter >= BUTTON_DEBOUNCE_COUNT) {
 80004c4:	bf00      	nop
	      }

	      // Verificar si han pasado 10 segundos para desbloquear
	      if (isBlocked && (HAL_GetTick() - blockTime >= 10000)) {
 80004c6:	4b55      	ldr	r3, [pc, #340]	@ (800061c <main+0x2b4>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d00c      	beq.n	80004e8 <main+0x180>
 80004ce:	f000 fcc3 	bl	8000e58 <HAL_GetTick>
 80004d2:	4602      	mov	r2, r0
 80004d4:	4b54      	ldr	r3, [pc, #336]	@ (8000628 <main+0x2c0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80004de:	4293      	cmp	r3, r2
 80004e0:	d902      	bls.n	80004e8 <main+0x180>
	          isBlocked = 0; // Desbloquear
 80004e2:	4b4e      	ldr	r3, [pc, #312]	@ (800061c <main+0x2b4>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
	      }

	      // Si estamos enviando datos normales
	      if (isSending) {
 80004e8:	4b4e      	ldr	r3, [pc, #312]	@ (8000624 <main+0x2bc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d05e      	beq.n	80005ae <main+0x246>
	          index++;
 80004f0:	4b47      	ldr	r3, [pc, #284]	@ (8000610 <main+0x2a8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	4a46      	ldr	r2, [pc, #280]	@ (8000610 <main+0x2a8>)
 80004f8:	6013      	str	r3, [r2, #0]
	          if (index == NUM_READINGS) {
 80004fa:	4b45      	ldr	r3, [pc, #276]	@ (8000610 <main+0x2a8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b0a      	cmp	r3, #10
 8000500:	d177      	bne.n	80005f2 <main+0x28a>
	              int avgX = calculate_average(readingsX, NUM_READINGS);
 8000502:	210a      	movs	r1, #10
 8000504:	4843      	ldr	r0, [pc, #268]	@ (8000614 <main+0x2ac>)
 8000506:	f7ff febb 	bl	8000280 <calculate_average>
 800050a:	6478      	str	r0, [r7, #68]	@ 0x44
	              int avgY = calculate_average(readingsY, NUM_READINGS);
 800050c:	210a      	movs	r1, #10
 800050e:	4842      	ldr	r0, [pc, #264]	@ (8000618 <main+0x2b0>)
 8000510:	f7ff feb6 	bl	8000280 <calculate_average>
 8000514:	6438      	str	r0, [r7, #64]	@ 0x40

	              // Aplicar zona muerta usando los valores calibrados
	              avgX = apply_deadzone(avgX, centerX);
 8000516:	4b3c      	ldr	r3, [pc, #240]	@ (8000608 <main+0x2a0>)
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	4619      	mov	r1, r3
 800051c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800051e:	f7ff fef3 	bl	8000308 <apply_deadzone>
 8000522:	6478      	str	r0, [r7, #68]	@ 0x44
	              avgY = apply_deadzone(avgY, centerY);
 8000524:	4b39      	ldr	r3, [pc, #228]	@ (800060c <main+0x2a4>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800052c:	f7ff feec 	bl	8000308 <apply_deadzone>
 8000530:	6438      	str	r0, [r7, #64]	@ 0x40

	              // Transmitir solo si hay cambios significativos
	              if (abs(avgX - lastSentX) > CHANGE_THRESHOLD || abs(avgY - lastSentY) > CHANGE_THRESHOLD) {
 8000532:	4b3e      	ldr	r3, [pc, #248]	@ (800062c <main+0x2c4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	bfb8      	it	lt
 800053e:	425b      	neglt	r3, r3
 8000540:	2b05      	cmp	r3, #5
 8000542:	dc08      	bgt.n	8000556 <main+0x1ee>
 8000544:	4b3a      	ldr	r3, [pc, #232]	@ (8000630 <main+0x2c8>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800054a:	1ad3      	subs	r3, r2, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	bfb8      	it	lt
 8000550:	425b      	neglt	r3, r3
 8000552:	2b05      	cmp	r3, #5
 8000554:	dd27      	ble.n	80005a6 <main+0x23e>
	            	  LED_On();
 8000556:	f7ff feef 	bl	8000338 <LED_On>
	                  char msg[50];
	                  sprintf(msg, "%d/%d\r\n", avgX, avgY);
 800055a:	4638      	mov	r0, r7
 800055c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800055e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000560:	4934      	ldr	r1, [pc, #208]	@ (8000634 <main+0x2cc>)
 8000562:	f004 f8a5 	bl	80046b0 <siprintf>
	                  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000566:	463b      	mov	r3, r7
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe31 	bl	80001d0 <strlen>
 800056e:	4603      	mov	r3, r0
 8000570:	b29a      	uxth	r2, r3
 8000572:	4639      	mov	r1, r7
 8000574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000578:	482f      	ldr	r0, [pc, #188]	@ (8000638 <main+0x2d0>)
 800057a:	f003 fcbd 	bl	8003ef8 <HAL_UART_Transmit>
	                  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800057e:	463b      	mov	r3, r7
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe25 	bl	80001d0 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	4639      	mov	r1, r7
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000590:	482a      	ldr	r0, [pc, #168]	@ (800063c <main+0x2d4>)
 8000592:	f003 fcb1 	bl	8003ef8 <HAL_UART_Transmit>

	                  lastSentX = avgX;
 8000596:	4a25      	ldr	r2, [pc, #148]	@ (800062c <main+0x2c4>)
 8000598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800059a:	6013      	str	r3, [r2, #0]
	                  lastSentY = avgY;
 800059c:	4a24      	ldr	r2, [pc, #144]	@ (8000630 <main+0x2c8>)
 800059e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80005a0:	6013      	str	r3, [r2, #0]
	                  LED_Off();
 80005a2:	f7ff fed5 	bl	8000350 <LED_Off>
	              }
	              index = 0; // Reiniciar índice
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <main+0x2a8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e021      	b.n	80005f2 <main+0x28a>
	          }
	      } else {
	          // Enviar 0,0 si estamos en modo pausa
	          char msg[10];
	          sprintf(msg, "0/0\r\n");
 80005ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005b2:	4923      	ldr	r1, [pc, #140]	@ (8000640 <main+0x2d8>)
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f87b 	bl	80046b0 <siprintf>
	          HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe06 	bl	80001d0 <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d0:	4819      	ldr	r0, [pc, #100]	@ (8000638 <main+0x2d0>)
 80005d2:	f003 fc91 	bl	8003ef8 <HAL_UART_Transmit>
	          HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80005d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ec:	4813      	ldr	r0, [pc, #76]	@ (800063c <main+0x2d4>)
 80005ee:	f003 fc83 	bl	8003ef8 <HAL_UART_Transmit>
	      }


	  	HAL_Delay(10); // Ajustar el retraso según sea necesario
 80005f2:	200a      	movs	r0, #10
 80005f4:	f000 fc3c 	bl	8000e70 <HAL_Delay>
  {
 80005f8:	e709      	b.n	800040e <main+0xa6>
 80005fa:	bf00      	nop
 80005fc:	20000080 	.word	0x20000080
 8000600:	200000d0 	.word	0x200000d0
 8000604:	51eb851f 	.word	0x51eb851f
 8000608:	20000000 	.word	0x20000000
 800060c:	20000002 	.word	0x20000002
 8000610:	20000258 	.word	0x20000258
 8000614:	20000230 	.word	0x20000230
 8000618:	20000244 	.word	0x20000244
 800061c:	2000026c 	.word	0x2000026c
 8000620:	20000264 	.word	0x20000264
 8000624:	20000004 	.word	0x20000004
 8000628:	20000268 	.word	0x20000268
 800062c:	2000025c 	.word	0x2000025c
 8000630:	20000260 	.word	0x20000260
 8000634:	08005008 	.word	0x08005008
 8000638:	200001a8 	.word	0x200001a8
 800063c:	20000120 	.word	0x20000120
 8000640:	08005010 	.word	0x08005010

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b096      	sub	sp, #88	@ 0x58
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064e:	2228      	movs	r2, #40	@ 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f84c 	bl	80046f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800068c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f85c 	bl	8002754 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006a2:	f000 f9a1 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 f885 	bl	80037d0 <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006cc:	f000 f98c 	bl	80009e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 80006d0:	2381      	movs	r3, #129	@ 0x81
 80006d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80006d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fa95 	bl	8003c10 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006ec:	f000 f97c 	bl	80009e8 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	3758      	adds	r7, #88	@ 0x58
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800071a:	4b2e      	ldr	r3, [pc, #184]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800071c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000720:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000722:	4b2c      	ldr	r3, [pc, #176]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000728:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000736:	2201      	movs	r2, #1
 8000738:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000748:	4b22      	ldr	r3, [pc, #136]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800074a:	2201      	movs	r2, #1
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000756:	2201      	movs	r2, #1
 8000758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075a:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000764:	2204      	movs	r2, #4
 8000766:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	4817      	ldr	r0, [pc, #92]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000776:	f000 fbbd 	bl	8000ef4 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 f932 	bl	80009e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 8000790:	f001 fbb4 	bl	8001efc <HAL_ADCEx_MultiModeConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800079a:	f000 f925 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079e:	2301      	movs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <MX_ADC1_Init+0xdc>)
 80007bc:	f001 f8e0 	bl	8001980 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80007c6:	f000 f90f 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	@ 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000080 	.word	0x20000080

080007d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007ee:	4b27      	ldr	r3, [pc, #156]	@ (800088c <MX_ADC2_Init+0xb4>)
 80007f0:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_ADC2_Init+0xb8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f4:	4b25      	ldr	r3, [pc, #148]	@ (800088c <MX_ADC2_Init+0xb4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <MX_ADC2_Init+0xb4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000806:	4b21      	ldr	r3, [pc, #132]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_ADC2_Init+0xb4>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_ADC2_Init+0xb4>)
 800081c:	2201      	movs	r2, #1
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000828:	2201      	movs	r2, #1
 800082a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_ADC2_Init+0xb4>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000836:	2204      	movs	r2, #4
 8000838:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800083a:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_ADC2_Init+0xb4>)
 800083c:	2200      	movs	r2, #0
 800083e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000842:	2200      	movs	r2, #0
 8000844:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000846:	4811      	ldr	r0, [pc, #68]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000848:	f000 fb54 	bl	8000ef4 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000852:	f000 f8c9 	bl	80009e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	2301      	movs	r3, #1
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	@ (800088c <MX_ADC2_Init+0xb4>)
 8000874:	f001 f884 	bl	8001980 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800087e:	f000 f8b3 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000d0 	.word	0x200000d0
 8000890:	50000100 	.word	0x50000100

08000894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <MX_USART1_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_USART1_UART_Init+0x58>)
 80008d8:	f003 fac0 	bl	8003e5c <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f881 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000120 	.word	0x20000120
 80008f0:	40013800 	.word	0x40013800

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	f003 fa90 	bl	8003e5c <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f851 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200001a8 	.word	0x200001a8
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a1c      	ldr	r2, [pc, #112]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a16      	ldr	r2, [pc, #88]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_GPIO_Init+0x8c>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2108      	movs	r1, #8
 80009b6:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <MX_GPIO_Init+0x90>)
 80009b8:	f001 feb4 	bl	8002724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009bc:	2308      	movs	r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_GPIO_Init+0x90>)
 80009d4:	f001 fd34 	bl	8002440 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000400 	.word	0x48000400

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <Error_Handler+0x8>

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <HAL_MspInit+0x44>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6193      	str	r3, [r2, #24]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	61d3      	str	r3, [r2, #28]
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_MspInit+0x44>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000a5c:	d136      	bne.n	8000acc <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	4a39      	ldr	r2, [pc, #228]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000a66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a68:	4b38      	ldr	r3, [pc, #224]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10b      	bne.n	8000a88 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a70:	4b37      	ldr	r3, [pc, #220]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a36      	ldr	r2, [pc, #216]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7a:	6153      	str	r3, [r2, #20]
 8000a7c:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a30      	ldr	r2, [pc, #192]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a92:	6153      	str	r3, [r2, #20]
 8000a94:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab6:	f001 fcc3 	bl	8002440 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2012      	movs	r0, #18
 8000ac0:	f001 fc87 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ac4:	2012      	movs	r0, #18
 8000ac6:	f001 fca0 	bl	800240a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000aca:	e03a      	b.n	8000b42 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a20      	ldr	r2, [pc, #128]	@ (8000b54 <HAL_ADC_MspInit+0x118>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d135      	bne.n	8000b42 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000ade:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	4a18      	ldr	r2, [pc, #96]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	6153      	str	r3, [r2, #20]
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0a:	6153      	str	r3, [r2, #20]
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2e:	f001 fc87 	bl	8002440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2100      	movs	r1, #0
 8000b36:	2012      	movs	r0, #18
 8000b38:	f001 fc4b 	bl	80023d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b3c:	2012      	movs	r0, #18
 8000b3e:	f001 fc64 	bl	800240a <HAL_NVIC_EnableIRQ>
}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	@ 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000270 	.word	0x20000270
 8000b50:	40021000 	.word	0x40021000
 8000b54:	50000100 	.word	0x50000100

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	@ 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 031c 	add.w	r3, r7, #28
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a2f      	ldr	r2, [pc, #188]	@ (8000c34 <HAL_UART_MspInit+0xdc>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8e:	61bb      	str	r3, [r7, #24]
 8000b90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b29      	ldr	r3, [pc, #164]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a28      	ldr	r2, [pc, #160]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b26      	ldr	r3, [pc, #152]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000baa:	23c0      	movs	r3, #192	@ 0xc0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <HAL_UART_MspInit+0xe4>)
 8000bc6:	f001 fc3b 	bl	8002440 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	e02e      	b.n	8000c2a <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c40 <HAL_UART_MspInit+0xe8>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d129      	bne.n	8000c2a <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000bf0:	695b      	ldr	r3, [r3, #20]
 8000bf2:	4a11      	ldr	r2, [pc, #68]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf8:	6153      	str	r3, [r2, #20]
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_UART_MspInit+0xe0>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000c06:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c18:	2307      	movs	r3, #7
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c26:	f001 fc0b 	bl	8002440 <HAL_GPIO_Init>
}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	40004400 	.word	0x40004400

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9a:	f000 f8c9 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ca8:	4803      	ldr	r0, [pc, #12]	@ (8000cb8 <ADC1_2_IRQHandler+0x14>)
 8000caa:	f000 fc47 	bl	800153c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000cae:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <ADC1_2_IRQHandler+0x18>)
 8000cb0:	f000 fc44 	bl	800153c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000080 	.word	0x20000080
 8000cbc:	200000d0 	.word	0x200000d0

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf0:	f003 fd06 	bl	8004700 <__errno>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cfe:	e009      	b.n	8000d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <_sbrk+0x64>)
 8000d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20003000 	.word	0x20003000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	20000274 	.word	0x20000274
 8000d28:	200003c8 	.word	0x200003c8

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	@ (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d54:	f7ff ffea 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d94 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0a      	ldr	r4, [pc, #40]	@ (8000d9c <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f003 fcc5 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d82:	f7ff faf1 	bl	8000368 <main>

08000d86 <LoopForever>:

LoopForever:
    b LoopForever
 8000d86:	e7fe      	b.n	8000d86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d88:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d94:	08005094 	.word	0x08005094
  ldr r2, =_sbss
 8000d98:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d9c:	200003c4 	.word	0x200003c4

08000da0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <CAN_RX0_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_Init+0x28>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_Init+0x28>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f001 fb01 	bl	80023bc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fe18 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fb19 	bl	8002426 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e0c:	f001 fae1 	bl	80023d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000278 	.word	0x20000278

08000e58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000278 	.word	0x20000278

08000e70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000010 	.word	0x20000010

08000eb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b09a      	sub	sp, #104	@ 0x68
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e172      	b.n	80011fa <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d176      	bne.n	8001014 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d152      	bne.n	8000fd4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fd77 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d13b      	bne.n	8000fd4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f001 f8f7 	bl	8002150 <ADC_Disable>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d12f      	bne.n	8000fd4 <HAL_ADC_Init+0xe0>
 8000f74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d12b      	bne.n	8000fd4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f84:	f023 0302 	bic.w	r3, r3, #2
 8000f88:	f043 0202 	orr.w	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f9e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000fae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb0:	4b94      	ldr	r3, [pc, #592]	@ (8001204 <HAL_ADC_Init+0x310>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a94      	ldr	r2, [pc, #592]	@ (8001208 <HAL_ADC_Init+0x314>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	0c9a      	lsrs	r2, r3, #18
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4413      	add	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fc6:	e002      	b.n	8000fce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f9      	bne.n	8000fc8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ff0:	d110      	bne.n	8001014 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f023 0312 	bic.w	r3, r3, #18
 8000ffa:	f043 0210 	orr.w	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	f043 0201 	orr.w	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 0310 	and.w	r3, r3, #16
 800101c:	2b00      	cmp	r3, #0
 800101e:	f040 80df 	bne.w	80011e0 <HAL_ADC_Init+0x2ec>
 8001022:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001026:	2b00      	cmp	r3, #0
 8001028:	f040 80da 	bne.w	80011e0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 80d2 	bne.w	80011e0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001044:	f043 0202 	orr.w	r2, r3, #2
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800104c:	4b6f      	ldr	r3, [pc, #444]	@ (800120c <HAL_ADC_Init+0x318>)
 800104e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001058:	d102      	bne.n	8001060 <HAL_ADC_Init+0x16c>
 800105a:	4b6d      	ldr	r3, [pc, #436]	@ (8001210 <HAL_ADC_Init+0x31c>)
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e002      	b.n	8001066 <HAL_ADC_Init+0x172>
 8001060:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001064:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_ADC_Init+0x192>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x192>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_ADC_Init+0x194>
 8001086:	2300      	movs	r3, #0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d11c      	bne.n	80010c6 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800108c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800108e:	2b00      	cmp	r3, #0
 8001090:	d010      	beq.n	80010b4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_ADC_Init+0x1ba>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x1ba>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <HAL_ADC_Init+0x1bc>
 80010ae:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d108      	bne.n	80010c6 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80010b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80010c4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	035b      	lsls	r3, r3, #13
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80010d0:	2a01      	cmp	r2, #1
 80010d2:	d002      	beq.n	80010da <HAL_ADC_Init+0x1e6>
 80010d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010d8:	e000      	b.n	80010dc <HAL_ADC_Init+0x1e8>
 80010da:	2200      	movs	r2, #0
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ec:	4313      	orrs	r3, r2
 80010ee:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d11b      	bne.n	8001132 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7e5b      	ldrb	r3, [r3, #25]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d109      	bne.n	8001116 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001106:	3b01      	subs	r3, #1
 8001108:	045a      	lsls	r2, r3, #17
 800110a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800110c:	4313      	orrs	r3, r2
 800110e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
 8001114:	e00d      	b.n	8001132 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800111e:	f043 0220 	orr.w	r2, r3, #32
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	2b01      	cmp	r3, #1
 8001138:	d007      	beq.n	800114a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001142:	4313      	orrs	r3, r2
 8001144:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001146:	4313      	orrs	r3, r2
 8001148:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b00      	cmp	r3, #0
 8001156:	d114      	bne.n	8001182 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001166:	f023 0302 	bic.w	r3, r3, #2
 800116a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7e1b      	ldrb	r3, [r3, #24]
 8001170:	039a      	lsls	r2, r3, #14
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4313      	orrs	r3, r2
 800117c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800117e:	4313      	orrs	r3, r2
 8001180:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_ADC_Init+0x320>)
 800118a:	4013      	ands	r3, r2
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6812      	ldr	r2, [r2, #0]
 8001190:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001192:	430b      	orrs	r3, r1
 8001194:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10c      	bne.n	80011b8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a4:	f023 010f 	bic.w	r1, r3, #15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	1e5a      	subs	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80011b6:	e007      	b.n	80011c8 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 020f 	bic.w	r2, r2, #15
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f023 0303 	bic.w	r3, r3, #3
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011de:	e00a      	b.n	80011f6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f023 0312 	bic.w	r3, r3, #18
 80011e8:	f043 0210 	orr.w	r2, r3, #16
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011f0:	2301      	movs	r3, #1
 80011f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3768      	adds	r7, #104	@ 0x68
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000008 	.word	0x20000008
 8001208:	431bde83 	.word	0x431bde83
 800120c:	50000300 	.word	0x50000300
 8001210:	50000100 	.word	0x50000100
 8001214:	fff0c007 	.word	0xfff0c007

08001218 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	f040 809c 	bne.w	800136c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start+0x2a>
 800123e:	2302      	movs	r3, #2
 8001240:	e097      	b.n	8001372 <HAL_ADC_Start+0x15a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 ff1c 	bl	8002088 <ADC_Enable>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 8083 	bne.w	8001362 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001264:	f023 0301 	bic.w	r3, r3, #1
 8001268:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001270:	4b42      	ldr	r3, [pc, #264]	@ (800137c <HAL_ADC_Start+0x164>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 031f 	and.w	r3, r3, #31
 8001278:	2b00      	cmp	r3, #0
 800127a:	d004      	beq.n	8001286 <HAL_ADC_Start+0x6e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001284:	d115      	bne.n	80012b2 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d027      	beq.n	80012f0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012a8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012b0:	e01e      	b.n	80012f0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012c6:	d004      	beq.n	80012d2 <HAL_ADC_Start+0xba>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001380 <HAL_ADC_Start+0x168>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10e      	bne.n	80012f0 <HAL_ADC_Start+0xd8>
 80012d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012fc:	d106      	bne.n	800130c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f023 0206 	bic.w	r2, r3, #6
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	645a      	str	r2, [r3, #68]	@ 0x44
 800130a:	e002      	b.n	8001312 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	221c      	movs	r2, #28
 8001320:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <HAL_ADC_Start+0x164>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	2b00      	cmp	r3, #0
 800132c:	d010      	beq.n	8001350 <HAL_ADC_Start+0x138>
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <HAL_ADC_Start+0x164>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	2b05      	cmp	r3, #5
 8001338:	d00a      	beq.n	8001350 <HAL_ADC_Start+0x138>
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_ADC_Start+0x164>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	2b09      	cmp	r3, #9
 8001344:	d004      	beq.n	8001350 <HAL_ADC_Start+0x138>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800134e:	d10f      	bne.n	8001370 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0204 	orr.w	r2, r2, #4
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	e006      	b.n	8001370 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800136a:	e001      	b.n	8001370 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800136c:	2302      	movs	r3, #2
 800136e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	50000300 	.word	0x50000300
 8001380:	50000100 	.word	0x50000100

08001384 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b08      	cmp	r3, #8
 8001398:	d102      	bne.n	80013a0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800139a:	2308      	movs	r3, #8
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e02e      	b.n	80013fe <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a0:	4b5e      	ldr	r3, [pc, #376]	@ (800151c <HAL_ADC_PollForConversion+0x198>)
 80013a2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d112      	bne.n	80013d6 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d11d      	bne.n	80013fa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e09d      	b.n	8001512 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f043 0220 	orr.w	r2, r3, #32
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e08b      	b.n	8001512 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013fe:	4b47      	ldr	r3, [pc, #284]	@ (800151c <HAL_ADC_PollForConversion+0x198>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_ADC_PollForConversion+0x90>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001412:	d104      	bne.n	800141e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	e003      	b.n	8001426 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800141e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001426:	f7ff fd17 	bl	8000e58 <HAL_GetTick>
 800142a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800142c:	e021      	b.n	8001472 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001434:	d01d      	beq.n	8001472 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <HAL_ADC_PollForConversion+0xc8>
 800143c:	f7ff fd0c 	bl	8000e58 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d212      	bcs.n	8001472 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10b      	bne.n	8001472 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	f043 0204 	orr.w	r2, r3, #4
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e04f      	b.n	8001512 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0d6      	beq.n	800142e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001496:	2b00      	cmp	r3, #0
 8001498:	d131      	bne.n	80014fe <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d12c      	bne.n	80014fe <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d125      	bne.n	80014fe <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d112      	bne.n	80014fe <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	f043 0201 	orr.w	r2, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e4:	e00b      	b.n	80014fe <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ea:	f043 0220 	orr.w	r2, r3, #32
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d103      	bne.n	8001510 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	50000300 	.word	0x50000300

08001520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	2b00      	cmp	r3, #0
 8001568:	d004      	beq.n	8001574 <HAL_ADC_IRQHandler+0x38>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800157a:	2b00      	cmp	r3, #0
 800157c:	d076      	beq.n	800166c <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d071      	beq.n	800166c <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	d105      	bne.n	80015a0 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015a0:	4b82      	ldr	r3, [pc, #520]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d010      	beq.n	80015ce <HAL_ADC_IRQHandler+0x92>
 80015ac:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d00a      	beq.n	80015ce <HAL_ADC_IRQHandler+0x92>
 80015b8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b09      	cmp	r3, #9
 80015c2:	d004      	beq.n	80015ce <HAL_ADC_IRQHandler+0x92>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015cc:	d104      	bne.n	80015d8 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	e003      	b.n	80015e0 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d137      	bne.n	800165e <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d132      	bne.n	800165e <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d02d      	beq.n	800165e <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d11a      	bne.n	8001646 <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 020c 	bic.w	r2, r2, #12
 800161e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d112      	bne.n	800165e <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f043 0201 	orr.w	r2, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	641a      	str	r2, [r3, #64]	@ 0x40
 8001644:	e00b      	b.n	800165e <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f043 0210 	orr.w	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fc2a 	bl	8000eb8 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	220c      	movs	r2, #12
 800166a:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <HAL_ADC_IRQHandler+0x144>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a5 	beq.w	80017d6 <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 809f 	beq.w	80017d6 <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d010      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x196>
 80016b0:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d00a      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x196>
 80016bc:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d004      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x196>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016d0:	d104      	bne.n	80016dc <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e003      	b.n	80016e4 <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d16a      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001706:	2b00      	cmp	r3, #0
 8001708:	d15e      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001710:	2b00      	cmp	r3, #0
 8001712:	d159      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d054      	beq.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800171e:	4b23      	ldr	r3, [pc, #140]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d010      	beq.n	800174c <HAL_ADC_IRQHandler+0x210>
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b06      	cmp	r3, #6
 8001734:	d00a      	beq.n	800174c <HAL_ADC_IRQHandler+0x210>
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_ADC_IRQHandler+0x270>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2b07      	cmp	r3, #7
 8001740:	d004      	beq.n	800174c <HAL_ADC_IRQHandler+0x210>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800174a:	d104      	bne.n	8001756 <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	e003      	b.n	800175e <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001756:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12f      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d11c      	bne.n	80017b0 <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001784:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d114      	bne.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80017aa:	e00d      	b.n	80017c8 <HAL_ADC_IRQHandler+0x28c>
 80017ac:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	f043 0210 	orr.w	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	f043 0201 	orr.w	r2, r3, #1
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8b1 	bl	8001930 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2260      	movs	r2, #96	@ 0x60
 80017d4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d011      	beq.n	8001804 <HAL_ADC_IRQHandler+0x2c8>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00c      	beq.n	8001804 <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff fb68 	bl	8000ecc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2280      	movs	r2, #128	@ 0x80
 8001802:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <HAL_ADC_IRQHandler+0x2f8>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f897 	bl	8001958 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001832:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800183a:	2b00      	cmp	r3, #0
 800183c:	d012      	beq.n	8001864 <HAL_ADC_IRQHandler+0x328>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f889 	bl	800196c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001862:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03b      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x3aa>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	2b00      	cmp	r3, #0
 8001876:	d036      	beq.n	80018e6 <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 8001880:	2301      	movs	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	e019      	b.n	80018ba <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001886:	4b29      	ldr	r3, [pc, #164]	@ (800192c <HAL_ADC_IRQHandler+0x3f0>)
 8001888:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 80018a4:	2301      	movs	r3, #1
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e007      	b.n	80018ba <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d10e      	bne.n	80018de <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff fb01 	bl	8000ee0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2210      	movs	r2, #16
 80018e4:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d018      	beq.n	8001922 <HAL_ADC_IRQHandler+0x3e6>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d013      	beq.n	8001922 <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190a:	f043 0208 	orr.w	r2, r3, #8
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f811 	bl	8001944 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	50000300 	.word	0x50000300

08001930 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001980:	b480      	push	{r7}
 8001982:	b09b      	sub	sp, #108	@ 0x6c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x22>
 800199e:	2302      	movs	r3, #2
 80019a0:	e2a1      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x566>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8285 	bne.w	8001ec4 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d81c      	bhi.n	80019fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	461a      	mov	r2, r3
 80019d6:	231f      	movs	r3, #31
 80019d8:	4093      	lsls	r3, r2
 80019da:	43db      	mvns	r3, r3
 80019dc:	4019      	ands	r1, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80019fa:	e063      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d81e      	bhi.n	8001a42 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	3b1e      	subs	r3, #30
 8001a18:	221f      	movs	r2, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4019      	ands	r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	3b1e      	subs	r3, #30
 8001a34:	fa00 f203 	lsl.w	r2, r0, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a40:	e040      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b0e      	cmp	r3, #14
 8001a48:	d81e      	bhi.n	8001a88 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	3b3c      	subs	r3, #60	@ 0x3c
 8001a5e:	221f      	movs	r2, #31
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4019      	ands	r1, r3
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	3b3c      	subs	r3, #60	@ 0x3c
 8001a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a86:	e01d      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	3b5a      	subs	r3, #90	@ 0x5a
 8001a9c:	221f      	movs	r2, #31
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4019      	ands	r1, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	3b5a      	subs	r3, #90	@ 0x5a
 8001ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80e5 	bne.w	8001c9e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d91c      	bls.n	8001b16 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6999      	ldr	r1, [r3, #24]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	3b1e      	subs	r3, #30
 8001aee:	2207      	movs	r2, #7
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	4019      	ands	r1, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6898      	ldr	r0, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	3b1e      	subs	r3, #30
 8001b08:	fa00 f203 	lsl.w	r2, r0, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	e019      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6959      	ldr	r1, [r3, #20]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	2207      	movs	r2, #7
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4019      	ands	r1, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d84f      	bhi.n	8001c0c <HAL_ADC_ConfigChannel+0x28c>
 8001b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <HAL_ADC_ConfigChannel+0x1f4>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001ba7 	.word	0x08001ba7
 8001b7c:	08001bc9 	.word	0x08001bc9
 8001b80:	08001beb 	.word	0x08001beb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8001dfc <HAL_ADC_ConfigChannel+0x47c>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	0691      	lsls	r1, r2, #26
 8001b94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b96:	430a      	orrs	r2, r1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001ba2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ba4:	e07b      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001bac:	4b93      	ldr	r3, [pc, #588]	@ (8001dfc <HAL_ADC_ConfigChannel+0x47c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	6812      	ldr	r2, [r2, #0]
 8001bb4:	0691      	lsls	r1, r2, #26
 8001bb6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001bc4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001bc6:	e06a      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bce:	4b8b      	ldr	r3, [pc, #556]	@ (8001dfc <HAL_ADC_ConfigChannel+0x47c>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	0691      	lsls	r1, r2, #26
 8001bd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001be6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001be8:	e059      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bf0:	4b82      	ldr	r3, [pc, #520]	@ (8001dfc <HAL_ADC_ConfigChannel+0x47c>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	0691      	lsls	r1, r2, #26
 8001bfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c08:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c0a:	e048      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	069b      	lsls	r3, r3, #26
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c2e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	069b      	lsls	r3, r3, #26
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c52:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	069b      	lsls	r3, r3, #26
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d107      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c76:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	069b      	lsls	r3, r3, #26
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d107      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c9a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001c9c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d108      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x33e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x33e>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x340>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 810a 	bne.w	8001eda <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00f      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001cec:	e049      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d91c      	bls.n	8001d4a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6999      	ldr	r1, [r3, #24]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b1b      	subs	r3, #27
 8001d22:	2207      	movs	r2, #7
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6898      	ldr	r0, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b1b      	subs	r3, #27
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	619a      	str	r2, [r3, #24]
 8001d48:	e01b      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6959      	ldr	r1, [r3, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1c5a      	adds	r2, r3, #1
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4019      	ands	r1, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6898      	ldr	r0, [r3, #8]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d82:	4b1f      	ldr	r3, [pc, #124]	@ (8001e00 <HAL_ADC_ConfigChannel+0x480>)
 8001d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d105      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d015      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d9e:	2b11      	cmp	r3, #17
 8001da0:	d105      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001da2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00b      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	f040 8091 	bne.w	8001eda <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001db8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f040 808a 	bne.w	8001eda <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dce:	d102      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x456>
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <HAL_ADC_ConfigChannel+0x484>)
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x45c>
 8001dd6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dda:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d10e      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x488>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d107      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x488>
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e006      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x48a>
 8001dfc:	83fff000 	.word	0x83fff000
 8001e00:	50000300 	.word	0x50000300
 8001e04:	50000100 	.word	0x50000100
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d150      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d010      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x4b0>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x4b0>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x4b2>
 8001e30:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d13c      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d11d      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x4fa>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e46:	d118      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e52:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x574>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x578>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	0c9a      	lsrs	r2, r3, #18
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e6a:	e002      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e78:	e02e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b11      	cmp	r3, #17
 8001e80:	d10b      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x51a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e8a:	d106      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e96:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e98:	e01e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eac:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001eae:	e013      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb4:	f043 0220 	orr.w	r2, r3, #32
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ec2:	e00a      	b.n	8001eda <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	f043 0220 	orr.w	r2, r3, #32
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001ed6:	e000      	b.n	8001eda <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ed8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ee2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	376c      	adds	r7, #108	@ 0x6c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	431bde83 	.word	0x431bde83

08001efc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b099      	sub	sp, #100	@ 0x64
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f14:	d102      	bne.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001f16:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	e002      	b.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001f1c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f20:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0a2      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e09b      	b.n	8002072 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d17f      	bne.n	8002050 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d179      	bne.n	8002050 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f5c:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001f5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d040      	beq.n	8001fea <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6859      	ldr	r1, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f7a:	035b      	lsls	r3, r3, #13
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f82:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d15c      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001fc6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d14b      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001fcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001fd4:	f023 030f 	bic.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6811      	ldr	r1, [r2, #0]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	6892      	ldr	r2, [r2, #8]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fe6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fe8:	e03c      	b.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001fea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ff2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ff4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d108      	bne.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d123      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002038:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800203a:	2b00      	cmp	r3, #0
 800203c:	d112      	bne.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800203e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002046:	f023 030f 	bic.w	r3, r3, #15
 800204a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800204c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800204e:	e009      	b.n	8002064 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002062:	e000      	b.n	8002066 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002064:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800206e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002072:	4618      	mov	r0, r3
 8002074:	3764      	adds	r7, #100	@ 0x64
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	50000100 	.word	0x50000100
 8002084:	50000300 	.word	0x50000300

08002088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <ADC_Enable+0x2c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <ADC_Enable+0x2c>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <ADC_Enable+0x2e>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d143      	bne.n	8002142 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b22      	ldr	r3, [pc, #136]	@ (800214c <ADC_Enable+0xc4>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e02f      	b.n	8002144 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020f4:	f7fe feb0 	bl	8000e58 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020fa:	e01b      	b.n	8002134 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020fc:	f7fe feac 	bl	8000e58 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d914      	bls.n	8002134 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d00d      	beq.n	8002134 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e007      	b.n	8002144 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d1dc      	bne.n	80020fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	8000003f 	.word	0x8000003f

08002150 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d108      	bne.n	800217c <ADC_Disable+0x2c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <ADC_Disable+0x2c>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <ADC_Disable+0x2e>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d047      	beq.n	8002212 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 030d 	and.w	r3, r3, #13
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10f      	bne.n	80021b0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0202 	orr.w	r2, r2, #2
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2203      	movs	r2, #3
 80021a6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fe56 	bl	8000e58 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021ae:	e029      	b.n	8002204 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f043 0210 	orr.w	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	f043 0201 	orr.w	r2, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e023      	b.n	8002214 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021cc:	f7fe fe44 	bl	8000e58 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d914      	bls.n	8002204 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ec:	f043 0210 	orr.w	r2, r3, #16
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e007      	b.n	8002214 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d0dc      	beq.n	80021cc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800222c:	4b0c      	ldr	r3, [pc, #48]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224e:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <__NVIC_SetPriorityGrouping+0x44>)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	60d3      	str	r3, [r2, #12]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002268:	4b04      	ldr	r3, [pc, #16]	@ (800227c <__NVIC_GetPriorityGrouping+0x18>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 0307 	and.w	r3, r3, #7
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db0b      	blt.n	80022aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <__NVIC_EnableIRQ+0x38>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100

080022bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	db0a      	blt.n	80022e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	490c      	ldr	r1, [pc, #48]	@ (8002308 <__NVIC_SetPriority+0x4c>)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	440b      	add	r3, r1
 80022e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e4:	e00a      	b.n	80022fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4908      	ldr	r1, [pc, #32]	@ (800230c <__NVIC_SetPriority+0x50>)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	3b04      	subs	r3, #4
 80022f4:	0112      	lsls	r2, r2, #4
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	440b      	add	r3, r1
 80022fa:	761a      	strb	r2, [r3, #24]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000e100 	.word	0xe000e100
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002310:	b480      	push	{r7}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f1c3 0307 	rsb	r3, r3, #7
 800232a:	2b04      	cmp	r3, #4
 800232c:	bf28      	it	cs
 800232e:	2304      	movcs	r3, #4
 8002330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3304      	adds	r3, #4
 8002336:	2b06      	cmp	r3, #6
 8002338:	d902      	bls.n	8002340 <NVIC_EncodePriority+0x30>
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b03      	subs	r3, #3
 800233e:	e000      	b.n	8002342 <NVIC_EncodePriority+0x32>
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	401a      	ands	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002358:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43d9      	mvns	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	4313      	orrs	r3, r2
         );
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002388:	d301      	bcc.n	800238e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238a:	2301      	movs	r3, #1
 800238c:	e00f      	b.n	80023ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238e:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <SysTick_Config+0x40>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002396:	210f      	movs	r1, #15
 8002398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800239c:	f7ff ff8e 	bl	80022bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <SysTick_Config+0x40>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <SysTick_Config+0x40>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff ff29 	bl	800221c <__NVIC_SetPriorityGrouping>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	4603      	mov	r3, r0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e4:	f7ff ff3e 	bl	8002264 <__NVIC_GetPriorityGrouping>
 80023e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	6978      	ldr	r0, [r7, #20]
 80023f0:	f7ff ff8e 	bl	8002310 <NVIC_EncodePriority>
 80023f4:	4602      	mov	r2, r0
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff5d 	bl	80022bc <__NVIC_SetPriority>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff31 	bl	8002280 <__NVIC_EnableIRQ>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff ffa2 	bl	8002378 <SysTick_Config>
 8002434:	4603      	mov	r3, r0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800244e:	e14e      	b.n	80026ee <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2101      	movs	r1, #1
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8140 	beq.w	80026e8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d005      	beq.n	8002480 <HAL_GPIO_Init+0x40>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d130      	bne.n	80024e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b6:	2201      	movs	r2, #1
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4013      	ands	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 0201 	and.w	r2, r3, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d017      	beq.n	800251e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d123      	bne.n	8002572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	08da      	lsrs	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3208      	adds	r2, #8
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	08da      	lsrs	r2, r3, #3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3208      	adds	r2, #8
 800256c:	6939      	ldr	r1, [r7, #16]
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0203 	and.w	r2, r3, #3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 809a 	beq.w	80026e8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b4:	4b55      	ldr	r3, [pc, #340]	@ (800270c <HAL_GPIO_Init+0x2cc>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a54      	ldr	r2, [pc, #336]	@ (800270c <HAL_GPIO_Init+0x2cc>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b52      	ldr	r3, [pc, #328]	@ (800270c <HAL_GPIO_Init+0x2cc>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025cc:	4a50      	ldr	r2, [pc, #320]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_Init+0x1e0>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a46      	ldr	r2, [pc, #280]	@ (8002714 <HAL_GPIO_Init+0x2d4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a45      	ldr	r2, [pc, #276]	@ (8002718 <HAL_GPIO_Init+0x2d8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1d8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a44      	ldr	r2, [pc, #272]	@ (800271c <HAL_GPIO_Init+0x2dc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1d4>
 8002610:	2303      	movs	r3, #3
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x1e2>
 8002614:	2305      	movs	r3, #5
 8002616:	e004      	b.n	8002622 <HAL_GPIO_Init+0x1e2>
 8002618:	2302      	movs	r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x1e2>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_Init+0x1e2>
 8002620:	2300      	movs	r3, #0
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002632:	4937      	ldr	r1, [pc, #220]	@ (8002710 <HAL_GPIO_Init+0x2d0>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002640:	4b37      	ldr	r3, [pc, #220]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	43db      	mvns	r3, r3
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002664:	4a2e      	ldr	r2, [pc, #184]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266a:	4b2d      	ldr	r3, [pc, #180]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800268e:	4a24      	ldr	r2, [pc, #144]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002694:	4b22      	ldr	r3, [pc, #136]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	43db      	mvns	r3, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026b8:	4a19      	ldr	r2, [pc, #100]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026be:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002720 <HAL_GPIO_Init+0x2e0>)
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3301      	adds	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f47f aea9 	bne.w	8002450 <HAL_GPIO_Init+0x10>
  }
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000
 8002714:	48000400 	.word	0x48000400
 8002718:	48000800 	.word	0x48000800
 800271c:	48000c00 	.word	0x48000c00
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
 8002730:	4613      	mov	r3, r2
 8002732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002734:	787b      	ldrb	r3, [r7, #1]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273a:	887a      	ldrh	r2, [r7, #2]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002740:	e002      	b.n	8002748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800275a:	af00      	add	r7, sp, #0
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002764:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	f001 b823 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 817d 	beq.w	8002a8a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002790:	4bbc      	ldr	r3, [pc, #752]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b04      	cmp	r3, #4
 800279a:	d00c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800279c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d15c      	bne.n	8002862 <HAL_RCC_OscConfig+0x10e>
 80027a8:	4bb6      	ldr	r3, [pc, #728]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b4:	d155      	bne.n	8002862 <HAL_RCC_OscConfig+0x10e>
 80027b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ba:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80027c2:	fa93 f3a3 	rbit	r3, r3
 80027c6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ca:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	095b      	lsrs	r3, r3, #5
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x94>
 80027e2:	4ba8      	ldr	r3, [pc, #672]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e015      	b.n	8002814 <HAL_RCC_OscConfig+0xc0>
 80027e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027ec:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80027fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002800:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002804:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002810:	4b9c      	ldr	r3, [pc, #624]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002818:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800281c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002820:	fa92 f2a2 	rbit	r2, r2
 8002824:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002828:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800282c:	fab2 f282 	clz	r2, r2
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	f042 0220 	orr.w	r2, r2, #32
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	f002 021f 	and.w	r2, r2, #31
 800283c:	2101      	movs	r1, #1
 800283e:	fa01 f202 	lsl.w	r2, r1, r2
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 811f 	beq.w	8002a88 <HAL_RCC_OscConfig+0x334>
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8116 	bne.w	8002a88 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f000 bfaf 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x12e>
 8002874:	4b83      	ldr	r3, [pc, #524]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a82      	ldr	r2, [pc, #520]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 800287a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e036      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x158>
 8002892:	4b7c      	ldr	r3, [pc, #496]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7b      	ldr	r2, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b79      	ldr	r3, [pc, #484]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a78      	ldr	r2, [pc, #480]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e021      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x184>
 80028be:	4b71      	ldr	r3, [pc, #452]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a70      	ldr	r2, [pc, #448]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x19c>
 80028d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a69      	ldr	r2, [pc, #420]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b67      	ldr	r3, [pc, #412]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a66      	ldr	r2, [pc, #408]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f0:	4b64      	ldr	r3, [pc, #400]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	f023 020f 	bic.w	r2, r3, #15
 80028f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	495f      	ldr	r1, [pc, #380]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002906:	4313      	orrs	r3, r2
 8002908:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d059      	beq.n	80029ce <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fa9d 	bl	8000e58 <HAL_GetTick>
 800291e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002924:	f7fe fa98 	bl	8000e58 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	@ 0x64
 8002932:	d902      	bls.n	800293a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	f000 bf43 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 800293a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800293e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800294e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0x218>
 8002966:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e015      	b.n	8002998 <HAL_RCC_OscConfig+0x244>
 800296c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002970:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002980:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002984:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002988:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002994:	4b3b      	ldr	r3, [pc, #236]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800299c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80029a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80029a4:	fa92 f2a2 	rbit	r2, r2
 80029a8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80029ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f002 021f 	and.w	r2, r2, #31
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0ab      	beq.n	8002924 <HAL_RCC_OscConfig+0x1d0>
 80029cc:	e05d      	b.n	8002a8a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fa43 	bl	8000e58 <HAL_GetTick>
 80029d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fa3e 	bl	8000e58 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	@ 0x64
 80029e6:	d902      	bls.n	80029ee <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	f000 bee9 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 80029ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002a02:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d102      	bne.n	8002a20 <HAL_RCC_OscConfig+0x2cc>
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	e015      	b.n	8002a4c <HAL_RCC_OscConfig+0x2f8>
 8002a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a24:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002a2c:	fa93 f3a3 	rbit	r3, r3
 8002a30:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002a34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a38:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002a3c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002a48:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_RCC_OscConfig+0x330>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a50:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002a54:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002a58:	fa92 f2a2 	rbit	r2, r2
 8002a5c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002a60:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002a64:	fab2 f282 	clz	r2, r2
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	f042 0220 	orr.w	r2, r2, #32
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	f002 021f 	and.w	r2, r2, #31
 8002a74:	2101      	movs	r1, #1
 8002a76:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ab      	bne.n	80029d8 <HAL_RCC_OscConfig+0x284>
 8002a80:	e003      	b.n	8002a8a <HAL_RCC_OscConfig+0x336>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 817d 	beq.w	8002d9a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002aa0:	4ba6      	ldr	r3, [pc, #664]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aac:	4ba3      	ldr	r3, [pc, #652]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d172      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002ab8:	4ba0      	ldr	r3, [pc, #640]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d16c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002ad6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	095b      	lsrs	r3, r3, #5
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_OscConfig+0x3a0>
 8002aee:	4b93      	ldr	r3, [pc, #588]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	e013      	b.n	8002b1c <HAL_RCC_OscConfig+0x3c8>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002b0c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002b18:	4b88      	ldr	r3, [pc, #544]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002b22:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002b2e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002b32:	fab2 f282 	clz	r2, r2
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f042 0220 	orr.w	r2, r2, #32
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f002 021f 	and.w	r2, r2, #31
 8002b42:	2101      	movs	r1, #1
 8002b44:	fa01 f202 	lsl.w	r2, r1, r2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <HAL_RCC_OscConfig+0x410>
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f000 be2e 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b75      	ldr	r3, [pc, #468]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	21f8      	movs	r1, #248	@ 0xf8
 8002b7a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002b82:	fa91 f1a1 	rbit	r1, r1
 8002b86:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002b8a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002b8e:	fab1 f181 	clz	r1, r1
 8002b92:	b2c9      	uxtb	r1, r1
 8002b94:	408b      	lsls	r3, r1
 8002b96:	4969      	ldr	r1, [pc, #420]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9c:	e0fd      	b.n	8002d9a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8088 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x56c>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002bc2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc6:	fab3 f383 	clz	r3, r3
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bd0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2301      	movs	r3, #1
 8002bda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f93c 	bl	8000e58 <HAL_GetTick>
 8002be0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e00a      	b.n	8002bfc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe f937 	bl	8000e58 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	f000 bde2 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002c0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4d8>
 8002c26:	4b45      	ldr	r3, [pc, #276]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	e013      	b.n	8002c54 <HAL_RCC_OscConfig+0x500>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002c3e:	2302      	movs	r3, #2
 8002c40:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002c44:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002c50:	4b3a      	ldr	r3, [pc, #232]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	2202      	movs	r2, #2
 8002c56:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002c5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002c5e:	fa92 f2a2 	rbit	r2, r2
 8002c62:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002c66:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002c6a:	fab2 f282 	clz	r2, r2
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	f042 0220 	orr.w	r2, r2, #32
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f002 021f 	and.w	r2, r2, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0af      	beq.n	8002be6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	21f8      	movs	r1, #248	@ 0xf8
 8002c9c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002ca4:	fa91 f1a1 	rbit	r1, r1
 8002ca8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002cac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002cb0:	fab1 f181 	clz	r1, r1
 8002cb4:	b2c9      	uxtb	r1, r1
 8002cb6:	408b      	lsls	r3, r1
 8002cb8:	4920      	ldr	r1, [pc, #128]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]
 8002cbe:	e06c      	b.n	8002d9a <HAL_RCC_OscConfig+0x646>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ce0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2300      	movs	r3, #0
 8002cea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f8b4 	bl	8000e58 <HAL_GetTick>
 8002cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe f8af 	bl	8000e58 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f000 bd5a 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d104      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5ec>
 8002d36:	4b01      	ldr	r3, [pc, #4]	@ (8002d3c <HAL_RCC_OscConfig+0x5e8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e015      	b.n	8002d68 <HAL_RCC_OscConfig+0x614>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	2302      	movs	r3, #2
 8002d42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002d52:	2302      	movs	r3, #2
 8002d54:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002d64:	4bc8      	ldr	r3, [pc, #800]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002d6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002d7a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1ad      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8110 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d079      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x760>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4bab      	ldr	r3, [pc, #684]	@ (800308c <HAL_RCC_OscConfig+0x938>)
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	461a      	mov	r2, r3
 8002de6:	2301      	movs	r3, #1
 8002de8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fe f835 	bl	8000e58 <HAL_GetTick>
 8002dee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe f830 	bl	8000e58 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d902      	bls.n	8002e0a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	f000 bcdb 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e20:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e24:	2202      	movs	r2, #2
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	fa93 f2a3 	rbit	r2, r3
 8002e36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e48:	2202      	movs	r2, #2
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002e62:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e64:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002e66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e70:	2102      	movs	r1, #2
 8002e72:	6019      	str	r1, [r3, #0]
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	fa93 f1a3 	rbit	r1, r3
 8002e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e86:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e8a:	6019      	str	r1, [r3, #0]
  return result;
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0a0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x6a0>
 8002eb2:	e08d      	b.n	8002fd0 <HAL_RCC_OscConfig+0x87c>
 8002eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ed6:	601a      	str	r2, [r3, #0]
  return result;
 8002ed8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002edc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002ee0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b68      	ldr	r3, [pc, #416]	@ (800308c <HAL_RCC_OscConfig+0x938>)
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef6:	f7fd ffaf 	bl	8000e58 <HAL_GetTick>
 8002efa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fd ffaa 	bl	8000e58 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	f000 bc55 	b.w	80037c0 <HAL_RCC_OscConfig+0x106c>
 8002f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f1e:	2202      	movs	r2, #2
 8002f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f3e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f42:	2202      	movs	r2, #2
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f62:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f66:	2202      	movs	r2, #2
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f82:	4b41      	ldr	r3, [pc, #260]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f8a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f8e:	2102      	movs	r1, #2
 8002f90:	6019      	str	r1, [r3, #0]
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f1a3 	rbit	r1, r3
 8002fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fa8:	6019      	str	r1, [r3, #0]
  return result;
 8002faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d197      	bne.n	8002f00 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 81a1 	beq.w	8003328 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fec:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d116      	bne.n	8003026 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	4a22      	ldr	r2, [pc, #136]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003002:	61d3      	str	r3, [r2, #28]
 8003004:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800300c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003010:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800301e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003026:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <HAL_RCC_OscConfig+0x93c>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303e:	f7fd ff0b 	bl	8000e58 <HAL_GetTick>
 8003042:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	e009      	b.n	800305c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fd ff06 	bl	8000e58 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b64      	cmp	r3, #100	@ 0x64
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e3b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <HAL_RCC_OscConfig+0x93c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10d      	bne.n	8003094 <HAL_RCC_OscConfig+0x940>
 8003078:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	4a02      	ldr	r2, [pc, #8]	@ (8003088 <HAL_RCC_OscConfig+0x934>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6213      	str	r3, [r2, #32]
 8003084:	e03c      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	10908120 	.word	0x10908120
 8003090:	40007000 	.word	0x40007000
 8003094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003098:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10c      	bne.n	80030be <HAL_RCC_OscConfig+0x96a>
 80030a4:	4bc1      	ldr	r3, [pc, #772]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4ac0      	ldr	r2, [pc, #768]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	4bbe      	ldr	r3, [pc, #760]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4abd      	ldr	r2, [pc, #756]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e020      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 80030be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x994>
 80030ce:	4bb7      	ldr	r3, [pc, #732]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	4ab6      	ldr	r2, [pc, #728]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6213      	str	r3, [r2, #32]
 80030da:	4bb4      	ldr	r3, [pc, #720]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4ab3      	ldr	r2, [pc, #716]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0x9ac>
 80030e8:	4bb0      	ldr	r3, [pc, #704]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4aaf      	ldr	r2, [pc, #700]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	4bad      	ldr	r3, [pc, #692]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4aac      	ldr	r2, [pc, #688]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80030fa:	f023 0304 	bic.w	r3, r3, #4
 80030fe:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8081 	beq.w	8003214 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fd fea1 	bl	8000e58 <HAL_GetTick>
 8003116:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00b      	b.n	8003134 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fd fe9c 	bl	8000e58 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e345      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800313c:	2202      	movs	r2, #2
 800313e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003140:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003144:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	fa93 f2a3 	rbit	r2, r3
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003160:	2202      	movs	r2, #2
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003168:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003180:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003184:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xa4c>
 800319a:	4b84      	ldr	r3, [pc, #528]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	e013      	b.n	80031c8 <HAL_RCC_OscConfig+0xa74>
 80031a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031a8:	2202      	movs	r2, #2
 80031aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	fa93 f2a3 	rbit	r2, r3
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	4b79      	ldr	r3, [pc, #484]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031cc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031d0:	2102      	movs	r1, #2
 80031d2:	6011      	str	r1, [r2, #0]
 80031d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80031dc:	6812      	ldr	r2, [r2, #0]
 80031de:	fa92 f1a2 	rbit	r1, r2
 80031e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031ea:	6011      	str	r1, [r2, #0]
  return result;
 80031ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	fab2 f282 	clz	r2, r2
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	f002 021f 	and.w	r2, r2, #31
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d084      	beq.n	800311c <HAL_RCC_OscConfig+0x9c8>
 8003212:	e07f      	b.n	8003314 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fd fe20 	bl	8000e58 <HAL_GetTick>
 8003218:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800321c:	e00b      	b.n	8003236 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321e:	f7fd fe1b 	bl	8000e58 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e2c4      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800323e:	2202      	movs	r2, #2
 8003240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003246:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	fa93 f2a3 	rbit	r2, r3
 8003250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003254:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003262:	2202      	movs	r2, #2
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	fa93 f2a3 	rbit	r2, r3
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800327c:	601a      	str	r2, [r3, #0]
  return result;
 800327e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003282:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003286:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d102      	bne.n	80032a2 <HAL_RCC_OscConfig+0xb4e>
 800329c:	4b43      	ldr	r3, [pc, #268]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	e013      	b.n	80032ca <HAL_RCC_OscConfig+0xb76>
 80032a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	fa93 f2a3 	rbit	r2, r3
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	4b39      	ldr	r3, [pc, #228]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ce:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032d2:	2102      	movs	r1, #2
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	fa92 f1a2 	rbit	r1, r2
 80032e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032e8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032ec:	6011      	str	r1, [r2, #0]
  return result;
 80032ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032f2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	fab2 f282 	clz	r2, r2
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f002 021f 	and.w	r2, r2, #31
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f202 	lsl.w	r2, r1, r2
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d184      	bne.n	800321e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003314:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003318:	2b01      	cmp	r3, #1
 800331a:	d105      	bne.n	8003328 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331c:	4b23      	ldr	r3, [pc, #140]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4a22      	ldr	r2, [pc, #136]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 8003322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003326:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8242 	beq.w	80037be <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ac <HAL_RCC_OscConfig+0xc58>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 030c 	and.w	r3, r3, #12
 8003342:	2b08      	cmp	r3, #8
 8003344:	f000 8213 	beq.w	800376e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	2b02      	cmp	r3, #2
 8003356:	f040 8162 	bne.w	800361e <HAL_RCC_OscConfig+0xeca>
 800335a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003362:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003366:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	fa93 f2a3 	rbit	r2, r3
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800337e:	601a      	str	r2, [r3, #0]
  return result;
 8003380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003384:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003388:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003394:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	461a      	mov	r2, r3
 800339c:	2300      	movs	r3, #0
 800339e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fd5a 	bl	8000e58 <HAL_GetTick>
 80033a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a8:	e00c      	b.n	80033c4 <HAL_RCC_OscConfig+0xc70>
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fd52 	bl	8000e58 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1fd      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033e8:	601a      	str	r2, [r3, #0]
  return result;
 80033ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80033f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0xcba>
 8003408:	4bb0      	ldr	r3, [pc, #704]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	e027      	b.n	800345e <HAL_RCC_OscConfig+0xd0a>
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800343c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	4b9c      	ldr	r3, [pc, #624]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003462:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003466:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800346a:	6011      	str	r1, [r2, #0]
 800346c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003470:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	fa92 f1a2 	rbit	r1, r2
 800347a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800347e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003482:	6011      	str	r1, [r2, #0]
  return result;
 8003484:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003488:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800348c:	6812      	ldr	r2, [r2, #0]
 800348e:	fab2 f282 	clz	r2, r2
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	f042 0220 	orr.w	r2, r2, #32
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	f002 021f 	and.w	r2, r2, #31
 800349e:	2101      	movs	r1, #1
 80034a0:	fa01 f202 	lsl.w	r2, r1, r2
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d182      	bne.n	80033b0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034aa:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80034be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	430b      	orrs	r3, r1
 80034cc:	497f      	ldr	r1, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	604b      	str	r3, [r1, #4]
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	fa93 f2a3 	rbit	r2, r3
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80034f6:	601a      	str	r2, [r3, #0]
  return result;
 80034f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003500:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	461a      	mov	r2, r3
 8003514:	2301      	movs	r3, #1
 8003516:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7fd fc9e 	bl	8000e58 <HAL_GetTick>
 800351c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003520:	e009      	b.n	8003536 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fd fc99 	bl	8000e58 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e144      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800353e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003548:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003560:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003564:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_RCC_OscConfig+0xe2c>
 800357a:	4b54      	ldr	r3, [pc, #336]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	e027      	b.n	80035d0 <HAL_RCC_OscConfig+0xe7c>
 8003580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003584:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003588:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800358c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003592:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035aa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	fa93 f2a3 	rbit	r2, r3
 80035c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	4b3f      	ldr	r3, [pc, #252]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035d8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fa92 f1a2 	rbit	r1, r2
 80035ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035f4:	6011      	str	r1, [r2, #0]
  return result;
 80035f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035fa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	fab2 f282 	clz	r2, r2
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	f002 021f 	and.w	r2, r2, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d082      	beq.n	8003522 <HAL_RCC_OscConfig+0xdce>
 800361c:	e0cf      	b.n	80037be <HAL_RCC_OscConfig+0x106a>
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003626:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800362a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003630:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003642:	601a      	str	r2, [r3, #0]
  return result;
 8003644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003648:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800364c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	fab3 f383 	clz	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003658:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	2300      	movs	r3, #0
 8003662:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fbf8 	bl	8000e58 <HAL_GetTick>
 8003668:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800366c:	e009      	b.n	8003682 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fbf3 	bl	8000e58 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e09e      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800368a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003694:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036a6:	601a      	str	r2, [r3, #0]
  return result;
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80036b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d104      	bne.n	80036d0 <HAL_RCC_OscConfig+0xf7c>
 80036c6:	4b01      	ldr	r3, [pc, #4]	@ (80036cc <HAL_RCC_OscConfig+0xf78>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	e029      	b.n	8003720 <HAL_RCC_OscConfig+0xfcc>
 80036cc:	40021000 	.word	0x40021000
 80036d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80036fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	fa93 f2a3 	rbit	r2, r3
 8003712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003716:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	4b2b      	ldr	r3, [pc, #172]	@ (80037cc <HAL_RCC_OscConfig+0x1078>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003724:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003728:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800372c:	6011      	str	r1, [r2, #0]
 800372e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003732:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	fa92 f1a2 	rbit	r1, r2
 800373c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003740:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003744:	6011      	str	r1, [r2, #0]
  return result;
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fab2 f282 	clz	r2, r2
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	f042 0220 	orr.w	r2, r2, #32
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f002 021f 	and.w	r2, r2, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f202 	lsl.w	r2, r1, r2
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d180      	bne.n	800366e <HAL_RCC_OscConfig+0xf1a>
 800376c:	e027      	b.n	80037be <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003772:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01e      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003782:	4b12      	ldr	r3, [pc, #72]	@ (80037cc <HAL_RCC_OscConfig+0x1078>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800378a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800378e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003796:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10b      	bne.n	80037ba <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80037a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b09e      	sub	sp, #120	@ 0x78
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e162      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b90      	ldr	r3, [pc, #576]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	498b      	ldr	r1, [pc, #556]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b89      	ldr	r3, [pc, #548]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e14a      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b82      	ldr	r3, [pc, #520]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	497f      	ldr	r1, [pc, #508]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80dc 	beq.w	80039fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d13c      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xf6>
 800384c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003850:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800385a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	b2db      	uxtb	r3, r3
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d102      	bne.n	8003876 <HAL_RCC_ClockConfig+0xa6>
 8003870:	4b6f      	ldr	r3, [pc, #444]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	e00f      	b.n	8003896 <HAL_RCC_ClockConfig+0xc6>
 8003876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800387e:	fa93 f3a3 	rbit	r3, r3
 8003882:	667b      	str	r3, [r7, #100]	@ 0x64
 8003884:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003888:	663b      	str	r3, [r7, #96]	@ 0x60
 800388a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003892:	4b67      	ldr	r3, [pc, #412]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800389a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800389c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800389e:	fa92 f2a2 	rbit	r2, r2
 80038a2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80038a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038a6:	fab2 f282 	clz	r2, r2
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f042 0220 	orr.w	r2, r2, #32
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	f002 021f 	and.w	r2, r2, #31
 80038b6:	2101      	movs	r1, #1
 80038b8:	fa01 f202 	lsl.w	r2, r1, r2
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d17b      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0f3      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d13c      	bne.n	8003948 <HAL_RCC_ClockConfig+0x178>
 80038ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80038dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x128>
 80038f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_ClockConfig+0x148>
 80038f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003900:	fa93 f3a3 	rbit	r3, r3
 8003904:	647b      	str	r3, [r7, #68]	@ 0x44
 8003906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800390a:	643b      	str	r3, [r7, #64]	@ 0x40
 800390c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003914:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800391c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800391e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003920:	fa92 f2a2 	rbit	r2, r2
 8003924:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003928:	fab2 f282 	clz	r2, r2
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	f042 0220 	orr.w	r2, r2, #32
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	f002 021f 	and.w	r2, r2, #31
 8003938:	2101      	movs	r1, #1
 800393a:	fa01 f202 	lsl.w	r2, r1, r2
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d13a      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0b2      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
 8003948:	2302      	movs	r3, #2
 800394a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	fab3 f383 	clz	r3, r3
 800395a:	b2db      	uxtb	r3, r3
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	b2db      	uxtb	r3, r3
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b01      	cmp	r3, #1
 8003968:	d102      	bne.n	8003970 <HAL_RCC_ClockConfig+0x1a0>
 800396a:	4b31      	ldr	r3, [pc, #196]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	e00d      	b.n	800398c <HAL_RCC_ClockConfig+0x1bc>
 8003970:	2302      	movs	r3, #2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
 800397c:	2302      	movs	r3, #2
 800397e:	623b      	str	r3, [r7, #32]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	fa93 f3a3 	rbit	r3, r3
 8003986:	61fb      	str	r3, [r7, #28]
 8003988:	4b29      	ldr	r3, [pc, #164]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	2202      	movs	r2, #2
 800398e:	61ba      	str	r2, [r7, #24]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	fa92 f2a2 	rbit	r2, r2
 8003996:	617a      	str	r2, [r7, #20]
  return result;
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	fab2 f282 	clz	r2, r2
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	f042 0220 	orr.w	r2, r2, #32
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f002 021f 	and.w	r2, r2, #31
 80039aa:	2101      	movs	r1, #1
 80039ac:	fa01 f202 	lsl.w	r2, r1, r2
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e079      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	491a      	ldr	r1, [pc, #104]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039cc:	f7fd fa44 	bl	8000e58 <HAL_GetTick>
 80039d0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7fd fa40 	bl	8000e58 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e061      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b11      	ldr	r3, [pc, #68]	@ (8003a30 <HAL_RCC_ClockConfig+0x260>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039fc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d214      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_RCC_ClockConfig+0x25c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e040      	b.n	8003aae <HAL_RCC_ClockConfig+0x2de>
 8003a2c:	40022000 	.word	0x40022000
 8003a30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	491a      	ldr	r1, [pc, #104]	@ (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5e:	4b16      	ldr	r3, [pc, #88]	@ (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4912      	ldr	r1, [pc, #72]	@ (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a72:	f000 f829 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8003a76:	4601      	mov	r1, r0
 8003a78:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a80:	22f0      	movs	r2, #240	@ 0xf0
 8003a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	fa92 f2a2 	rbit	r2, r2
 8003a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fab2 f282 	clz	r2, r2
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	40d3      	lsrs	r3, r2
 8003a96:	4a09      	ldr	r2, [pc, #36]	@ (8003abc <HAL_RCC_ClockConfig+0x2ec>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a9e:	4a08      	ldr	r2, [pc, #32]	@ (8003ac0 <HAL_RCC_ClockConfig+0x2f0>)
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aa2:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <HAL_RCC_ClockConfig+0x2f4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd f992 	bl	8000dd0 <HAL_InitTick>
  
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3778      	adds	r7, #120	@ 0x78
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08005018 	.word	0x08005018
 8003ac0:	20000008 	.word	0x20000008
 8003ac4:	2000000c 	.word	0x2000000c

08003ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	2300      	movs	r3, #0
 8003adc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d002      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x30>
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0x36>
 8003af6:	e026      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003afa:	613b      	str	r3, [r7, #16]
      break;
 8003afc:	e026      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	0c9b      	lsrs	r3, r3, #18
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	4a17      	ldr	r2, [pc, #92]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003b0c:	4b13      	ldr	r3, [pc, #76]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	4a14      	ldr	r2, [pc, #80]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b24:	4a0e      	ldr	r2, [pc, #56]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e004      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	613b      	str	r3, [r7, #16]
      break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b48:	613b      	str	r3, [r7, #16]
      break;
 8003b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4c:	693b      	ldr	r3, [r7, #16]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	007a1200 	.word	0x007a1200
 8003b64:	08005030 	.word	0x08005030
 8003b68:	08005040 	.word	0x08005040
 8003b6c:	003d0900 	.word	0x003d0900

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000008 	.word	0x20000008

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003b8e:	f7ff ffef 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b92:	4601      	mov	r1, r0
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b9c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003ba0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	fa92 f2a2 	rbit	r2, r2
 8003ba8:	603a      	str	r2, [r7, #0]
  return result;
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	fab2 f282 	clz	r2, r2
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	40d3      	lsrs	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003bb6:	5cd3      	ldrb	r3, [r2, r3]
 8003bb8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	08005028 	.word	0x08005028

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003bd2:	f7ff ffcd 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003be0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003be4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	fa92 f2a2 	rbit	r2, r2
 8003bec:	603a      	str	r2, [r7, #0]
  return result;
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	fab2 f282 	clz	r2, r2
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	40d3      	lsrs	r3, r2
 8003bf8:	4a04      	ldr	r2, [pc, #16]	@ (8003c0c <HAL_RCC_GetPCLK2Freq+0x40>)
 8003bfa:	5cd3      	ldrb	r3, [r2, r3]
 8003bfc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08005028 	.word	0x08005028

08003c10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b092      	sub	sp, #72	@ 0x48
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80cd 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c34:	4b86      	ldr	r3, [pc, #536]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c40:	4b83      	ldr	r3, [pc, #524]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	4a82      	ldr	r2, [pc, #520]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4a:	61d3      	str	r3, [r2, #28]
 8003c4c:	4b80      	ldr	r3, [pc, #512]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a79      	ldr	r2, [pc, #484]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c76:	f7fd f8ef 	bl	8000e58 <HAL_GetTick>
 8003c7a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	e008      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd f8eb 	bl	8000e58 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b64      	cmp	r3, #100	@ 0x64
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e0db      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b70      	ldr	r3, [pc, #448]	@ (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d07d      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d076      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cba:	4b65      	ldr	r3, [pc, #404]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b55      	ldr	r3, [pc, #340]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	461a      	mov	r2, r3
 8003d08:	2300      	movs	r3, #0
 8003d0a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d0c:	4a50      	ldr	r2, [pc, #320]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d10:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d045      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd f89c 	bl	8000e58 <HAL_GetTick>
 8003d20:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	e00a      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d24:	f7fd f898 	bl	8000e58 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e086      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	fa93 f3a3 	rbit	r3, r3
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	2302      	movs	r3, #2
 8003d48:	623b      	str	r3, [r7, #32]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	61fb      	str	r3, [r7, #28]
  return result;
 8003d52:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f043 0302 	orr.w	r3, r3, #2
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d102      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	e007      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	4b35      	ldr	r3, [pc, #212]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7e:	2202      	movs	r2, #2
 8003d80:	613a      	str	r2, [r7, #16]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	fa92 f2a2 	rbit	r2, r2
 8003d88:	60fa      	str	r2, [r7, #12]
  return result;
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	fab2 f282 	clz	r2, r2
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	f002 021f 	and.w	r2, r2, #31
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0bd      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003da8:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4926      	ldr	r1, [pc, #152]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4a22      	ldr	r2, [pc, #136]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	491a      	ldr	r1, [pc, #104]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dfc:	f023 0210 	bic.w	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4912      	ldr	r1, [pc, #72]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e16:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	490b      	ldr	r1, [pc, #44]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e34:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	4903      	ldr	r1, [pc, #12]	@ (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3748      	adds	r7, #72	@ 0x48
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
 8003e58:	10908100 	.word	0x10908100

08003e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e040      	b.n	8003ef0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fc fe6a 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2224      	movs	r2, #36	@ 0x24
 8003e88:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9e8 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f8af 	bl	800400c <UART_SetConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e01b      	b.n	8003ef0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 fa67 	bl	80043bc <UART_CheckIdleState>
 8003eee:	4603      	mov	r3, r0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	@ 0x28
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d177      	bne.n	8004000 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_UART_Transmit+0x24>
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e070      	b.n	8004002 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	@ 0x21
 8003f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f2e:	f7fc ff93 	bl	8000e58 <HAL_GetTick>
 8003f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4c:	d108      	bne.n	8003f60 <HAL_UART_Transmit+0x68>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d104      	bne.n	8003f60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	e003      	b.n	8003f68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f68:	e02f      	b.n	8003fca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	@ 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fac9 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03b      	b.n	8004002 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	881a      	ldrh	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f9c:	b292      	uxth	r2, r2
 8003f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	e007      	b.n	8003fb8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1c9      	bne.n	8003f6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	@ 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fa93 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e005      	b.n	8004002 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	e000      	b.n	8004002 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
  }
}
 8004002:	4618      	mov	r0, r3
 8004004:	3720      	adds	r7, #32
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b088      	sub	sp, #32
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4313      	orrs	r3, r2
 800402e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b8a      	ldr	r3, [pc, #552]	@ (8004260 <UART_SetConfig+0x254>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	430b      	orrs	r3, r1
 8004042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a78      	ldr	r2, [pc, #480]	@ (8004264 <UART_SetConfig+0x258>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d120      	bne.n	80040ca <UART_SetConfig+0xbe>
 8004088:	4b77      	ldr	r3, [pc, #476]	@ (8004268 <UART_SetConfig+0x25c>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	2b03      	cmp	r3, #3
 8004092:	d817      	bhi.n	80040c4 <UART_SetConfig+0xb8>
 8004094:	a201      	add	r2, pc, #4	@ (adr r2, 800409c <UART_SetConfig+0x90>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040b9 	.word	0x080040b9
 80040a4:	080040bf 	.word	0x080040bf
 80040a8:	080040b3 	.word	0x080040b3
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e01d      	b.n	80040ee <UART_SetConfig+0xe2>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e01a      	b.n	80040ee <UART_SetConfig+0xe2>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e017      	b.n	80040ee <UART_SetConfig+0xe2>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e014      	b.n	80040ee <UART_SetConfig+0xe2>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e011      	b.n	80040ee <UART_SetConfig+0xe2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a67      	ldr	r2, [pc, #412]	@ (800426c <UART_SetConfig+0x260>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d102      	bne.n	80040da <UART_SetConfig+0xce>
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e009      	b.n	80040ee <UART_SetConfig+0xe2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a64      	ldr	r2, [pc, #400]	@ (8004270 <UART_SetConfig+0x264>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d102      	bne.n	80040ea <UART_SetConfig+0xde>
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e001      	b.n	80040ee <UART_SetConfig+0xe2>
 80040ea:	2310      	movs	r3, #16
 80040ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f6:	d15a      	bne.n	80041ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80040f8:	7ffb      	ldrb	r3, [r7, #31]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d827      	bhi.n	800414e <UART_SetConfig+0x142>
 80040fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <UART_SetConfig+0xf8>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004129 	.word	0x08004129
 8004108:	08004131 	.word	0x08004131
 800410c:	08004139 	.word	0x08004139
 8004110:	0800414f 	.word	0x0800414f
 8004114:	0800413f 	.word	0x0800413f
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800414f 	.word	0x0800414f
 8004120:	0800414f 	.word	0x0800414f
 8004124:	08004147 	.word	0x08004147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7ff fd2e 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 800412c:	61b8      	str	r0, [r7, #24]
        break;
 800412e:	e013      	b.n	8004158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7ff fd4c 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e00f      	b.n	8004158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b4e      	ldr	r3, [pc, #312]	@ (8004274 <UART_SetConfig+0x268>)
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e00c      	b.n	8004158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7ff fcc3 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 8004142:	61b8      	str	r0, [r7, #24]
        break;
 8004144:	e008      	b.n	8004158 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e004      	b.n	8004158 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77bb      	strb	r3, [r7, #30]
        break;
 8004156:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d074      	beq.n	8004248 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	005a      	lsls	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d916      	bls.n	80041a8 <UART_SetConfig+0x19c>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d212      	bcs.n	80041a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f023 030f 	bic.w	r3, r3, #15
 800418a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	085b      	lsrs	r3, r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	b29a      	uxth	r2, r3
 8004198:	89fb      	ldrh	r3, [r7, #14]
 800419a:	4313      	orrs	r3, r2
 800419c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	89fa      	ldrh	r2, [r7, #14]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	e04f      	b.n	8004248 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77bb      	strb	r3, [r7, #30]
 80041ac:	e04c      	b.n	8004248 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ae:	7ffb      	ldrb	r3, [r7, #31]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d828      	bhi.n	8004206 <UART_SetConfig+0x1fa>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <UART_SetConfig+0x1b0>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	080041f1 	.word	0x080041f1
 80041c8:	08004207 	.word	0x08004207
 80041cc:	080041f7 	.word	0x080041f7
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
 80041dc:	080041ff 	.word	0x080041ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e0:	f7ff fcd2 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80041e4:	61b8      	str	r0, [r7, #24]
        break;
 80041e6:	e013      	b.n	8004210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041e8:	f7ff fcf0 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e00f      	b.n	8004210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f0:	4b20      	ldr	r3, [pc, #128]	@ (8004274 <UART_SetConfig+0x268>)
 80041f2:	61bb      	str	r3, [r7, #24]
        break;
 80041f4:	e00c      	b.n	8004210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041f6:	f7ff fc67 	bl	8003ac8 <HAL_RCC_GetSysClockFreq>
 80041fa:	61b8      	str	r0, [r7, #24]
        break;
 80041fc:	e008      	b.n	8004210 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004202:	61bb      	str	r3, [r7, #24]
        break;
 8004204:	e004      	b.n	8004210 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	77bb      	strb	r3, [r7, #30]
        break;
 800420e:	bf00      	nop
    }

    if (pclk != 0U)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	085a      	lsrs	r2, r3, #1
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	441a      	add	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d909      	bls.n	8004244 <UART_SetConfig+0x238>
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004236:	d205      	bcs.n	8004244 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e001      	b.n	8004248 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004254:	7fbb      	ldrb	r3, [r7, #30]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	efff69f3 	.word	0xefff69f3
 8004264:	40013800 	.word	0x40013800
 8004268:	40021000 	.word	0x40021000
 800426c:	40004400 	.word	0x40004400
 8004270:	40004800 	.word	0x40004800
 8004274:	007a1200 	.word	0x007a1200

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004376:	d10a      	bne.n	800438e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b098      	sub	sp, #96	@ 0x60
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fc fd44 	bl	8000e58 <HAL_GetTick>
 80043d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d12e      	bne.n	800443e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f88c 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d021      	beq.n	800443e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e062      	b.n	8004504 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d149      	bne.n	80044e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f856 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d03c      	beq.n	80044e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	623b      	str	r3, [r7, #32]
   return(result);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b8:	61fa      	str	r2, [r7, #28]
 80044ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	617b      	str	r3, [r7, #20]
   return(result);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e011      	b.n	8004504 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3758      	adds	r7, #88	@ 0x58
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	e04f      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004524:	d04b      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fc fc97 	bl	8000e58 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <UART_WaitOnFlagUntilTimeout+0x30>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e04e      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d037      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b80      	cmp	r3, #128	@ 0x80
 8004552:	d034      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b40      	cmp	r3, #64	@ 0x40
 8004558:	d031      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d110      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f838 	bl	80045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2208      	movs	r2, #8
 800457a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e029      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004598:	d111      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f81e 	bl	80045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d0a0      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b095      	sub	sp, #84	@ 0x54
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460c:	643b      	str	r3, [r7, #64]	@ 0x40
 800460e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3308      	adds	r3, #8
 800463e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004658:	2b01      	cmp	r3, #1
 800465a:	d118      	bne.n	800468e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	60bb      	str	r3, [r7, #8]
   return(result);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	613b      	str	r3, [r7, #16]
   return(result);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e6      	bne.n	800465c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046a2:	bf00      	nop
 80046a4:	3754      	adds	r7, #84	@ 0x54
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <siprintf>:
 80046b0:	b40e      	push	{r1, r2, r3}
 80046b2:	b500      	push	{lr}
 80046b4:	b09c      	sub	sp, #112	@ 0x70
 80046b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80046b8:	9002      	str	r0, [sp, #8]
 80046ba:	9006      	str	r0, [sp, #24]
 80046bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80046c0:	4809      	ldr	r0, [pc, #36]	@ (80046e8 <siprintf+0x38>)
 80046c2:	9107      	str	r1, [sp, #28]
 80046c4:	9104      	str	r1, [sp, #16]
 80046c6:	4909      	ldr	r1, [pc, #36]	@ (80046ec <siprintf+0x3c>)
 80046c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80046cc:	9105      	str	r1, [sp, #20]
 80046ce:	6800      	ldr	r0, [r0, #0]
 80046d0:	9301      	str	r3, [sp, #4]
 80046d2:	a902      	add	r1, sp, #8
 80046d4:	f000 f994 	bl	8004a00 <_svfiprintf_r>
 80046d8:	9b02      	ldr	r3, [sp, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	b01c      	add	sp, #112	@ 0x70
 80046e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046e4:	b003      	add	sp, #12
 80046e6:	4770      	bx	lr
 80046e8:	20000014 	.word	0x20000014
 80046ec:	ffff0208 	.word	0xffff0208

080046f0 <memset>:
 80046f0:	4402      	add	r2, r0
 80046f2:	4603      	mov	r3, r0
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d100      	bne.n	80046fa <memset+0xa>
 80046f8:	4770      	bx	lr
 80046fa:	f803 1b01 	strb.w	r1, [r3], #1
 80046fe:	e7f9      	b.n	80046f4 <memset+0x4>

08004700 <__errno>:
 8004700:	4b01      	ldr	r3, [pc, #4]	@ (8004708 <__errno+0x8>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000014 	.word	0x20000014

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4d0d      	ldr	r5, [pc, #52]	@ (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	@ (8004748 <__libc_init_array+0x3c>)
 8004712:	1b64      	subs	r4, r4, r5
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2600      	movs	r6, #0
 8004718:	42a6      	cmp	r6, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4d0b      	ldr	r5, [pc, #44]	@ (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	@ (8004750 <__libc_init_array+0x44>)
 8004720:	f000 fc66 	bl	8004ff0 <_init>
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2600      	movs	r6, #0
 800472a:	42a6      	cmp	r6, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f855 3b04 	ldr.w	r3, [r5], #4
 8004734:	4798      	blx	r3
 8004736:	3601      	adds	r6, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f855 3b04 	ldr.w	r3, [r5], #4
 800473e:	4798      	blx	r3
 8004740:	3601      	adds	r6, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	0800508c 	.word	0x0800508c
 8004748:	0800508c 	.word	0x0800508c
 800474c:	0800508c 	.word	0x0800508c
 8004750:	08005090 	.word	0x08005090

08004754 <__retarget_lock_acquire_recursive>:
 8004754:	4770      	bx	lr

08004756 <__retarget_lock_release_recursive>:
 8004756:	4770      	bx	lr

08004758 <_free_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	4605      	mov	r5, r0
 800475c:	2900      	cmp	r1, #0
 800475e:	d041      	beq.n	80047e4 <_free_r+0x8c>
 8004760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004764:	1f0c      	subs	r4, r1, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	bfb8      	it	lt
 800476a:	18e4      	addlt	r4, r4, r3
 800476c:	f000 f8e0 	bl	8004930 <__malloc_lock>
 8004770:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <_free_r+0x90>)
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	b933      	cbnz	r3, 8004784 <_free_r+0x2c>
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	6014      	str	r4, [r2, #0]
 800477a:	4628      	mov	r0, r5
 800477c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004780:	f000 b8dc 	b.w	800493c <__malloc_unlock>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d908      	bls.n	800479a <_free_r+0x42>
 8004788:	6820      	ldr	r0, [r4, #0]
 800478a:	1821      	adds	r1, r4, r0
 800478c:	428b      	cmp	r3, r1
 800478e:	bf01      	itttt	eq
 8004790:	6819      	ldreq	r1, [r3, #0]
 8004792:	685b      	ldreq	r3, [r3, #4]
 8004794:	1809      	addeq	r1, r1, r0
 8004796:	6021      	streq	r1, [r4, #0]
 8004798:	e7ed      	b.n	8004776 <_free_r+0x1e>
 800479a:	461a      	mov	r2, r3
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	b10b      	cbz	r3, 80047a4 <_free_r+0x4c>
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d9fa      	bls.n	800479a <_free_r+0x42>
 80047a4:	6811      	ldr	r1, [r2, #0]
 80047a6:	1850      	adds	r0, r2, r1
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	d10b      	bne.n	80047c4 <_free_r+0x6c>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	4401      	add	r1, r0
 80047b0:	1850      	adds	r0, r2, r1
 80047b2:	4283      	cmp	r3, r0
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	d1e0      	bne.n	800477a <_free_r+0x22>
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	6053      	str	r3, [r2, #4]
 80047be:	4408      	add	r0, r1
 80047c0:	6010      	str	r0, [r2, #0]
 80047c2:	e7da      	b.n	800477a <_free_r+0x22>
 80047c4:	d902      	bls.n	80047cc <_free_r+0x74>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d6      	b.n	800477a <_free_r+0x22>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	428b      	cmp	r3, r1
 80047d2:	bf04      	itt	eq
 80047d4:	6819      	ldreq	r1, [r3, #0]
 80047d6:	685b      	ldreq	r3, [r3, #4]
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	bf04      	itt	eq
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	6054      	str	r4, [r2, #4]
 80047e2:	e7ca      	b.n	800477a <_free_r+0x22>
 80047e4:	bd38      	pop	{r3, r4, r5, pc}
 80047e6:	bf00      	nop
 80047e8:	200003c0 	.word	0x200003c0

080047ec <sbrk_aligned>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	4e0f      	ldr	r6, [pc, #60]	@ (800482c <sbrk_aligned+0x40>)
 80047f0:	460c      	mov	r4, r1
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	4605      	mov	r5, r0
 80047f6:	b911      	cbnz	r1, 80047fe <sbrk_aligned+0x12>
 80047f8:	f000 fba6 	bl	8004f48 <_sbrk_r>
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	4621      	mov	r1, r4
 8004800:	4628      	mov	r0, r5
 8004802:	f000 fba1 	bl	8004f48 <_sbrk_r>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d103      	bne.n	8004812 <sbrk_aligned+0x26>
 800480a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800480e:	4620      	mov	r0, r4
 8004810:	bd70      	pop	{r4, r5, r6, pc}
 8004812:	1cc4      	adds	r4, r0, #3
 8004814:	f024 0403 	bic.w	r4, r4, #3
 8004818:	42a0      	cmp	r0, r4
 800481a:	d0f8      	beq.n	800480e <sbrk_aligned+0x22>
 800481c:	1a21      	subs	r1, r4, r0
 800481e:	4628      	mov	r0, r5
 8004820:	f000 fb92 	bl	8004f48 <_sbrk_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d1f2      	bne.n	800480e <sbrk_aligned+0x22>
 8004828:	e7ef      	b.n	800480a <sbrk_aligned+0x1e>
 800482a:	bf00      	nop
 800482c:	200003bc 	.word	0x200003bc

08004830 <_malloc_r>:
 8004830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004834:	1ccd      	adds	r5, r1, #3
 8004836:	f025 0503 	bic.w	r5, r5, #3
 800483a:	3508      	adds	r5, #8
 800483c:	2d0c      	cmp	r5, #12
 800483e:	bf38      	it	cc
 8004840:	250c      	movcc	r5, #12
 8004842:	2d00      	cmp	r5, #0
 8004844:	4606      	mov	r6, r0
 8004846:	db01      	blt.n	800484c <_malloc_r+0x1c>
 8004848:	42a9      	cmp	r1, r5
 800484a:	d904      	bls.n	8004856 <_malloc_r+0x26>
 800484c:	230c      	movs	r3, #12
 800484e:	6033      	str	r3, [r6, #0]
 8004850:	2000      	movs	r0, #0
 8004852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800492c <_malloc_r+0xfc>
 800485a:	f000 f869 	bl	8004930 <__malloc_lock>
 800485e:	f8d8 3000 	ldr.w	r3, [r8]
 8004862:	461c      	mov	r4, r3
 8004864:	bb44      	cbnz	r4, 80048b8 <_malloc_r+0x88>
 8004866:	4629      	mov	r1, r5
 8004868:	4630      	mov	r0, r6
 800486a:	f7ff ffbf 	bl	80047ec <sbrk_aligned>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	4604      	mov	r4, r0
 8004872:	d158      	bne.n	8004926 <_malloc_r+0xf6>
 8004874:	f8d8 4000 	ldr.w	r4, [r8]
 8004878:	4627      	mov	r7, r4
 800487a:	2f00      	cmp	r7, #0
 800487c:	d143      	bne.n	8004906 <_malloc_r+0xd6>
 800487e:	2c00      	cmp	r4, #0
 8004880:	d04b      	beq.n	800491a <_malloc_r+0xea>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	4639      	mov	r1, r7
 8004886:	4630      	mov	r0, r6
 8004888:	eb04 0903 	add.w	r9, r4, r3
 800488c:	f000 fb5c 	bl	8004f48 <_sbrk_r>
 8004890:	4581      	cmp	r9, r0
 8004892:	d142      	bne.n	800491a <_malloc_r+0xea>
 8004894:	6821      	ldr	r1, [r4, #0]
 8004896:	1a6d      	subs	r5, r5, r1
 8004898:	4629      	mov	r1, r5
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff ffa6 	bl	80047ec <sbrk_aligned>
 80048a0:	3001      	adds	r0, #1
 80048a2:	d03a      	beq.n	800491a <_malloc_r+0xea>
 80048a4:	6823      	ldr	r3, [r4, #0]
 80048a6:	442b      	add	r3, r5
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	f8d8 3000 	ldr.w	r3, [r8]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	bb62      	cbnz	r2, 800490c <_malloc_r+0xdc>
 80048b2:	f8c8 7000 	str.w	r7, [r8]
 80048b6:	e00f      	b.n	80048d8 <_malloc_r+0xa8>
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	1b52      	subs	r2, r2, r5
 80048bc:	d420      	bmi.n	8004900 <_malloc_r+0xd0>
 80048be:	2a0b      	cmp	r2, #11
 80048c0:	d917      	bls.n	80048f2 <_malloc_r+0xc2>
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	6025      	str	r5, [r4, #0]
 80048c8:	bf18      	it	ne
 80048ca:	6059      	strne	r1, [r3, #4]
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	bf08      	it	eq
 80048d0:	f8c8 1000 	streq.w	r1, [r8]
 80048d4:	5162      	str	r2, [r4, r5]
 80048d6:	604b      	str	r3, [r1, #4]
 80048d8:	4630      	mov	r0, r6
 80048da:	f000 f82f 	bl	800493c <__malloc_unlock>
 80048de:	f104 000b 	add.w	r0, r4, #11
 80048e2:	1d23      	adds	r3, r4, #4
 80048e4:	f020 0007 	bic.w	r0, r0, #7
 80048e8:	1ac2      	subs	r2, r0, r3
 80048ea:	bf1c      	itt	ne
 80048ec:	1a1b      	subne	r3, r3, r0
 80048ee:	50a3      	strne	r3, [r4, r2]
 80048f0:	e7af      	b.n	8004852 <_malloc_r+0x22>
 80048f2:	6862      	ldr	r2, [r4, #4]
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	bf0c      	ite	eq
 80048f8:	f8c8 2000 	streq.w	r2, [r8]
 80048fc:	605a      	strne	r2, [r3, #4]
 80048fe:	e7eb      	b.n	80048d8 <_malloc_r+0xa8>
 8004900:	4623      	mov	r3, r4
 8004902:	6864      	ldr	r4, [r4, #4]
 8004904:	e7ae      	b.n	8004864 <_malloc_r+0x34>
 8004906:	463c      	mov	r4, r7
 8004908:	687f      	ldr	r7, [r7, #4]
 800490a:	e7b6      	b.n	800487a <_malloc_r+0x4a>
 800490c:	461a      	mov	r2, r3
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	42a3      	cmp	r3, r4
 8004912:	d1fb      	bne.n	800490c <_malloc_r+0xdc>
 8004914:	2300      	movs	r3, #0
 8004916:	6053      	str	r3, [r2, #4]
 8004918:	e7de      	b.n	80048d8 <_malloc_r+0xa8>
 800491a:	230c      	movs	r3, #12
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	4630      	mov	r0, r6
 8004920:	f000 f80c 	bl	800493c <__malloc_unlock>
 8004924:	e794      	b.n	8004850 <_malloc_r+0x20>
 8004926:	6005      	str	r5, [r0, #0]
 8004928:	e7d6      	b.n	80048d8 <_malloc_r+0xa8>
 800492a:	bf00      	nop
 800492c:	200003c0 	.word	0x200003c0

08004930 <__malloc_lock>:
 8004930:	4801      	ldr	r0, [pc, #4]	@ (8004938 <__malloc_lock+0x8>)
 8004932:	f7ff bf0f 	b.w	8004754 <__retarget_lock_acquire_recursive>
 8004936:	bf00      	nop
 8004938:	200003b8 	.word	0x200003b8

0800493c <__malloc_unlock>:
 800493c:	4801      	ldr	r0, [pc, #4]	@ (8004944 <__malloc_unlock+0x8>)
 800493e:	f7ff bf0a 	b.w	8004756 <__retarget_lock_release_recursive>
 8004942:	bf00      	nop
 8004944:	200003b8 	.word	0x200003b8

08004948 <__ssputs_r>:
 8004948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494c:	688e      	ldr	r6, [r1, #8]
 800494e:	461f      	mov	r7, r3
 8004950:	42be      	cmp	r6, r7
 8004952:	680b      	ldr	r3, [r1, #0]
 8004954:	4682      	mov	sl, r0
 8004956:	460c      	mov	r4, r1
 8004958:	4690      	mov	r8, r2
 800495a:	d82d      	bhi.n	80049b8 <__ssputs_r+0x70>
 800495c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004964:	d026      	beq.n	80049b4 <__ssputs_r+0x6c>
 8004966:	6965      	ldr	r5, [r4, #20]
 8004968:	6909      	ldr	r1, [r1, #16]
 800496a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800496e:	eba3 0901 	sub.w	r9, r3, r1
 8004972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004976:	1c7b      	adds	r3, r7, #1
 8004978:	444b      	add	r3, r9
 800497a:	106d      	asrs	r5, r5, #1
 800497c:	429d      	cmp	r5, r3
 800497e:	bf38      	it	cc
 8004980:	461d      	movcc	r5, r3
 8004982:	0553      	lsls	r3, r2, #21
 8004984:	d527      	bpl.n	80049d6 <__ssputs_r+0x8e>
 8004986:	4629      	mov	r1, r5
 8004988:	f7ff ff52 	bl	8004830 <_malloc_r>
 800498c:	4606      	mov	r6, r0
 800498e:	b360      	cbz	r0, 80049ea <__ssputs_r+0xa2>
 8004990:	6921      	ldr	r1, [r4, #16]
 8004992:	464a      	mov	r2, r9
 8004994:	f000 fae8 	bl	8004f68 <memcpy>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800499e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	6126      	str	r6, [r4, #16]
 80049a6:	6165      	str	r5, [r4, #20]
 80049a8:	444e      	add	r6, r9
 80049aa:	eba5 0509 	sub.w	r5, r5, r9
 80049ae:	6026      	str	r6, [r4, #0]
 80049b0:	60a5      	str	r5, [r4, #8]
 80049b2:	463e      	mov	r6, r7
 80049b4:	42be      	cmp	r6, r7
 80049b6:	d900      	bls.n	80049ba <__ssputs_r+0x72>
 80049b8:	463e      	mov	r6, r7
 80049ba:	6820      	ldr	r0, [r4, #0]
 80049bc:	4632      	mov	r2, r6
 80049be:	4641      	mov	r1, r8
 80049c0:	f000 faa8 	bl	8004f14 <memmove>
 80049c4:	68a3      	ldr	r3, [r4, #8]
 80049c6:	1b9b      	subs	r3, r3, r6
 80049c8:	60a3      	str	r3, [r4, #8]
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	4433      	add	r3, r6
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	2000      	movs	r0, #0
 80049d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d6:	462a      	mov	r2, r5
 80049d8:	f000 fad4 	bl	8004f84 <_realloc_r>
 80049dc:	4606      	mov	r6, r0
 80049de:	2800      	cmp	r0, #0
 80049e0:	d1e0      	bne.n	80049a4 <__ssputs_r+0x5c>
 80049e2:	6921      	ldr	r1, [r4, #16]
 80049e4:	4650      	mov	r0, sl
 80049e6:	f7ff feb7 	bl	8004758 <_free_r>
 80049ea:	230c      	movs	r3, #12
 80049ec:	f8ca 3000 	str.w	r3, [sl]
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049fc:	e7e9      	b.n	80049d2 <__ssputs_r+0x8a>
	...

08004a00 <_svfiprintf_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	4698      	mov	r8, r3
 8004a06:	898b      	ldrh	r3, [r1, #12]
 8004a08:	061b      	lsls	r3, r3, #24
 8004a0a:	b09d      	sub	sp, #116	@ 0x74
 8004a0c:	4607      	mov	r7, r0
 8004a0e:	460d      	mov	r5, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	d510      	bpl.n	8004a36 <_svfiprintf_r+0x36>
 8004a14:	690b      	ldr	r3, [r1, #16]
 8004a16:	b973      	cbnz	r3, 8004a36 <_svfiprintf_r+0x36>
 8004a18:	2140      	movs	r1, #64	@ 0x40
 8004a1a:	f7ff ff09 	bl	8004830 <_malloc_r>
 8004a1e:	6028      	str	r0, [r5, #0]
 8004a20:	6128      	str	r0, [r5, #16]
 8004a22:	b930      	cbnz	r0, 8004a32 <_svfiprintf_r+0x32>
 8004a24:	230c      	movs	r3, #12
 8004a26:	603b      	str	r3, [r7, #0]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a2c:	b01d      	add	sp, #116	@ 0x74
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	2340      	movs	r3, #64	@ 0x40
 8004a34:	616b      	str	r3, [r5, #20]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a44:	2330      	movs	r3, #48	@ 0x30
 8004a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004be4 <_svfiprintf_r+0x1e4>
 8004a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a4e:	f04f 0901 	mov.w	r9, #1
 8004a52:	4623      	mov	r3, r4
 8004a54:	469a      	mov	sl, r3
 8004a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a5a:	b10a      	cbz	r2, 8004a60 <_svfiprintf_r+0x60>
 8004a5c:	2a25      	cmp	r2, #37	@ 0x25
 8004a5e:	d1f9      	bne.n	8004a54 <_svfiprintf_r+0x54>
 8004a60:	ebba 0b04 	subs.w	fp, sl, r4
 8004a64:	d00b      	beq.n	8004a7e <_svfiprintf_r+0x7e>
 8004a66:	465b      	mov	r3, fp
 8004a68:	4622      	mov	r2, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ff6b 	bl	8004948 <__ssputs_r>
 8004a72:	3001      	adds	r0, #1
 8004a74:	f000 80a7 	beq.w	8004bc6 <_svfiprintf_r+0x1c6>
 8004a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a7a:	445a      	add	r2, fp
 8004a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 809f 	beq.w	8004bc6 <_svfiprintf_r+0x1c6>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a92:	f10a 0a01 	add.w	sl, sl, #1
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	9307      	str	r3, [sp, #28]
 8004a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004aa0:	4654      	mov	r4, sl
 8004aa2:	2205      	movs	r2, #5
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	484e      	ldr	r0, [pc, #312]	@ (8004be4 <_svfiprintf_r+0x1e4>)
 8004aaa:	f7fb fb99 	bl	80001e0 <memchr>
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	b9d8      	cbnz	r0, 8004aea <_svfiprintf_r+0xea>
 8004ab2:	06d0      	lsls	r0, r2, #27
 8004ab4:	bf44      	itt	mi
 8004ab6:	2320      	movmi	r3, #32
 8004ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004abc:	0711      	lsls	r1, r2, #28
 8004abe:	bf44      	itt	mi
 8004ac0:	232b      	movmi	r3, #43	@ 0x2b
 8004ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004acc:	d015      	beq.n	8004afa <_svfiprintf_r+0xfa>
 8004ace:	9a07      	ldr	r2, [sp, #28]
 8004ad0:	4654      	mov	r4, sl
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f04f 0c0a 	mov.w	ip, #10
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ade:	3b30      	subs	r3, #48	@ 0x30
 8004ae0:	2b09      	cmp	r3, #9
 8004ae2:	d94b      	bls.n	8004b7c <_svfiprintf_r+0x17c>
 8004ae4:	b1b0      	cbz	r0, 8004b14 <_svfiprintf_r+0x114>
 8004ae6:	9207      	str	r2, [sp, #28]
 8004ae8:	e014      	b.n	8004b14 <_svfiprintf_r+0x114>
 8004aea:	eba0 0308 	sub.w	r3, r0, r8
 8004aee:	fa09 f303 	lsl.w	r3, r9, r3
 8004af2:	4313      	orrs	r3, r2
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	46a2      	mov	sl, r4
 8004af8:	e7d2      	b.n	8004aa0 <_svfiprintf_r+0xa0>
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	1d19      	adds	r1, r3, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	9103      	str	r1, [sp, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfbb      	ittet	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	f042 0202 	orrlt.w	r2, r2, #2
 8004b0c:	9307      	strge	r3, [sp, #28]
 8004b0e:	9307      	strlt	r3, [sp, #28]
 8004b10:	bfb8      	it	lt
 8004b12:	9204      	strlt	r2, [sp, #16]
 8004b14:	7823      	ldrb	r3, [r4, #0]
 8004b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b18:	d10a      	bne.n	8004b30 <_svfiprintf_r+0x130>
 8004b1a:	7863      	ldrb	r3, [r4, #1]
 8004b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b1e:	d132      	bne.n	8004b86 <_svfiprintf_r+0x186>
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	9203      	str	r2, [sp, #12]
 8004b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b2c:	3402      	adds	r4, #2
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004bf4 <_svfiprintf_r+0x1f4>
 8004b34:	7821      	ldrb	r1, [r4, #0]
 8004b36:	2203      	movs	r2, #3
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f7fb fb51 	bl	80001e0 <memchr>
 8004b3e:	b138      	cbz	r0, 8004b50 <_svfiprintf_r+0x150>
 8004b40:	9b04      	ldr	r3, [sp, #16]
 8004b42:	eba0 000a 	sub.w	r0, r0, sl
 8004b46:	2240      	movs	r2, #64	@ 0x40
 8004b48:	4082      	lsls	r2, r0
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	3401      	adds	r4, #1
 8004b4e:	9304      	str	r3, [sp, #16]
 8004b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b54:	4824      	ldr	r0, [pc, #144]	@ (8004be8 <_svfiprintf_r+0x1e8>)
 8004b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004b5a:	2206      	movs	r2, #6
 8004b5c:	f7fb fb40 	bl	80001e0 <memchr>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d036      	beq.n	8004bd2 <_svfiprintf_r+0x1d2>
 8004b64:	4b21      	ldr	r3, [pc, #132]	@ (8004bec <_svfiprintf_r+0x1ec>)
 8004b66:	bb1b      	cbnz	r3, 8004bb0 <_svfiprintf_r+0x1b0>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3307      	adds	r3, #7
 8004b6c:	f023 0307 	bic.w	r3, r3, #7
 8004b70:	3308      	adds	r3, #8
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b76:	4433      	add	r3, r6
 8004b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7a:	e76a      	b.n	8004a52 <_svfiprintf_r+0x52>
 8004b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b80:	460c      	mov	r4, r1
 8004b82:	2001      	movs	r0, #1
 8004b84:	e7a8      	b.n	8004ad8 <_svfiprintf_r+0xd8>
 8004b86:	2300      	movs	r3, #0
 8004b88:	3401      	adds	r4, #1
 8004b8a:	9305      	str	r3, [sp, #20]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f04f 0c0a 	mov.w	ip, #10
 8004b92:	4620      	mov	r0, r4
 8004b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b98:	3a30      	subs	r2, #48	@ 0x30
 8004b9a:	2a09      	cmp	r2, #9
 8004b9c:	d903      	bls.n	8004ba6 <_svfiprintf_r+0x1a6>
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c6      	beq.n	8004b30 <_svfiprintf_r+0x130>
 8004ba2:	9105      	str	r1, [sp, #20]
 8004ba4:	e7c4      	b.n	8004b30 <_svfiprintf_r+0x130>
 8004ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004baa:	4604      	mov	r4, r0
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7f0      	b.n	8004b92 <_svfiprintf_r+0x192>
 8004bb0:	ab03      	add	r3, sp, #12
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	462a      	mov	r2, r5
 8004bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <_svfiprintf_r+0x1f0>)
 8004bb8:	a904      	add	r1, sp, #16
 8004bba:	4638      	mov	r0, r7
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	1c42      	adds	r2, r0, #1
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	d1d6      	bne.n	8004b74 <_svfiprintf_r+0x174>
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	065b      	lsls	r3, r3, #25
 8004bca:	f53f af2d 	bmi.w	8004a28 <_svfiprintf_r+0x28>
 8004bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004bd0:	e72c      	b.n	8004a2c <_svfiprintf_r+0x2c>
 8004bd2:	ab03      	add	r3, sp, #12
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	4b05      	ldr	r3, [pc, #20]	@ (8004bf0 <_svfiprintf_r+0x1f0>)
 8004bda:	a904      	add	r1, sp, #16
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f000 f879 	bl	8004cd4 <_printf_i>
 8004be2:	e7ed      	b.n	8004bc0 <_svfiprintf_r+0x1c0>
 8004be4:	08005050 	.word	0x08005050
 8004be8:	0800505a 	.word	0x0800505a
 8004bec:	00000000 	.word	0x00000000
 8004bf0:	08004949 	.word	0x08004949
 8004bf4:	08005056 	.word	0x08005056

08004bf8 <_printf_common>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	4698      	mov	r8, r3
 8004c00:	688a      	ldr	r2, [r1, #8]
 8004c02:	690b      	ldr	r3, [r1, #16]
 8004c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bfb8      	it	lt
 8004c0c:	4613      	movlt	r3, r2
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c14:	4607      	mov	r7, r0
 8004c16:	460c      	mov	r4, r1
 8004c18:	b10a      	cbz	r2, 8004c1e <_printf_common+0x26>
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	6033      	str	r3, [r6, #0]
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	0699      	lsls	r1, r3, #26
 8004c22:	bf42      	ittt	mi
 8004c24:	6833      	ldrmi	r3, [r6, #0]
 8004c26:	3302      	addmi	r3, #2
 8004c28:	6033      	strmi	r3, [r6, #0]
 8004c2a:	6825      	ldr	r5, [r4, #0]
 8004c2c:	f015 0506 	ands.w	r5, r5, #6
 8004c30:	d106      	bne.n	8004c40 <_printf_common+0x48>
 8004c32:	f104 0a19 	add.w	sl, r4, #25
 8004c36:	68e3      	ldr	r3, [r4, #12]
 8004c38:	6832      	ldr	r2, [r6, #0]
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	42ab      	cmp	r3, r5
 8004c3e:	dc26      	bgt.n	8004c8e <_printf_common+0x96>
 8004c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	3b00      	subs	r3, #0
 8004c48:	bf18      	it	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	0692      	lsls	r2, r2, #26
 8004c4e:	d42b      	bmi.n	8004ca8 <_printf_common+0xb0>
 8004c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c54:	4641      	mov	r1, r8
 8004c56:	4638      	mov	r0, r7
 8004c58:	47c8      	blx	r9
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	d01e      	beq.n	8004c9c <_printf_common+0xa4>
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	6922      	ldr	r2, [r4, #16]
 8004c62:	f003 0306 	and.w	r3, r3, #6
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf02      	ittt	eq
 8004c6a:	68e5      	ldreq	r5, [r4, #12]
 8004c6c:	6833      	ldreq	r3, [r6, #0]
 8004c6e:	1aed      	subeq	r5, r5, r3
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	bf0c      	ite	eq
 8004c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c78:	2500      	movne	r5, #0
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bfc4      	itt	gt
 8004c7e:	1a9b      	subgt	r3, r3, r2
 8004c80:	18ed      	addgt	r5, r5, r3
 8004c82:	2600      	movs	r6, #0
 8004c84:	341a      	adds	r4, #26
 8004c86:	42b5      	cmp	r5, r6
 8004c88:	d11a      	bne.n	8004cc0 <_printf_common+0xc8>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e008      	b.n	8004ca0 <_printf_common+0xa8>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4641      	mov	r1, r8
 8004c94:	4638      	mov	r0, r7
 8004c96:	47c8      	blx	r9
 8004c98:	3001      	adds	r0, #1
 8004c9a:	d103      	bne.n	8004ca4 <_printf_common+0xac>
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	e7c6      	b.n	8004c36 <_printf_common+0x3e>
 8004ca8:	18e1      	adds	r1, r4, r3
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	2030      	movs	r0, #48	@ 0x30
 8004cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cb2:	4422      	add	r2, r4
 8004cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	e7c7      	b.n	8004c50 <_printf_common+0x58>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	47c8      	blx	r9
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d0e6      	beq.n	8004c9c <_printf_common+0xa4>
 8004cce:	3601      	adds	r6, #1
 8004cd0:	e7d9      	b.n	8004c86 <_printf_common+0x8e>
	...

08004cd4 <_printf_i>:
 8004cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd8:	7e0f      	ldrb	r7, [r1, #24]
 8004cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004cdc:	2f78      	cmp	r7, #120	@ 0x78
 8004cde:	4691      	mov	r9, r2
 8004ce0:	4680      	mov	r8, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cea:	d807      	bhi.n	8004cfc <_printf_i+0x28>
 8004cec:	2f62      	cmp	r7, #98	@ 0x62
 8004cee:	d80a      	bhi.n	8004d06 <_printf_i+0x32>
 8004cf0:	2f00      	cmp	r7, #0
 8004cf2:	f000 80d2 	beq.w	8004e9a <_printf_i+0x1c6>
 8004cf6:	2f58      	cmp	r7, #88	@ 0x58
 8004cf8:	f000 80b9 	beq.w	8004e6e <_printf_i+0x19a>
 8004cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d04:	e03a      	b.n	8004d7c <_printf_i+0xa8>
 8004d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d0a:	2b15      	cmp	r3, #21
 8004d0c:	d8f6      	bhi.n	8004cfc <_printf_i+0x28>
 8004d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d14 <_printf_i+0x40>)
 8004d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d81 	.word	0x08004d81
 8004d1c:	08004cfd 	.word	0x08004cfd
 8004d20:	08004cfd 	.word	0x08004cfd
 8004d24:	08004cfd 	.word	0x08004cfd
 8004d28:	08004cfd 	.word	0x08004cfd
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004cfd 	.word	0x08004cfd
 8004d34:	08004cfd 	.word	0x08004cfd
 8004d38:	08004cfd 	.word	0x08004cfd
 8004d3c:	08004cfd 	.word	0x08004cfd
 8004d40:	08004e81 	.word	0x08004e81
 8004d44:	08004dab 	.word	0x08004dab
 8004d48:	08004e3b 	.word	0x08004e3b
 8004d4c:	08004cfd 	.word	0x08004cfd
 8004d50:	08004cfd 	.word	0x08004cfd
 8004d54:	08004ea3 	.word	0x08004ea3
 8004d58:	08004cfd 	.word	0x08004cfd
 8004d5c:	08004dab 	.word	0x08004dab
 8004d60:	08004cfd 	.word	0x08004cfd
 8004d64:	08004cfd 	.word	0x08004cfd
 8004d68:	08004e43 	.word	0x08004e43
 8004d6c:	6833      	ldr	r3, [r6, #0]
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6032      	str	r2, [r6, #0]
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e09d      	b.n	8004ebc <_printf_i+0x1e8>
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	1d19      	adds	r1, r3, #4
 8004d86:	6031      	str	r1, [r6, #0]
 8004d88:	0606      	lsls	r6, r0, #24
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0xbc>
 8004d8c:	681d      	ldr	r5, [r3, #0]
 8004d8e:	e003      	b.n	8004d98 <_printf_i+0xc4>
 8004d90:	0645      	lsls	r5, r0, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0xb8>
 8004d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	da03      	bge.n	8004da4 <_printf_i+0xd0>
 8004d9c:	232d      	movs	r3, #45	@ 0x2d
 8004d9e:	426d      	negs	r5, r5
 8004da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004da4:	4859      	ldr	r0, [pc, #356]	@ (8004f0c <_printf_i+0x238>)
 8004da6:	230a      	movs	r3, #10
 8004da8:	e011      	b.n	8004dce <_printf_i+0xfa>
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	0608      	lsls	r0, r1, #24
 8004db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004db4:	d402      	bmi.n	8004dbc <_printf_i+0xe8>
 8004db6:	0649      	lsls	r1, r1, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2ad      	uxthmi	r5, r5
 8004dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dbe:	4853      	ldr	r0, [pc, #332]	@ (8004f0c <_printf_i+0x238>)
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	bf14      	ite	ne
 8004dc4:	230a      	movne	r3, #10
 8004dc6:	2308      	moveq	r3, #8
 8004dc8:	2100      	movs	r1, #0
 8004dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dce:	6866      	ldr	r6, [r4, #4]
 8004dd0:	60a6      	str	r6, [r4, #8]
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	bfa2      	ittt	ge
 8004dd6:	6821      	ldrge	r1, [r4, #0]
 8004dd8:	f021 0104 	bicge.w	r1, r1, #4
 8004ddc:	6021      	strge	r1, [r4, #0]
 8004dde:	b90d      	cbnz	r5, 8004de4 <_printf_i+0x110>
 8004de0:	2e00      	cmp	r6, #0
 8004de2:	d04b      	beq.n	8004e7c <_printf_i+0x1a8>
 8004de4:	4616      	mov	r6, r2
 8004de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dea:	fb03 5711 	mls	r7, r3, r1, r5
 8004dee:	5dc7      	ldrb	r7, [r0, r7]
 8004df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004df4:	462f      	mov	r7, r5
 8004df6:	42bb      	cmp	r3, r7
 8004df8:	460d      	mov	r5, r1
 8004dfa:	d9f4      	bls.n	8004de6 <_printf_i+0x112>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d10b      	bne.n	8004e18 <_printf_i+0x144>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	07df      	lsls	r7, r3, #31
 8004e04:	d508      	bpl.n	8004e18 <_printf_i+0x144>
 8004e06:	6923      	ldr	r3, [r4, #16]
 8004e08:	6861      	ldr	r1, [r4, #4]
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	bfde      	ittt	le
 8004e0e:	2330      	movle	r3, #48	@ 0x30
 8004e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004e18:	1b92      	subs	r2, r2, r6
 8004e1a:	6122      	str	r2, [r4, #16]
 8004e1c:	f8cd a000 	str.w	sl, [sp]
 8004e20:	464b      	mov	r3, r9
 8004e22:	aa03      	add	r2, sp, #12
 8004e24:	4621      	mov	r1, r4
 8004e26:	4640      	mov	r0, r8
 8004e28:	f7ff fee6 	bl	8004bf8 <_printf_common>
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d14a      	bne.n	8004ec6 <_printf_i+0x1f2>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e34:	b004      	add	sp, #16
 8004e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	4833      	ldr	r0, [pc, #204]	@ (8004f10 <_printf_i+0x23c>)
 8004e44:	2778      	movs	r7, #120	@ 0x78
 8004e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	6831      	ldr	r1, [r6, #0]
 8004e4e:	061f      	lsls	r7, r3, #24
 8004e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e54:	d402      	bmi.n	8004e5c <_printf_i+0x188>
 8004e56:	065f      	lsls	r7, r3, #25
 8004e58:	bf48      	it	mi
 8004e5a:	b2ad      	uxthmi	r5, r5
 8004e5c:	6031      	str	r1, [r6, #0]
 8004e5e:	07d9      	lsls	r1, r3, #31
 8004e60:	bf44      	itt	mi
 8004e62:	f043 0320 	orrmi.w	r3, r3, #32
 8004e66:	6023      	strmi	r3, [r4, #0]
 8004e68:	b11d      	cbz	r5, 8004e72 <_printf_i+0x19e>
 8004e6a:	2310      	movs	r3, #16
 8004e6c:	e7ac      	b.n	8004dc8 <_printf_i+0xf4>
 8004e6e:	4827      	ldr	r0, [pc, #156]	@ (8004f0c <_printf_i+0x238>)
 8004e70:	e7e9      	b.n	8004e46 <_printf_i+0x172>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f023 0320 	bic.w	r3, r3, #32
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	e7f6      	b.n	8004e6a <_printf_i+0x196>
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	e7bd      	b.n	8004dfc <_printf_i+0x128>
 8004e80:	6833      	ldr	r3, [r6, #0]
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	6961      	ldr	r1, [r4, #20]
 8004e86:	1d18      	adds	r0, r3, #4
 8004e88:	6030      	str	r0, [r6, #0]
 8004e8a:	062e      	lsls	r6, r5, #24
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0x1c0>
 8004e90:	6019      	str	r1, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0x1c6>
 8004e94:	0668      	lsls	r0, r5, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0x1bc>
 8004e98:	8019      	strh	r1, [r3, #0]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	6123      	str	r3, [r4, #16]
 8004e9e:	4616      	mov	r6, r2
 8004ea0:	e7bc      	b.n	8004e1c <_printf_i+0x148>
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	1d1a      	adds	r2, r3, #4
 8004ea6:	6032      	str	r2, [r6, #0]
 8004ea8:	681e      	ldr	r6, [r3, #0]
 8004eaa:	6862      	ldr	r2, [r4, #4]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4630      	mov	r0, r6
 8004eb0:	f7fb f996 	bl	80001e0 <memchr>
 8004eb4:	b108      	cbz	r0, 8004eba <_printf_i+0x1e6>
 8004eb6:	1b80      	subs	r0, r0, r6
 8004eb8:	6060      	str	r0, [r4, #4]
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ec4:	e7aa      	b.n	8004e1c <_printf_i+0x148>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	4649      	mov	r1, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	47d0      	blx	sl
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	d0ad      	beq.n	8004e30 <_printf_i+0x15c>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	079b      	lsls	r3, r3, #30
 8004ed8:	d413      	bmi.n	8004f02 <_printf_i+0x22e>
 8004eda:	68e0      	ldr	r0, [r4, #12]
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	4298      	cmp	r0, r3
 8004ee0:	bfb8      	it	lt
 8004ee2:	4618      	movlt	r0, r3
 8004ee4:	e7a6      	b.n	8004e34 <_printf_i+0x160>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4649      	mov	r1, r9
 8004eec:	4640      	mov	r0, r8
 8004eee:	47d0      	blx	sl
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d09d      	beq.n	8004e30 <_printf_i+0x15c>
 8004ef4:	3501      	adds	r5, #1
 8004ef6:	68e3      	ldr	r3, [r4, #12]
 8004ef8:	9903      	ldr	r1, [sp, #12]
 8004efa:	1a5b      	subs	r3, r3, r1
 8004efc:	42ab      	cmp	r3, r5
 8004efe:	dcf2      	bgt.n	8004ee6 <_printf_i+0x212>
 8004f00:	e7eb      	b.n	8004eda <_printf_i+0x206>
 8004f02:	2500      	movs	r5, #0
 8004f04:	f104 0619 	add.w	r6, r4, #25
 8004f08:	e7f5      	b.n	8004ef6 <_printf_i+0x222>
 8004f0a:	bf00      	nop
 8004f0c:	08005061 	.word	0x08005061
 8004f10:	08005072 	.word	0x08005072

08004f14 <memmove>:
 8004f14:	4288      	cmp	r0, r1
 8004f16:	b510      	push	{r4, lr}
 8004f18:	eb01 0402 	add.w	r4, r1, r2
 8004f1c:	d902      	bls.n	8004f24 <memmove+0x10>
 8004f1e:	4284      	cmp	r4, r0
 8004f20:	4623      	mov	r3, r4
 8004f22:	d807      	bhi.n	8004f34 <memmove+0x20>
 8004f24:	1e43      	subs	r3, r0, #1
 8004f26:	42a1      	cmp	r1, r4
 8004f28:	d008      	beq.n	8004f3c <memmove+0x28>
 8004f2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f32:	e7f8      	b.n	8004f26 <memmove+0x12>
 8004f34:	4402      	add	r2, r0
 8004f36:	4601      	mov	r1, r0
 8004f38:	428a      	cmp	r2, r1
 8004f3a:	d100      	bne.n	8004f3e <memmove+0x2a>
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f46:	e7f7      	b.n	8004f38 <memmove+0x24>

08004f48 <_sbrk_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	@ (8004f64 <_sbrk_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fb feb4 	bl	8000cc0 <_sbrk>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_sbrk_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_sbrk_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	200003b4 	.word	0x200003b4

08004f68 <memcpy>:
 8004f68:	440a      	add	r2, r1
 8004f6a:	4291      	cmp	r1, r2
 8004f6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004f70:	d100      	bne.n	8004f74 <memcpy+0xc>
 8004f72:	4770      	bx	lr
 8004f74:	b510      	push	{r4, lr}
 8004f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7e:	4291      	cmp	r1, r2
 8004f80:	d1f9      	bne.n	8004f76 <memcpy+0xe>
 8004f82:	bd10      	pop	{r4, pc}

08004f84 <_realloc_r>:
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	4680      	mov	r8, r0
 8004f8a:	4615      	mov	r5, r2
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	b921      	cbnz	r1, 8004f9a <_realloc_r+0x16>
 8004f90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4611      	mov	r1, r2
 8004f96:	f7ff bc4b 	b.w	8004830 <_malloc_r>
 8004f9a:	b92a      	cbnz	r2, 8004fa8 <_realloc_r+0x24>
 8004f9c:	f7ff fbdc 	bl	8004758 <_free_r>
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	4620      	mov	r0, r4
 8004fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa8:	f000 f81a 	bl	8004fe0 <_malloc_usable_size_r>
 8004fac:	4285      	cmp	r5, r0
 8004fae:	4606      	mov	r6, r0
 8004fb0:	d802      	bhi.n	8004fb8 <_realloc_r+0x34>
 8004fb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004fb6:	d8f4      	bhi.n	8004fa2 <_realloc_r+0x1e>
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fc38 	bl	8004830 <_malloc_r>
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d0ec      	beq.n	8004fa0 <_realloc_r+0x1c>
 8004fc6:	42b5      	cmp	r5, r6
 8004fc8:	462a      	mov	r2, r5
 8004fca:	4621      	mov	r1, r4
 8004fcc:	bf28      	it	cs
 8004fce:	4632      	movcs	r2, r6
 8004fd0:	f7ff ffca 	bl	8004f68 <memcpy>
 8004fd4:	4621      	mov	r1, r4
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f7ff fbbe 	bl	8004758 <_free_r>
 8004fdc:	463c      	mov	r4, r7
 8004fde:	e7e0      	b.n	8004fa2 <_realloc_r+0x1e>

08004fe0 <_malloc_usable_size_r>:
 8004fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe4:	1f18      	subs	r0, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbc      	itt	lt
 8004fea:	580b      	ldrlt	r3, [r1, r0]
 8004fec:	18c0      	addlt	r0, r0, r3
 8004fee:	4770      	bx	lr

08004ff0 <_init>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr

08004ffc <_fini>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr
